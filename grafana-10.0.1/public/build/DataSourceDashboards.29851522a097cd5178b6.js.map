{"version":3,"file":"DataSourceDashboards.29851522a097cd5178b6.js","mappings":"yJAcO,SAASA,EAAgB,CAAE,WAAAC,EAAY,SAAAC,EAAU,SAAAC,CAAS,EAAU,CACzE,SAASC,EAAWC,EAA4B,CAC9C,OAAOA,EAAU,WAAaA,EAAU,iBAAmB,SAAW,WACxE,CAEA,OACE,gBAAC,SAAM,UAAU,gBACf,gBAAC,aACEJ,EAAW,IAAI,CAACI,EAAWC,IAExB,gBAAC,MAAG,IAAK,GAAGD,EAAU,eAAeC,GAAA,EACnC,gBAAC,MAAG,UAAU,WACZ,gBAAC,IAAI,CAAC,KAAK,MAAO,EACpB,EACA,gBAAC,UACED,EAAU,SACT,gBAAC,KAAE,KAAMA,EAAU,aAAcA,EAAU,KAAM,EAEjD,gBAAC,YAAMA,EAAU,KAAM,CAE3B,EACA,gBAAC,MAAG,MAAO,CAAE,UAAW,OAAQ,GAC5BA,EAAU,SAKV,gBAAC,KAAM,CAAC,QAAQ,YAAY,KAAK,KAAK,QAAS,IAAMH,EAASG,EAAW,EAAI,GAC1ED,EAAWC,CAAS,CACvB,EANA,gBAAC,KAAM,CAAC,QAAQ,YAAY,KAAK,KAAK,QAAS,IAAMH,EAASG,EAAW,EAAK,GAAG,QAEjF,EAMDA,EAAU,UACT,gBAAC,MACC,aAAW,mBACX,KAAK,YACL,QAAQ,cACR,KAAK,KACL,QAAS,IAAMF,EAASE,CAAS,EACnC,CAEJ,CACF,CAEH,CACH,CACF,CAEJ,CAEA,QAAeL,C,kHChDR,SAASO,EAAqB,CAAE,IAAAC,CAAI,EAAU,IACnD,MAAkBA,CAAG,EAErB,MAAMC,KAAW,eAAY,EACvBC,KAAa,eAAaC,GAAkBA,EAAE,YAAY,UAAU,EACpEV,KAAa,eAAaU,GAAkBA,EAAE,QAAQ,UAAU,EAChEC,KAAY,eAAaD,GAAkBA,EAAE,QAAQ,yBAAyB,KAEpF,aAAU,IAAM,CAEVD,EAAW,GAAK,GAClBD,KAAS,MAAqB,CAAC,CAEnC,EAAG,CAACA,EAAUC,CAAU,CAAC,EAEzB,MAAMG,EAAoB,CAACR,EAA4BS,IAAuB,CAC5EL,KACE,MACE,CACE,SAAUJ,EAAU,SACpB,KAAMA,EAAU,KAChB,UAAAS,EACA,OAAQ,CACN,CACE,KAAM,IACN,KAAM,aACN,SAAUJ,EAAW,KACrB,MAAOA,EAAW,IACpB,CACF,CACF,EACAL,EAAU,KACZ,CACF,CACF,EAEMU,EAAoB,CAAC,CAAE,IAAAP,CAAI,IAAuB,CACtDC,KAAS,MAAgBD,CAAG,CAAC,CAC/B,EAEA,OACE,gBAACQ,EAAA,CACC,WAAAf,EACA,UAAAW,EACA,kBAAAC,EACA,kBAAAE,CAAA,CACF,CAEJ,CASO,MAAMC,EAA2B,CAAC,CACvC,UAAAJ,EACA,WAAAX,EACA,kBAAAY,EACA,kBAAAE,CACF,IACMH,EACK,gBAAC,IAAU,IAAC,EAGd,gBAAC,IAAc,CAAC,WAAAX,EAAwB,SAAUY,EAAmB,SAAUE,CAAA,CAAmB,C,6HCxEpG,SAASE,EAAyBC,EAAc,CACrD,MAAMV,EAAMU,EAAM,MAAM,OAAO,IACzBC,KAAM,MAAyBX,EAAK,YAAY,EAEtD,OACE,gBAAC,IAAI,CAAC,MAAM,cAAc,QAASW,EAAI,MACrC,gBAAC,kBACC,gBAAC,IAAoB,CAAC,IAAAX,CAAA,CAAU,CAClC,CACF,CAEJ,CAEA,QAAeS,C","sources":["webpack://grafana/./public/app/features/datasources/components/DashboardsTable.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceDashboards.tsx","webpack://grafana/./public/app/features/datasources/pages/DataSourceDashboardsPage.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Button, Icon } from '@grafana/ui';\nimport { PluginDashboard } from 'app/types';\n\nexport interface Props {\n  // List of plugin dashboards to show in the table\n  dashboards: PluginDashboard[];\n  // Callback used when the user clicks on importing a dashboard\n  onImport: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  // Callback used when the user clicks on removing a dashboard\n  onRemove: (dashboard: PluginDashboard) => void;\n}\n\nexport function DashboardsTable({ dashboards, onImport, onRemove }: Props) {\n  function buttonText(dashboard: PluginDashboard) {\n    return dashboard.revision !== dashboard.importedRevision ? 'Update' : 'Re-import';\n  }\n\n  return (\n    <table className=\"filter-table\">\n      <tbody>\n        {dashboards.map((dashboard, index) => {\n          return (\n            <tr key={`${dashboard.dashboardId}-${index}`}>\n              <td className=\"width-1\">\n                <Icon name=\"apps\" />\n              </td>\n              <td>\n                {dashboard.imported ? (\n                  <a href={dashboard.importedUrl}>{dashboard.title}</a>\n                ) : (\n                  <span>{dashboard.title}</span>\n                )}\n              </td>\n              <td style={{ textAlign: 'right' }}>\n                {!dashboard.imported ? (\n                  <Button variant=\"secondary\" size=\"sm\" onClick={() => onImport(dashboard, false)}>\n                    Import\n                  </Button>\n                ) : (\n                  <Button variant=\"secondary\" size=\"sm\" onClick={() => onImport(dashboard, true)}>\n                    {buttonText(dashboard)}\n                  </Button>\n                )}\n                {dashboard.imported && (\n                  <Button\n                    aria-label=\"Delete dashboard\"\n                    icon=\"trash-alt\"\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => onRemove(dashboard)}\n                  />\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default DashboardsTable;\n","import React, { useEffect } from 'react';\n\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { importDashboard, removeDashboard } from 'app/features/dashboard/state/actions';\nimport { loadPluginDashboards } from 'app/features/plugins/admin/state/actions';\nimport { PluginDashboard, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport DashboardTable from '../components/DashboardsTable';\nimport { useLoadDataSource } from '../state';\n\nexport type Props = {\n  // The UID of the data source\n  uid: string;\n};\n\nexport function DataSourceDashboards({ uid }: Props) {\n  useLoadDataSource(uid);\n\n  const dispatch = useDispatch();\n  const dataSource = useSelector((s: StoreState) => s.dataSources.dataSource);\n  const dashboards = useSelector((s: StoreState) => s.plugins.dashboards);\n  const isLoading = useSelector((s: StoreState) => s.plugins.isLoadingPluginDashboards);\n\n  useEffect(() => {\n    // Load plugin dashboards only when the datasource has loaded\n    if (dataSource.id > 0) {\n      dispatch(loadPluginDashboards());\n    }\n  }, [dispatch, dataSource]);\n\n  const onImportDashboard = (dashboard: PluginDashboard, overwrite: boolean) => {\n    dispatch(\n      importDashboard(\n        {\n          pluginId: dashboard.pluginId,\n          path: dashboard.path,\n          overwrite,\n          inputs: [\n            {\n              name: '*',\n              type: 'datasource',\n              pluginId: dataSource.type,\n              value: dataSource.name,\n            },\n          ],\n        },\n        dashboard.title\n      )\n    );\n  };\n\n  const onRemoveDashboard = ({ uid }: PluginDashboard) => {\n    dispatch(removeDashboard(uid));\n  };\n\n  return (\n    <DataSourceDashboardsView\n      dashboards={dashboards}\n      isLoading={isLoading}\n      onImportDashboard={onImportDashboard}\n      onRemoveDashboard={onRemoveDashboard}\n    />\n  );\n}\n\nexport type ViewProps = {\n  isLoading: boolean;\n  dashboards: PluginDashboard[];\n  onImportDashboard: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemoveDashboard: (dashboard: PluginDashboard) => void;\n};\n\nexport const DataSourceDashboardsView = ({\n  isLoading,\n  dashboards,\n  onImportDashboard,\n  onRemoveDashboard,\n}: ViewProps) => {\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return <DashboardTable dashboards={dashboards} onImport={onImportDashboard} onRemove={onRemoveDashboard} />;\n};\n","import React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { DataSourceDashboards } from '../components/DataSourceDashboards';\nimport { useDataSourceSettingsNav } from '../state';\n\nexport interface Props extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nexport function DataSourceDashboardsPage(props: Props) {\n  const uid = props.match.params.uid;\n  const nav = useDataSourceSettingsNav(uid, 'dashboards');\n\n  return (\n    <Page navId=\"datasources\" pageNav={nav.main}>\n      <Page.Contents>\n        <DataSourceDashboards uid={uid} />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default DataSourceDashboardsPage;\n"],"names":["DashboardsTable","dashboards","onImport","onRemove","buttonText","dashboard","index","DataSourceDashboards","uid","dispatch","dataSource","s","isLoading","onImportDashboard","overwrite","onRemoveDashboard","DataSourceDashboardsView","DataSourceDashboardsPage","props","nav"],"sourceRoot":""}