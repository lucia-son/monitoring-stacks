{"version":3,"file":"FolderAlerting.a42b0fc1ed4a452bc6c4.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts","webpack://grafana/./public/app/features/alerting/unified/AlertsFolderView.tsx","webpack://grafana/./public/app/features/folders/FolderAlerting.tsx"],"sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n","import { css } from '@emotion/css';\nimport { orderBy } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Card, FilterInput, Icon, Pagination, Select, TagList, useStyles2 } from '@grafana/ui';\nimport { DEFAULT_PER_PAGE_PAGINATION } from 'app/core/constants';\nimport { getQueryParamValue } from 'app/core/utils/query';\nimport { FolderState, useDispatch } from 'app/types';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { useCombinedRuleNamespaces } from './hooks/useCombinedRuleNamespaces';\nimport { usePagination } from './hooks/usePagination';\nimport { useURLSearchParams } from './hooks/useURLSearchParams';\nimport { fetchPromRulesAction, fetchRulerRulesAction } from './state/actions';\nimport { combineMatcherStrings, labelsMatchMatchers, parseMatchers } from './utils/alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\nimport { createViewLink } from './utils/misc';\n\ninterface Props {\n  folder: FolderState;\n}\n\nenum SortOrder {\n  Ascending = 'alpha-asc',\n  Descending = 'alpha-desc',\n}\n\nconst sortOptions: Array<SelectableValue<SortOrder>> = [\n  { label: 'Alphabetically [A-Z]', value: SortOrder.Ascending },\n  { label: 'Alphabetically [Z-A]', value: SortOrder.Descending },\n];\n\nexport const AlertsFolderView = ({ folder }: Props) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n\n  const onTagClick = (tagName: string) => {\n    const matchersString = combineMatcherStrings(labelFilter, tagName);\n    setLabelFilter(matchersString);\n  };\n\n  useEffect(() => {\n    dispatch(fetchPromRulesAction({ rulesSourceName: GRAFANA_RULES_SOURCE_NAME }));\n    dispatch(fetchRulerRulesAction({ rulesSourceName: GRAFANA_RULES_SOURCE_NAME }));\n  }, [dispatch]);\n\n  const combinedNamespaces = useCombinedRuleNamespaces(GRAFANA_RULES_SOURCE_NAME);\n  const { nameFilter, labelFilter, sortOrder, setNameFilter, setLabelFilter, setSortOrder } =\n    useAlertsFolderViewParams();\n\n  const matchingNamespace = combinedNamespaces.find((namespace) => namespace.name === folder.title);\n  const alertRules = matchingNamespace?.groups.flatMap((group) => group.rules) ?? [];\n\n  const filteredRules = filterAndSortRules(alertRules, nameFilter, labelFilter, sortOrder ?? SortOrder.Ascending);\n\n  const hasNoResults = alertRules.length === 0 || filteredRules.length === 0;\n  const { page, numberOfPages, onPageChange, pageItems } = usePagination(filteredRules, 1, DEFAULT_PER_PAGE_PAGINATION);\n\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"column\" gap={3}>\n        <FilterInput\n          value={nameFilter}\n          onChange={setNameFilter}\n          placeholder=\"Search alert rules by name\"\n          data-testid=\"name-filter\"\n        />\n        <Stack direction=\"row\">\n          <Select<SortOrder>\n            value={sortOrder}\n            onChange={({ value }) => value && setSortOrder(value)}\n            options={sortOptions}\n            width={25}\n            aria-label=\"Sort\"\n            placeholder={`Sort (Default A-Z)`}\n            prefix={<Icon name={sortOrder === SortOrder.Ascending ? 'sort-amount-up' : 'sort-amount-down'} />}\n          />\n          <FilterInput\n            value={labelFilter}\n            onChange={setLabelFilter}\n            placeholder=\"Search alerts by labels\"\n            className={styles.filterLabelsInput}\n            data-testid=\"label-filter\"\n          />\n        </Stack>\n\n        <Stack gap={1}>\n          {pageItems.map((currentRule) => (\n            <Card\n              key={currentRule.name}\n              href={createViewLink('grafana', currentRule, '')}\n              className={styles.card}\n              data-testid=\"alert-card-row\"\n            >\n              <Card.Heading>{currentRule.name}</Card.Heading>\n              <Card.Tags>\n                <TagList\n                  onClick={onTagClick}\n                  tags={Object.entries(currentRule.labels).map(([label, value]) => `${label}=${value}`)}\n                />\n              </Card.Tags>\n              <Card.Meta>\n                <div>\n                  <Icon name=\"folder\" /> {folder.title}\n                </div>\n              </Card.Meta>\n            </Card>\n          ))}\n        </Stack>\n        {hasNoResults && <div className={styles.noResults}>No alert rules found</div>}\n        <div className={styles.pagination}>\n          <Pagination\n            currentPage={page}\n            numberOfPages={numberOfPages}\n            onNavigate={onPageChange}\n            hideWhenSinglePage={true}\n          />\n        </div>\n      </Stack>\n    </div>\n  );\n};\n\nenum AlertFolderViewParams {\n  nameFilter = 'nameFilter',\n  labelFilter = 'labelFilter',\n  sortOrder = 'sort',\n}\n\nfunction useAlertsFolderViewParams() {\n  const [searchParams, setSearchParams] = useURLSearchParams();\n\n  const [nameFilter, setNameFilter] = useState(searchParams.get(AlertFolderViewParams.nameFilter) ?? '');\n  const [labelFilter, setLabelFilter] = useState(searchParams.get(AlertFolderViewParams.labelFilter) ?? '');\n\n  const sortParam = searchParams.get(AlertFolderViewParams.sortOrder);\n  const [sortOrder, setSortOrder] = useState<SortOrder | undefined>(\n    sortParam === SortOrder.Ascending\n      ? SortOrder.Ascending\n      : sortParam === SortOrder.Descending\n      ? SortOrder.Descending\n      : undefined\n  );\n\n  useDebounce(\n    () =>\n      setSearchParams(\n        {\n          [AlertFolderViewParams.nameFilter]: getQueryParamValue(nameFilter),\n          [AlertFolderViewParams.labelFilter]: getQueryParamValue(labelFilter),\n          [AlertFolderViewParams.sortOrder]: getQueryParamValue(sortOrder),\n        },\n        true\n      ),\n    400,\n    [nameFilter, labelFilter, sortOrder]\n  );\n\n  return { nameFilter, labelFilter, sortOrder, setNameFilter, setLabelFilter, setSortOrder };\n}\n\nfunction filterAndSortRules(\n  originalRules: CombinedRule[],\n  nameFilter: string,\n  labelFilter: string,\n  sortOrder: SortOrder\n) {\n  const matchers = parseMatchers(labelFilter);\n  let rules = originalRules.filter(\n    (rule) => rule.name.toLowerCase().includes(nameFilter.toLowerCase()) && labelsMatchMatchers(rule.labels, matchers)\n  );\n\n  return orderBy(rules, (x) => x.name.toLowerCase(), [sortOrder === SortOrder.Ascending ? 'asc' : 'desc']);\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    padding: ${theme.spacing(1)};\n  `,\n  card: css`\n    grid-template-columns: auto 1fr 2fr;\n    margin: 0;\n  `,\n  pagination: css`\n    align-self: center;\n  `,\n  filterLabelsInput: css`\n    flex: 1;\n    width: auto;\n    min-width: 240px;\n  `,\n  noResults: css`\n    padding: ${theme.spacing(2)};\n    background-color: ${theme.colors.background.secondary};\n    font-style: italic;\n  `,\n});\n","import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { AlertsFolderView } from '../alerting/unified/AlertsFolderView';\n\nimport { getFolderByUid } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nconst FolderAlerting = ({ match }: OwnProps) => {\n  const dispatch = useDispatch();\n  const navIndex = useSelector((state) => state.navIndex);\n  const folder = useSelector((state) => state.folder);\n\n  const uid = match.params.uid;\n  const pageNav = getNavModel(navIndex, `folder-alerting-${uid}`, getLoadingNav(1));\n\n  const { loading } = useAsync(async () => dispatch(getFolderByUid(uid)), [getFolderByUid, uid]);\n\n  return (\n    <Page navId=\"dashboards/browse\" pageNav={pageNav.main}>\n      <Page.Contents isLoading={loading}>\n        <AlertsFolderView folder={folder} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default FolderAlerting;\n"],"names":["useURLSearchParams","search","queryParams","update","searchValues","replace","SortOrder","sortOptions","AlertsFolderView","folder","styles","getStyles","dispatch","onTagClick","tagName","matchersString","labelFilter","setLabelFilter","combinedNamespaces","useCombinedRuleNamespaces","nameFilter","sortOrder","setNameFilter","setSortOrder","useAlertsFolderViewParams","alertRules","namespace","group","filteredRules","filterAndSortRules","hasNoResults","page","numberOfPages","onPageChange","pageItems","usePagination","FilterInput","Select","value","Icon","currentRule","Card","TagList","label","Pagination","AlertFolderViewParams","searchParams","setSearchParams","sortParam","useDebounce","originalRules","matchers","rules","rule","x","theme","match","navIndex","state","uid","pageNav","loading","useAsync","Page"],"sourceRoot":""}