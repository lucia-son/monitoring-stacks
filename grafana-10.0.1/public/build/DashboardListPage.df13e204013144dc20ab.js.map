{"version":3,"file":"DashboardListPage.df13e204013144dc20ab.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Select/SortPicker.tsx","webpack://grafana/./public/app/core/services/StateManagerBase.ts","webpack://grafana/./public/app/features/search/utils.ts","webpack://grafana/./public/app/features/search/state/SearchStateManager.ts","webpack://grafana/./public/app/features/search/tempI18nPhrases.ts","webpack://grafana/./public/app/features/browse-dashboards/state/hooks.ts","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/utils.ts","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/DeleteModal.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/MoveModal.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/BrowseActions.tsx","webpack://grafana/./public/app/features/search/page/components/ActionRow.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseFilters.tsx","webpack://grafana/./public/app/features/browse-dashboards/types.ts","webpack://grafana/./public/app/features/browse-dashboards/components/CheckboxCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/CheckboxHeaderCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/Indent.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/NameCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/TagsCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/TypeCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/customFlexTableLayout.ts","webpack://grafana/./public/app/features/browse-dashboards/components/DashboardsTree.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseView.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/CreateNewButton.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/SearchView.tsx","webpack://grafana/./public/app/features/browse-dashboards/permissions.ts","webpack://grafana/./public/app/features/browse-dashboards/BrowseDashboardsPage.tsx","webpack://grafana/./public/app/features/search/loaders.ts","webpack://grafana/./public/app/features/search/page/selection.ts","webpack://grafana/./public/app/features/search/components/SearchCheckbox.tsx","webpack://grafana/./public/app/features/search/components/SearchItem.tsx","webpack://grafana/./public/app/core/navigation/hooks.ts","webpack://grafana/./public/app/features/search/components/DashboardSearchModal.tsx","webpack://grafana/./public/app/features/search/components/SearchWrapper.tsx","webpack://grafana/./public/app/features/search/page/components/FolderSection.tsx","webpack://grafana/./public/app/features/search/page/components/ConfirmDeleteModal.tsx","webpack://grafana/./public/app/features/search/page/components/MoveToFolderModal.tsx","webpack://grafana/./public/app/features/search/page/components/ManageActions.tsx","webpack://grafana/./public/app/features/search/page/components/RootFolderView.tsx","webpack://grafana/./public/app/features/search/page/components/SearchResultsCards.tsx","webpack://grafana/./public/app/features/search/page/components/SearchView.tsx","webpack://grafana/./public/app/features/search/components/DashboardActions.tsx","webpack://grafana/./public/app/features/search/components/ManageDashboardsNew.tsx","webpack://grafana/./public/app/features/search/components/DashboardListPage.tsx","webpack://grafana/./public/app/features/search/page/reporting.ts"],"sourcesContent":["import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Icon, Select } from '@grafana/ui';\nimport { DEFAULT_SORT } from 'app/features/search/constants';\nimport { getGrafanaSearcher } from 'app/features/search/service';\n\nexport interface Props {\n  onChange: (sortValue: SelectableValue) => void;\n  value?: string;\n  placeholder?: string;\n  getSortOptions?: () => Promise<SelectableValue[]>;\n  filter?: string[];\n  isClearable?: boolean;\n}\n\nconst defaultSortOptionsGetter = (): Promise<SelectableValue[]> => {\n  return getGrafanaSearcher().getSortOptions();\n};\n\nexport function SortPicker({ onChange, value, placeholder, filter, getSortOptions, isClearable }: Props) {\n  // Using sync Select and manual options fetching here since we need to find the selected option by value\n  const options = useAsync<() => Promise<SelectableValue[]>>(async () => {\n    const vals = await (getSortOptions ?? defaultSortOptionsGetter)();\n    if (filter) {\n      return vals.filter((v) => filter.includes(v.value));\n    }\n    return vals;\n  }, [getSortOptions, filter]);\n\n  if (options.loading) {\n    return null;\n  }\n\n  const isDesc = Boolean(value?.includes('desc') || value?.startsWith('-')); // bluge syntax starts with \"-\"\n  return (\n    <Select\n      key={value}\n      width={28}\n      onChange={onChange}\n      value={options.value?.find((opt) => opt.value === value) ?? null}\n      options={options.value}\n      aria-label=\"Sort\"\n      placeholder={placeholder ?? `Sort (Default ${DEFAULT_SORT.label})`}\n      prefix={<Icon name={isDesc ? 'sort-amount-down' : 'sort-amount-up'} />}\n      isClearable={isClearable}\n    />\n  );\n}\n","import { useEffect } from 'react';\nimport { Observer, Subject, Subscription } from 'rxjs';\n\nimport { useForceUpdate } from '@grafana/ui';\n\nexport class StateManagerBase<TState> {\n  private _subject = new Subject<TState>();\n  private _state: TState;\n\n  constructor(state: TState) {\n    this._state = state;\n  }\n\n  useState() {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useLatestState(this);\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  setState(update: Partial<TState>) {\n    this._state = {\n      ...this._state,\n      ...update,\n    };\n    this._subject.next(this._state);\n  }\n\n  /**\n   * Subscribe to the scene state subject\n   **/\n  subscribeToState(observerOrNext?: Partial<Observer<TState>>): Subscription {\n    return this._subject.subscribe(observerOrNext);\n  }\n}\n/**\n * This hook is always returning model.state instead of a useState that remembers the last state emitted on the subject\n * The reason for this is so that if the model instance change this function will always return the latest state.\n */\nfunction useLatestState<TState>(model: StateManagerBase<TState>): TState {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    const s = model.subscribeToState({ next: forceUpdate });\n    return () => s.unsubscribe();\n  }, [model, forceUpdate]);\n\n  return model.state;\n}\n","import { UrlQueryMap } from '@grafana/data';\n\nimport { SECTION_STORAGE_KEY } from './constants';\nimport { SearchState } from './types';\n\n/**\n * Check if search query has filters enabled. Excludes folderId\n * @param query\n */\nexport const hasFilters = (query: SearchState) => {\n  if (!query) {\n    return false;\n  }\n  return Boolean(query.query || query.tag?.length > 0 || query.starred || query.sort);\n};\n\n/**\n * Get storage key for a dashboard folder by its title\n * @param title\n */\nexport const getSectionStorageKey = (title = 'General') => {\n  return `${SECTION_STORAGE_KEY}.${title.toLowerCase()}`;\n};\n\n/**\n * Remove undefined keys from url params object and format non-primitive values\n * @param params\n * @param folder\n */\nexport const parseRouteParams = (params: UrlQueryMap) => {\n  const cleanedParams = Object.entries(params).reduce<Partial<SearchState>>((obj, [key, val]) => {\n    if (!val) {\n      return obj;\n    } else if (key === 'tag' && !Array.isArray(val)) {\n      return { ...obj, tag: [val] as string[] };\n    }\n\n    return { ...obj, [key]: val };\n  }, {});\n\n  if (params.folder) {\n    const folderStr = `folder:${params.folder}`;\n    return {\n      ...cleanedParams,\n      query: `${folderStr} ${(cleanedParams.query ?? '').replace(folderStr, '')}`,\n    };\n  }\n\n  return { ...cleanedParams };\n};\n","import { debounce } from 'lodash';\nimport { FormEvent } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { TermCount } from 'app/core/components/TagFilter/TagFilter';\nimport { StateManagerBase } from 'app/core/services/StateManagerBase';\nimport store from 'app/core/store';\n\nimport { SEARCH_PANELS_LOCAL_STORAGE_KEY, SEARCH_SELECTED_LAYOUT, SEARCH_SELECTED_SORT } from '../constants';\nimport {\n  reportDashboardListViewed,\n  reportSearchFailedQueryInteraction,\n  reportSearchQueryInteraction,\n  reportSearchResultInteraction,\n} from '../page/reporting';\nimport { getGrafanaSearcher, SearchQuery } from '../service';\nimport { SearchLayout, SearchQueryParams, SearchState } from '../types';\nimport { parseRouteParams } from '../utils';\n\nexport const initialState: SearchState = {\n  query: '',\n  tag: [],\n  starred: false,\n  layout: SearchLayout.Folders,\n  sort: undefined,\n  prevSort: undefined,\n  eventTrackingNamespace: 'dashboard_search',\n};\n\nexport const defaultQueryParams: SearchQueryParams = {\n  sort: null,\n  starred: null,\n  query: null,\n  tag: null,\n  layout: null,\n};\n\nexport class SearchStateManager extends StateManagerBase<SearchState> {\n  updateLocation = debounce((query) => locationService.partial(query, true), 300);\n  doSearchWithDebounce = debounce(() => this.doSearch(), 300);\n  lastQuery?: SearchQuery;\n\n  lastSearchTimestamp = 0;\n\n  initStateFromUrl(folderUid?: string, doInitialSearch = true) {\n    const stateFromUrl = parseRouteParams(locationService.getSearchObject());\n\n    // Force list view when conditions are specified from the URL\n    if (stateFromUrl.query || stateFromUrl.datasource || stateFromUrl.panel_type) {\n      stateFromUrl.layout = SearchLayout.List;\n    }\n\n    stateManager.setState({\n      ...stateFromUrl,\n      folderUid: folderUid,\n      eventTrackingNamespace: folderUid ? 'manage_dashboards' : 'dashboard_search',\n    });\n\n    if (doInitialSearch) {\n      this.doSearch();\n    }\n  }\n\n  /**\n   * Updates internal and url state, then triggers a new search\n   */\n  setStateAndDoSearch(state: Partial<SearchState>) {\n    // Set internal state\n    this.setState(state);\n\n    // Update url state\n    this.updateLocation({\n      query: this.state.query.length === 0 ? null : this.state.query,\n      tag: this.state.tag,\n      datasource: this.state.datasource,\n      panel_type: this.state.panel_type,\n      starred: this.state.starred ? this.state.starred : null,\n      sort: this.state.sort,\n    });\n\n    // issue new search query\n    this.doSearchWithDebounce();\n  }\n\n  onCloseSearch = () => {\n    this.updateLocation({\n      search: null,\n      folder: null,\n      ...defaultQueryParams,\n    });\n  };\n\n  onClearSearchAndFilters = () => {\n    this.setStateAndDoSearch({\n      query: '',\n      datasource: undefined,\n      tag: [],\n      panel_type: undefined,\n      starred: undefined,\n      sort: undefined,\n    });\n  };\n\n  onQueryChange = (query: string) => {\n    this.setStateAndDoSearch({ query });\n  };\n\n  onRemoveTag = (tagToRemove: string) => {\n    this.setStateAndDoSearch({ tag: this.state.tag.filter((tag) => tag !== tagToRemove) });\n  };\n\n  onTagFilterChange = (tags: string[]) => {\n    this.setStateAndDoSearch({ tag: tags });\n  };\n\n  onAddTag = (newTag: string) => {\n    if (this.state.tag && this.state.tag.includes(newTag)) {\n      return;\n    }\n\n    this.setStateAndDoSearch({ tag: [...this.state.tag, newTag] });\n  };\n\n  onDatasourceChange = (datasource: string | undefined) => {\n    this.setStateAndDoSearch({ datasource });\n  };\n\n  onPanelTypeChange = (panel_type?: string) => {\n    this.setStateAndDoSearch({ panel_type });\n  };\n\n  onStarredFilterChange = (e: FormEvent<HTMLInputElement>) => {\n    const starred = e.currentTarget.checked;\n    this.setStateAndDoSearch({ starred });\n  };\n\n  onClearStarred = () => {\n    this.setStateAndDoSearch({ starred: false });\n  };\n\n  onSortChange = (sort: string | undefined) => {\n    if (sort) {\n      localStorage.setItem(SEARCH_SELECTED_SORT, sort);\n    } else {\n      localStorage.removeItem(SEARCH_SELECTED_SORT);\n    }\n\n    if (this.state.layout === SearchLayout.Folders) {\n      this.setStateAndDoSearch({ sort, layout: SearchLayout.List });\n    } else {\n      this.setStateAndDoSearch({ sort });\n    }\n  };\n\n  onLayoutChange = (layout: SearchLayout) => {\n    localStorage.setItem(SEARCH_SELECTED_LAYOUT, layout);\n\n    if (this.state.sort && layout === SearchLayout.Folders) {\n      this.setStateAndDoSearch({ layout, prevSort: this.state.sort, sort: undefined });\n    } else {\n      this.setStateAndDoSearch({ layout, sort: this.state.prevSort });\n    }\n  };\n\n  onSetIncludePanels = (includePanels: boolean) => {\n    this.setStateAndDoSearch({ includePanels });\n    store.set(SEARCH_PANELS_LOCAL_STORAGE_KEY, includePanels);\n  };\n\n  hasSearchFilters() {\n    return this.state.query || this.state.tag.length || this.state.starred || this.state.panel_type || this.state.sort;\n  }\n\n  getSearchQuery() {\n    const q: SearchQuery = {\n      query: this.state.query,\n      tags: this.state.tag,\n      ds_uid: this.state.datasource,\n      panel_type: this.state.panel_type,\n      location: this.state.folderUid, // This will scope all results to the prefix\n      sort: this.state.sort,\n      explain: this.state.explain,\n      withAllowedActions: this.state.explain, // allowedActions are currently not used for anything on the UI and added only in `explain` mode\n      starred: this.state.starred,\n    };\n\n    // Only dashboards have additional properties\n    if (q.sort?.length && !q.sort.includes('name')) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (!q.query?.length) {\n      q.query = '*';\n      if (!q.location) {\n        q.kind = ['dashboard', 'folder']; // skip panels\n      }\n    }\n\n    if (!this.state.includePanels && !q.kind) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (q.panel_type?.length) {\n      q.kind = ['panel'];\n    }\n\n    return q;\n  }\n\n  private doSearch() {\n    const trackingInfo = {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n    };\n\n    reportSearchQueryInteraction(this.state.eventTrackingNamespace, trackingInfo);\n\n    this.lastQuery = this.getSearchQuery();\n\n    this.setState({ loading: true });\n\n    const searcher = getGrafanaSearcher();\n\n    const searchTimestamp = Date.now();\n    const searchPromise = this.state.starred ? searcher.starred(this.lastQuery) : searcher.search(this.lastQuery);\n\n    searchPromise\n      .then((result) => {\n        // Only keep the results if it's was issued after the most recently resolved search.\n        // This prevents results showing out of order if first request is slower than later ones\n        if (searchTimestamp > this.lastSearchTimestamp) {\n          this.setState({ result, loading: false });\n          this.lastSearchTimestamp = searchTimestamp;\n        }\n      })\n      .catch((error) => {\n        reportSearchFailedQueryInteraction(this.state.eventTrackingNamespace, {\n          ...trackingInfo,\n          error: error?.message,\n        });\n        this.setState({ loading: false });\n      });\n  }\n\n  // This gets the possible tags from within the query results\n  getTagOptions = (): Promise<TermCount[]> => {\n    const query = this.lastQuery ?? {\n      kind: ['dashboard', 'folder'],\n      query: '*',\n    };\n    return getGrafanaSearcher().tags(query);\n  };\n\n  /**\n   * When item is selected clear some filters and report interaction\n   */\n  onSearchItemClicked = (e: React.MouseEvent<HTMLElement>) => {\n    reportSearchResultInteraction(this.state.eventTrackingNamespace, {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n    });\n  };\n\n  /**\n   * Caller should handle debounce\n   */\n  onReportSearchUsage = () => {\n    reportDashboardListViewed(this.state.eventTrackingNamespace, {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n    });\n  };\n}\n\nlet stateManager: SearchStateManager;\n\nexport function getSearchStateManager() {\n  if (!stateManager) {\n    const selectedLayout = localStorage.getItem(SEARCH_SELECTED_LAYOUT) as SearchLayout;\n    const layout = selectedLayout ?? initialState.layout;\n    const sort = localStorage.getItem(SEARCH_SELECTED_SORT) ?? undefined;\n\n    let includePanels = store.getBool(SEARCH_PANELS_LOCAL_STORAGE_KEY, true);\n    if (includePanels) {\n      includePanels = false;\n    }\n\n    stateManager = new SearchStateManager({ ...initialState, layout, sort, includePanels });\n  }\n\n  return stateManager;\n}\n\nexport function useSearchStateManager() {\n  const stateManager = getSearchStateManager();\n  const state = stateManager.useState();\n\n  return [state, stateManager] as const;\n}\n","// Temporary place to collect phrases we reuse between new and old browse/search\n// TODO: remove this when new Browse Dashboards UI is no longer feature flagged\n\nimport { t } from 'app/core/internationalization';\n\nexport function getSearchPlaceholder(includePanels = false) {\n  return includePanels\n    ? t('search.search-input.include-panels-placeholder', 'Search for dashboards, folders, and panels')\n    : t('search.search-input.placeholder', 'Search for dashboards and folders');\n}\n\nexport function getNewDashboardPhrase() {\n  return t('search.dashboard-actions.new-dashboard', 'New Dashboard');\n}\n\nexport function getNewFolderPhrase() {\n  return t('search.dashboard-actions.new-folder', 'New Folder');\n}\n\nexport function getImportPhrase() {\n  return t('search.dashboard-actions.import', 'Import');\n}\n\nexport function getNewPhrase() {\n  return t('search.dashboard-actions.new', 'New');\n}\n","import { createSelector } from 'reselect';\n\nimport { DashboardViewItem } from 'app/features/search/types';\nimport { useSelector, StoreState } from 'app/types';\n\nimport { DashboardsTreeItem, DashboardTreeSelection } from '../types';\n\nexport const rootItemsSelector = (wholeState: StoreState) => wholeState.browseDashboards.rootItems;\nexport const childrenByParentUIDSelector = (wholeState: StoreState) => wholeState.browseDashboards.childrenByParentUID;\nexport const openFoldersSelector = (wholeState: StoreState) => wholeState.browseDashboards.openFolders;\nexport const selectedItemsSelector = (wholeState: StoreState) => wholeState.browseDashboards.selectedItems;\n\nconst flatTreeSelector = createSelector(\n  rootItemsSelector,\n  childrenByParentUIDSelector,\n  openFoldersSelector,\n  (wholeState: StoreState, rootFolderUID: string | undefined) => rootFolderUID,\n  (rootItems, childrenByParentUID, openFolders, folderUID) => {\n    return createFlatTree(folderUID, rootItems ?? [], childrenByParentUID, openFolders);\n  }\n);\n\nconst hasSelectionSelector = createSelector(selectedItemsSelector, (selectedItems) => {\n  return Object.values(selectedItems).some((selectedItem) =>\n    Object.values(selectedItem).some((isSelected) => isSelected)\n  );\n});\n\n// Returns a DashboardTreeSelection but unselects any selected folder's children.\n// This is useful when making backend requests to move or delete items.\n// In this case, we only need to move/delete the parent folder and it will cascade to the children.\nconst selectedItemsForActionsSelector = createSelector(\n  selectedItemsSelector,\n  childrenByParentUIDSelector,\n  (selectedItems, childrenByParentUID) => {\n    // Take a copy of the selected items to work with\n    // We don't care about panels here, only dashboards and folders can be moved or deleted\n    const result: Omit<DashboardTreeSelection, 'panel' | '$all'> = {\n      dashboard: { ...selectedItems.dashboard },\n      folder: { ...selectedItems.folder },\n    };\n\n    // Loop over selected folders in the input\n    for (const folderUID of Object.keys(selectedItems.folder)) {\n      const isSelected = selectedItems.folder[folderUID];\n      if (isSelected) {\n        // Unselect any children in the output\n        const children = childrenByParentUID[folderUID];\n        if (children) {\n          for (const child of children) {\n            if (child.kind === 'dashboard') {\n              result.dashboard[child.uid] = false;\n            }\n            if (child.kind === 'folder') {\n              result.folder[child.uid] = false;\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n);\n\nexport function useBrowseLoadingStatus(folderUID: string | undefined): 'pending' | 'fulfilled' {\n  return useSelector((wholeState) => {\n    const children = folderUID\n      ? wholeState.browseDashboards.childrenByParentUID[folderUID]\n      : wholeState.browseDashboards.rootItems;\n\n    return children ? 'fulfilled' : 'pending';\n  });\n}\n\nexport function useFlatTreeState(folderUID: string | undefined) {\n  return useSelector((state) => flatTreeSelector(state, folderUID));\n}\n\nexport function useHasSelection() {\n  return useSelector((state) => hasSelectionSelector(state));\n}\n\nexport function useCheckboxSelectionState() {\n  return useSelector(selectedItemsSelector);\n}\n\nexport function useChildrenByParentUIDState() {\n  return useSelector((wholeState: StoreState) => wholeState.browseDashboards.childrenByParentUID);\n}\n\nexport function useActionSelectionState() {\n  return useSelector((state) => selectedItemsForActionsSelector(state));\n}\n\n/**\n * Creates a list of items, with level indicating it's 'nested' in the tree structure\n *\n * @param folderUID The UID of the folder being viewed, or undefined if at root Browse Dashboards page\n * @param rootItems Array of loaded items at the root level (without a parent). If viewing a folder, we expect this to be empty and unused\n * @param childrenByUID Arrays of children keyed by their parent UID\n * @param openFolders Object of UID to whether that item is expanded or not\n * @param level level of item in the tree. Only to be specified when called recursively.\n */\nfunction createFlatTree(\n  folderUID: string | undefined,\n  rootItems: DashboardViewItem[],\n  childrenByUID: Record<string, DashboardViewItem[] | undefined>,\n  openFolders: Record<string, boolean>,\n  level = 0\n): DashboardsTreeItem[] {\n  function mapItem(item: DashboardViewItem, parentUID: string | undefined, level: number): DashboardsTreeItem[] {\n    const mappedChildren = createFlatTree(item.uid, rootItems, childrenByUID, openFolders, level + 1);\n\n    const isOpen = Boolean(openFolders[item.uid]);\n    const emptyFolder = childrenByUID[item.uid]?.length === 0;\n    if (isOpen && emptyFolder) {\n      mappedChildren.push({\n        isOpen: false,\n        level: level + 1,\n        item: { kind: 'ui-empty-folder', uid: item.uid + '-empty-folder' },\n      });\n    }\n\n    const thisItem = {\n      item,\n      parentUID,\n      level,\n      isOpen,\n    };\n\n    return [thisItem, ...mappedChildren];\n  }\n\n  const isOpen = (folderUID && openFolders[folderUID]) || level === 0;\n\n  const items = folderUID\n    ? (isOpen && childrenByUID[folderUID]) || [] // keep seperate lines\n    : rootItems;\n\n  return items.flatMap((item) => mapItem(item, folderUID, level));\n}\n","export function buildBreakdownString(\n  folderCount: number,\n  dashboardCount: number,\n  libraryPanelCount: number,\n  alertRuleCount: number\n) {\n  const total = folderCount + dashboardCount + libraryPanelCount + alertRuleCount;\n  const parts = [];\n  if (folderCount) {\n    parts.push(`${folderCount} ${folderCount === 1 ? 'folder' : 'folders'}`);\n  }\n  if (dashboardCount) {\n    parts.push(`${dashboardCount} ${dashboardCount === 1 ? 'dashboard' : 'dashboards'}`);\n  }\n  if (libraryPanelCount) {\n    parts.push(`${libraryPanelCount} ${libraryPanelCount === 1 ? 'library panel' : 'library panels'}`);\n  }\n  if (alertRuleCount) {\n    parts.push(`${alertRuleCount} ${alertRuleCount === 1 ? 'alert rule' : 'alert rules'}`);\n  }\n  let breakdownString = `${total} ${total === 1 ? 'item' : 'items'}`;\n  if (parts.length > 0) {\n    breakdownString += `: ${parts.join(', ')}`;\n  }\n  return breakdownString;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, ConfirmModal, Spinner, useStyles2 } from '@grafana/ui';\n\nimport { useGetAffectedItemsQuery } from '../../api/browseDashboardsAPI';\nimport { DashboardTreeSelection } from '../../types';\n\nimport { buildBreakdownString } from './utils';\n\nexport interface Props {\n  isOpen: boolean;\n  onConfirm: () => void;\n  onDismiss: () => void;\n  selectedItems: DashboardTreeSelection;\n}\n\nexport const DeleteModal = ({ onConfirm, onDismiss, selectedItems, ...props }: Props) => {\n  const styles = useStyles2(getStyles);\n  const { data, isFetching, isLoading, error } = useGetAffectedItemsQuery(selectedItems);\n\n  const onDelete = () => {\n    onConfirm();\n    onDismiss();\n  };\n\n  return (\n    <ConfirmModal\n      body={\n        <div className={styles.modalBody}>\n          This action will delete the following content:\n          <div className={styles.breakdown}>\n            <>\n              {data && buildBreakdownString(data.folder, data.dashboard, data.libraryPanel, data.alertRule)}\n              {(isFetching || isLoading) && <Spinner size={12} />}\n              {error && <Alert severity=\"error\" title=\"Unable to retrieve descendant information\" />}\n            </>\n          </div>\n        </div>\n      }\n      confirmationText=\"Delete\"\n      confirmText=\"Delete\"\n      onDismiss={onDismiss}\n      onConfirm={onDelete}\n      title=\"Delete Compute Resources\"\n      {...props}\n    />\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  breakdown: css({\n    ...theme.typography.bodySmall,\n    color: theme.colors.text.secondary,\n    marginBottom: theme.spacing(2),\n  }),\n  modalBody: css({\n    ...theme.typography.body,\n  }),\n});\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Field, Modal, Spinner, useStyles2 } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\n\nimport { useGetAffectedItemsQuery } from '../../api/browseDashboardsAPI';\nimport { DashboardTreeSelection } from '../../types';\n\nimport { buildBreakdownString } from './utils';\n\nexport interface Props {\n  isOpen: boolean;\n  onConfirm: (targetFolderUid: string) => void;\n  onDismiss: () => void;\n  selectedItems: DashboardTreeSelection;\n}\n\nexport const MoveModal = ({ onConfirm, onDismiss, selectedItems, ...props }: Props) => {\n  const [moveTarget, setMoveTarget] = useState<string>();\n  const styles = useStyles2(getStyles);\n  const selectedFolders = Object.keys(selectedItems.folder).filter((uid) => selectedItems.folder[uid]);\n  const { data, isFetching, isLoading, error } = useGetAffectedItemsQuery(selectedItems);\n\n  const onMove = () => {\n    if (moveTarget !== undefined) {\n      onConfirm(moveTarget);\n    }\n    onDismiss();\n  };\n\n  return (\n    <Modal title=\"Move\" onDismiss={onDismiss} {...props}>\n      {selectedFolders.length > 0 && <Alert severity=\"warning\" title=\"Moving this item may change its permissions.\" />}\n      This action will move the following content:\n      <div className={styles.breakdown}>\n        <>\n          {data && buildBreakdownString(data.folder, data.dashboard, data.libraryPanel, data.alertRule)}\n          {(isFetching || isLoading) && <Spinner size={12} />}\n          {error && <Alert severity=\"error\" title=\"Unable to retrieve descendant information\" />}\n        </>\n      </div>\n      <Field label=\"Folder name\">\n        <FolderPicker allowEmpty onChange={({ uid }) => setMoveTarget(uid)} />\n      </Field>\n      <Modal.ButtonRow>\n        <Button onClick={onDismiss} variant=\"secondary\">\n          Cancel\n        </Button>\n        <Button disabled={moveTarget === undefined} onClick={onMove} variant=\"primary\">\n          Move\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  breakdown: css({\n    ...theme.typography.bodySmall,\n    color: theme.colors.text.secondary,\n    marginBottom: theme.spacing(2),\n  }),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { useSearchStateManager } from 'app/features/search/state/SearchStateManager';\nimport { useDispatch, useSelector } from 'app/types';\nimport { ShowModalReactEvent } from 'app/types/events';\n\nimport {\n  childrenByParentUIDSelector,\n  deleteDashboard,\n  deleteFolder,\n  fetchChildren,\n  moveDashboard,\n  moveFolder,\n  rootItemsSelector,\n  setAllSelection,\n  useActionSelectionState,\n} from '../../state';\nimport { findItem } from '../../state/utils';\n\nimport { DeleteModal } from './DeleteModal';\nimport { MoveModal } from './MoveModal';\n\nexport interface Props {}\n\nexport function BrowseActions() {\n  const styles = useStyles2(getStyles);\n  const selectedItems = useActionSelectionState();\n  const dispatch = useDispatch();\n  const selectedDashboards = Object.keys(selectedItems.dashboard).filter((uid) => selectedItems.dashboard[uid]);\n  const selectedFolders = Object.keys(selectedItems.folder).filter((uid) => selectedItems.folder[uid]);\n  const rootItems = useSelector(rootItemsSelector);\n  const childrenByParentUID = useSelector(childrenByParentUIDSelector);\n  const [, stateManager] = useSearchStateManager();\n  const isSearching = stateManager.hasSearchFilters();\n\n  const onActionComplete = (parentsToRefresh: Set<string | undefined>) => {\n    dispatch(setAllSelection({ isSelected: false, folderUID: undefined }));\n\n    if (isSearching) {\n      // Redo search query\n      stateManager.doSearchWithDebounce();\n    } else {\n      // Refetch parents\n      for (const parentUID of parentsToRefresh) {\n        dispatch(fetchChildren(parentUID));\n      }\n    }\n  };\n\n  const onDelete = async () => {\n    const parentsToRefresh = new Set<string | undefined>();\n\n    // Delete all the folders sequentially\n    // TODO error handling here\n    for (const folderUID of selectedFolders) {\n      await dispatch(deleteFolder(folderUID));\n      // find the parent folder uid and add it to parentsToRefresh\n      const folder = findItem(rootItems ?? [], childrenByParentUID, folderUID);\n      parentsToRefresh.add(folder?.parentUID);\n    }\n\n    // Delete all the dashboards sequentially\n    // TODO error handling here\n    for (const dashboardUID of selectedDashboards) {\n      await dispatch(deleteDashboard(dashboardUID));\n      // find the parent folder uid and add it to parentsToRefresh\n      const dashboard = findItem(rootItems ?? [], childrenByParentUID, dashboardUID);\n      parentsToRefresh.add(dashboard?.parentUID);\n    }\n    onActionComplete(parentsToRefresh);\n  };\n\n  const onMove = async (destinationUID: string) => {\n    const parentsToRefresh = new Set<string | undefined>();\n    parentsToRefresh.add(destinationUID);\n\n    // Move all the folders sequentially\n    // TODO error handling here\n    for (const folderUID of selectedFolders) {\n      await dispatch(moveFolder({ folderUID, destinationUID }));\n      // find the parent folder uid and add it to parentsToRefresh\n      const folder = findItem(rootItems ?? [], childrenByParentUID, folderUID);\n      parentsToRefresh.add(folder?.parentUID);\n    }\n\n    // Move all the dashboards sequentially\n    // TODO error handling here\n    for (const dashboardUID of selectedDashboards) {\n      await dispatch(moveDashboard({ dashboardUID, destinationUID }));\n      // find the parent folder uid and add it to parentsToRefresh\n      const dashboard = findItem(rootItems ?? [], childrenByParentUID, dashboardUID);\n      parentsToRefresh.add(dashboard?.parentUID);\n    }\n    onActionComplete(parentsToRefresh);\n  };\n\n  const showMoveModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: MoveModal,\n        props: {\n          selectedItems,\n          onConfirm: onMove,\n        },\n      })\n    );\n  };\n\n  const showDeleteModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: DeleteModal,\n        props: {\n          selectedItems,\n          onConfirm: onDelete,\n        },\n      })\n    );\n  };\n\n  return (\n    <div className={styles.row} data-testid=\"manage-actions\">\n      <Button onClick={showMoveModal} variant=\"secondary\">\n        Move\n      </Button>\n      <Button onClick={showDeleteModal} variant=\"destructive\">\n        Delete\n      </Button>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css({\n    display: 'flex',\n    flexDirection: 'row',\n    gap: theme.spacing(1),\n    marginBottom: theme.spacing(2),\n  }),\n});\n","import { css } from '@emotion/css';\nimport React, { FormEvent } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Checkbox, HorizontalGroup, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { SortPicker } from 'app/core/components/Select/SortPicker';\nimport { TagFilter, TermCount } from 'app/core/components/TagFilter/TagFilter';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { SearchLayout, SearchState } from '../../types';\n\nfunction getLayoutOptions() {\n  return [\n    { value: SearchLayout.Folders, icon: 'folder', ariaLabel: t('search.actions.view-as-folders', 'View by folders') },\n    { value: SearchLayout.List, icon: 'list-ul', ariaLabel: t('search.actions.view-as-list', 'View as list') },\n  ];\n}\n\ninterface Props {\n  onLayoutChange: (layout: SearchLayout) => void;\n  onSortChange: (value?: string) => void;\n  onStarredFilterChange?: (event: FormEvent<HTMLInputElement>) => void;\n  onTagFilterChange: (tags: string[]) => void;\n  getTagOptions: () => Promise<TermCount[]>;\n  getSortOptions: () => Promise<SelectableValue[]>;\n  sortPlaceholder?: string;\n  onDatasourceChange: (ds?: string) => void;\n  onPanelTypeChange: (pt?: string) => void;\n  includePanels: boolean;\n  onSetIncludePanels: (v: boolean) => void;\n  state: SearchState;\n  showStarredFilter?: boolean;\n  hideLayout?: boolean;\n}\n\nexport function getValidQueryLayout(q: SearchState): SearchLayout {\n  const layout = q.layout ?? SearchLayout.Folders;\n\n  // Folders is not valid when a query exists\n  if (layout === SearchLayout.Folders) {\n    if (q.query || q.sort || q.starred || q.tag.length > 0) {\n      return SearchLayout.List;\n    }\n  }\n\n  return layout;\n}\n\nexport const ActionRow = ({\n  onLayoutChange,\n  onSortChange,\n  onStarredFilterChange = () => {},\n  onTagFilterChange,\n  getTagOptions,\n  getSortOptions,\n  sortPlaceholder,\n  onDatasourceChange,\n  onPanelTypeChange,\n  onSetIncludePanels,\n  state,\n  showStarredFilter,\n  hideLayout,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n  const layout = getValidQueryLayout(state);\n\n  // Disabled folder layout option when query is present\n  const disabledOptions = state.query || state.datasource || state.panel_type ? [SearchLayout.Folders] : [];\n\n  return (\n    <div className={styles.actionRow}>\n      <HorizontalGroup spacing=\"md\" width=\"auto\">\n        <TagFilter isClearable={false} tags={state.tag} tagOptions={getTagOptions} onChange={onTagFilterChange} />\n        {config.featureToggles.panelTitleSearch && (\n          <Checkbox\n            data-testid=\"include-panels\"\n            disabled={layout === SearchLayout.Folders}\n            value={state.includePanels}\n            onChange={() => onSetIncludePanels(!state.includePanels)}\n            label={t('search.actions.include-panels', 'Include panels')}\n          />\n        )}\n\n        {showStarredFilter && (\n          <div className={styles.checkboxWrapper}>\n            <Checkbox\n              label={t('search.actions.starred', 'Starred')}\n              onChange={onStarredFilterChange}\n              value={state.starred}\n            />\n          </div>\n        )}\n        {state.datasource && (\n          <Button icon=\"times\" variant=\"secondary\" onClick={() => onDatasourceChange(undefined)}>\n            <Trans i18nKey=\"search.actions.remove-datasource-filter\">\n              Datasource: {{ datasource: state.datasource }}\n            </Trans>\n          </Button>\n        )}\n        {state.panel_type && (\n          <Button icon=\"times\" variant=\"secondary\" onClick={() => onPanelTypeChange(undefined)}>\n            Panel: {state.panel_type}\n          </Button>\n        )}\n      </HorizontalGroup>\n\n      <HorizontalGroup spacing=\"md\" width=\"auto\">\n        {!hideLayout && (\n          <RadioButtonGroup\n            options={getLayoutOptions()}\n            disabledOptions={disabledOptions}\n            onChange={onLayoutChange}\n            value={layout}\n          />\n        )}\n        <SortPicker\n          onChange={(change) => onSortChange(change?.value)}\n          value={state.sort}\n          getSortOptions={getSortOptions}\n          placeholder={sortPlaceholder || t('search.actions.sort-placeholder', 'Sort')}\n          isClearable\n        />\n      </HorizontalGroup>\n    </div>\n  );\n};\n\nActionRow.displayName = 'ActionRow';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    actionRow: css`\n      display: none;\n\n      ${theme.breakpoints.up('md')} {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding-bottom: ${theme.spacing(2)};\n        width: 100%;\n      }\n    `,\n    checkboxWrapper: css`\n      label {\n        line-height: 1.2;\n      }\n    `,\n  };\n};\n","import React from 'react';\n\nimport { ActionRow } from 'app/features/search/page/components/ActionRow';\nimport { getGrafanaSearcher } from 'app/features/search/service';\nimport { useSearchStateManager } from 'app/features/search/state/SearchStateManager';\n\nexport function BrowseFilters() {\n  const [searchState, stateManager] = useSearchStateManager();\n\n  return (\n    <div>\n      <ActionRow\n        hideLayout\n        showStarredFilter\n        state={searchState}\n        getTagOptions={stateManager.getTagOptions}\n        getSortOptions={getGrafanaSearcher().getSortOptions}\n        sortPlaceholder={getGrafanaSearcher().sortPlaceholder}\n        includePanels={searchState.includePanels ?? false}\n        onLayoutChange={stateManager.onLayoutChange}\n        onStarredFilterChange={stateManager.onStarredFilterChange}\n        onSortChange={stateManager.onSortChange}\n        onTagFilterChange={stateManager.onTagFilterChange}\n        onDatasourceChange={stateManager.onDatasourceChange}\n        onPanelTypeChange={stateManager.onPanelTypeChange}\n        onSetIncludePanels={stateManager.onSetIncludePanels}\n      />\n    </div>\n  );\n}\n","import { CellProps, Column, HeaderProps } from 'react-table';\n\nimport { DashboardViewItem as DashboardViewItem, DashboardViewItemKind } from 'app/features/search/types';\n\nexport type DashboardTreeSelection = Record<DashboardViewItemKind, Record<string, boolean | undefined>> & {\n  $all: boolean;\n};\n\nexport interface BrowseDashboardsState {\n  rootItems: DashboardViewItem[] | undefined;\n  childrenByParentUID: Record<string, DashboardViewItem[] | undefined>;\n  selectedItems: DashboardTreeSelection;\n\n  // Only folders can ever be open or closed, so no need to seperate this by kind\n  openFolders: Record<string, boolean>;\n}\n\nexport interface UIDashboardViewItem {\n  kind: 'ui-empty-folder';\n  uid: string;\n}\n\ntype DashboardViewItemWithUIItems = DashboardViewItem | UIDashboardViewItem;\n\nexport interface DashboardsTreeItem<T extends DashboardViewItemWithUIItems = DashboardViewItemWithUIItems> {\n  item: T;\n  level: number;\n  isOpen: boolean;\n}\n\nexport const INDENT_AMOUNT_CSS_VAR = '--dashboards-tree-indentation';\n\ninterface RendererUserProps {\n  // Note: userProps for cell renderers (e.g. second argument in `cell.render('Cell', foo)` )\n  // aren't typed, so we must be careful when accessing this\n  isSelected?: (kind: DashboardViewItem | '$all') => SelectionState;\n  onAllSelectionChange?: (newState: boolean) => void;\n  onItemSelectionChange?: (item: DashboardViewItem, newState: boolean) => void;\n}\n\nexport type DashboardsTreeColumn = Column<DashboardsTreeItem>;\nexport type DashboardsTreeCellProps = CellProps<DashboardsTreeItem, unknown> & RendererUserProps;\nexport type DashboardTreeHeaderProps = HeaderProps<DashboardsTreeItem> & RendererUserProps;\n\nexport enum SelectionState {\n  Unselected,\n  Selected,\n  Mixed,\n}\n","import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Checkbox } from '@grafana/ui';\n\nimport { DashboardsTreeCellProps, SelectionState } from '../types';\n\nexport default function CheckboxCell({\n  row: { original: row },\n  isSelected,\n  onItemSelectionChange,\n}: DashboardsTreeCellProps) {\n  const item = row.item;\n\n  if (item.kind === 'ui-empty-folder' || !isSelected) {\n    return null;\n  }\n\n  const state = isSelected(item);\n\n  return (\n    <Checkbox\n      data-testid={selectors.pages.BrowseDashbards.table.checkbox(item.uid)}\n      value={state === SelectionState.Selected}\n      indeterminate={state === SelectionState.Mixed}\n      onChange={(ev) => onItemSelectionChange?.(item, ev.currentTarget.checked)}\n    />\n  );\n}\n","import React from 'react';\n\nimport { Checkbox } from '@grafana/ui';\n\nimport { DashboardTreeHeaderProps, SelectionState } from '../types';\n\nexport default function CheckboxHeaderCell({ isSelected, onAllSelectionChange }: DashboardTreeHeaderProps) {\n  const state = isSelected?.('$all') ?? SelectionState.Unselected;\n\n  return (\n    <Checkbox\n      value={state === SelectionState.Selected}\n      indeterminate={state === SelectionState.Mixed}\n      onChange={(ev) => onAllSelectionChange?.(ev.currentTarget.checked)}\n    />\n  );\n}\n","import React from 'react';\n\nimport { useTheme2 } from '@grafana/ui';\n\nimport { INDENT_AMOUNT_CSS_VAR } from '../types';\n\ninterface IndentProps {\n  children?: React.ReactNode;\n  level: number;\n}\n\nexport function Indent({ children, level }: IndentProps) {\n  const theme = useTheme2();\n\n  // DashboardsTree responsively sets the value of INDENT_AMOUNT_CSS_VAR\n  // but we also have a fallback just in case it's not set for some reason...\n  const space = `var(${INDENT_AMOUNT_CSS_VAR}, ${theme.spacing(2)})`;\n\n  return <span style={{ paddingLeft: `calc(${space} * ${level})` }}>{children}</span>;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { CellProps } from 'react-table';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, Link, useStyles2 } from '@grafana/ui';\nimport { getSvgSize } from '@grafana/ui/src/components/Icon/utils';\n\nimport { DashboardsTreeItem } from '../types';\n\nimport { Indent } from './Indent';\n\ntype NameCellProps = CellProps<DashboardsTreeItem, unknown> & {\n  onFolderClick: (uid: string, newOpenState: boolean) => void;\n};\n\nexport function NameCell({ row: { original: data }, onFolderClick }: NameCellProps) {\n  const styles = useStyles2(getStyles);\n  const { item, level, isOpen } = data;\n\n  if (item.kind === 'ui-empty-folder') {\n    return (\n      <>\n        <Indent level={level} />\n        <span className={styles.folderButtonSpacer} />\n        <em>Empty folder</em>\n      </>\n    );\n  }\n\n  const chevronIcon = isOpen ? 'angle-down' : 'angle-right';\n\n  return (\n    <>\n      <Indent level={level} />\n\n      {item.kind === 'folder' ? (\n        <IconButton\n          size=\"md\"\n          onClick={() => onFolderClick(item.uid, !isOpen)}\n          name={chevronIcon}\n          ariaLabel={isOpen ? 'Collapse folder' : 'Expand folder'}\n        />\n      ) : (\n        <span className={styles.folderButtonSpacer} />\n      )}\n\n      {item.url ? (\n        <Link href={item.url} className={styles.link}>\n          {item.title}\n        </Link>\n      ) : (\n        item.title\n      )}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    // Should be the same size as the <IconButton /> so Dashboard name is aligned to Folder name siblings\n    folderButtonSpacer: css({\n      paddingLeft: `calc(${getSvgSize('md')}px + ${theme.spacing(0.5)})`,\n    }),\n    link: css({\n      '&:hover': {\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { CellProps } from 'react-table';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { TagList, useStyles2 } from '@grafana/ui';\n\nimport { DashboardsTreeItem } from '../types';\n\nexport function TagsCell({ row: { original: data } }: CellProps<DashboardsTreeItem, unknown>) {\n  const styles = useStyles2(getStyles);\n  const item = data.item;\n  if (item.kind === 'ui-empty-folder' || !item.tags) {\n    return null;\n  }\n\n  return <TagList className={styles.tagList} tags={item.tags} />;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    // TagList is annoying and has weird default alignment\n    tagList: css({\n      justifyContent: 'flex-start',\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { CellProps } from 'react-table';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport { getIconForKind } from 'app/features/search/service/utils';\n\nimport { DashboardsTreeItem } from '../types';\n\nexport function TypeCell({ row: { original: data } }: CellProps<DashboardsTreeItem, unknown>) {\n  const styles = useStyles2(getStyles);\n  const iconName = getIconForKind(data.item.kind);\n\n  switch (data.item.kind) {\n    case 'dashboard':\n      return (\n        <span className={styles.text}>\n          <Icon name={iconName} /> Dashboard\n        </span>\n      );\n    case 'folder':\n      return (\n        <span className={styles.text}>\n          <Icon name={iconName} /> Folder\n        </span>\n      );\n    case 'panel':\n      return (\n        <span className={styles.text}>\n          <Icon name={iconName} /> Panel\n        </span>\n      );\n    default:\n      return null;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    text: css({\n      color: theme.colors.text.secondary,\n    }),\n  };\n}\n","import { Hooks, UseTableColumnProps } from 'react-table';\n\n/**\n * Simplified flex layout module for react-table.\n * Uses the width of the column as the flex grow amount - the ratio of width between all columns\n *\n * Width of 0 for 'auto' width - useful for columns of fixed with that should shrink to the size\n * of content\n *\n * Originally based on https://github.com/TanStack/table/blob/v7/src/plugin-hooks/useFlexLayout.js\n */\nexport function useCustomFlexLayout<D extends object>(hooks: Hooks<D>) {\n  hooks.getRowProps.push((props) => [props, getRowStyles()]);\n  hooks.getHeaderGroupProps.push((props) => [props, getRowStyles()]);\n  hooks.getFooterGroupProps.push((props) => [props, getRowStyles()]);\n  hooks.getHeaderProps.push((props, { column }) => [props, getColumnStyleProps(column)]);\n  hooks.getCellProps.push((props, { cell }) => [props, getColumnStyleProps(cell.column)]);\n  hooks.getFooterProps.push((props, { column }) => [props, getColumnStyleProps(column)]);\n}\n\nuseCustomFlexLayout.pluginName = 'useCustomFlexLayout';\n\nfunction getColumnStyleProps<D extends object>(column: UseTableColumnProps<D>) {\n  return {\n    style: {\n      flex:\n        column.totalWidth === 0\n          ? // if width: 0, prevent the column from growing (or shrinking), and set basis to auto to\n            // fit column to the width of its content\n            '0 0 auto'\n          : // Otherwise, grow the content to a size in proportion to the other column widths\n            `${column.totalWidth} 0 0`,\n    },\n  };\n}\n\nfunction getRowStyles() {\n  return {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n    },\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { TableInstance, useTable } from 'react-table';\nimport { FixedSizeList as List } from 'react-window';\n\nimport { GrafanaTheme2, isTruthy } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useStyles2 } from '@grafana/ui';\nimport { DashboardViewItem } from 'app/features/search/types';\n\nimport {\n  DashboardsTreeCellProps,\n  DashboardsTreeColumn,\n  DashboardsTreeItem,\n  INDENT_AMOUNT_CSS_VAR,\n  SelectionState,\n} from '../types';\n\nimport CheckboxCell from './CheckboxCell';\nimport CheckboxHeaderCell from './CheckboxHeaderCell';\nimport { NameCell } from './NameCell';\nimport { TagsCell } from './TagsCell';\nimport { TypeCell } from './TypeCell';\nimport { useCustomFlexLayout } from './customFlexTableLayout';\n\ninterface DashboardsTreeProps {\n  items: DashboardsTreeItem[];\n  width: number;\n  height: number;\n  isSelected: (kind: DashboardViewItem | '$all') => SelectionState;\n  onFolderClick: (uid: string, newOpenState: boolean) => void;\n  onAllSelectionChange: (newState: boolean) => void;\n  onItemSelectionChange: (item: DashboardViewItem, newState: boolean) => void;\n  canSelect: boolean;\n}\n\nconst HEADER_HEIGHT = 35;\nconst ROW_HEIGHT = 35;\n\nexport function DashboardsTree({\n  items,\n  width,\n  height,\n  isSelected,\n  onFolderClick,\n  onAllSelectionChange,\n  onItemSelectionChange,\n  canSelect = false,\n}: DashboardsTreeProps) {\n  const styles = useStyles2(getStyles);\n\n  const tableColumns = useMemo(() => {\n    const checkboxColumn: DashboardsTreeColumn = {\n      id: 'checkbox',\n      width: 0,\n      Header: CheckboxHeaderCell,\n      Cell: CheckboxCell,\n    };\n\n    const nameColumn: DashboardsTreeColumn = {\n      id: 'name',\n      width: 3,\n      Header: <span style={{ paddingLeft: 20 }}>Name</span>,\n      Cell: (props: DashboardsTreeCellProps) => <NameCell {...props} onFolderClick={onFolderClick} />,\n    };\n\n    const typeColumn: DashboardsTreeColumn = {\n      id: 'type',\n      width: 1,\n      Header: 'Type',\n      Cell: TypeCell,\n    };\n\n    const tagsColumns: DashboardsTreeColumn = {\n      id: 'tags',\n      width: 2,\n      Header: 'Tags',\n      Cell: TagsCell,\n    };\n    const columns = [canSelect && checkboxColumn, nameColumn, typeColumn, tagsColumns].filter(isTruthy);\n\n    return columns;\n  }, [onFolderClick, canSelect]);\n\n  const table = useTable({ columns: tableColumns, data: items }, useCustomFlexLayout);\n  const { getTableProps, getTableBodyProps, headerGroups } = table;\n\n  const virtualData = useMemo(\n    () => ({\n      table,\n      isSelected,\n      onAllSelectionChange,\n      onItemSelectionChange,\n    }),\n    // we need this to rerender if items changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [table, isSelected, onAllSelectionChange, onItemSelectionChange, items]\n  );\n\n  return (\n    <div {...getTableProps()} className={styles.tableRoot} role=\"table\">\n      {headerGroups.map((headerGroup) => {\n        const { key, ...headerGroupProps } = headerGroup.getHeaderGroupProps({\n          style: { width },\n        });\n\n        return (\n          <div key={key} {...headerGroupProps} className={cx(styles.row, styles.headerRow)}>\n            {headerGroup.headers.map((column) => {\n              const { key, ...headerProps } = column.getHeaderProps();\n\n              return (\n                <div key={key} {...headerProps} role=\"columnheader\" className={styles.cell}>\n                  {column.render('Header', { isSelected, onAllSelectionChange })}\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n\n      <div {...getTableBodyProps()}>\n        <List\n          height={height - HEADER_HEIGHT}\n          width={width}\n          itemCount={items.length}\n          itemData={virtualData}\n          itemSize={ROW_HEIGHT}\n        >\n          {VirtualListRow}\n        </List>\n      </div>\n    </div>\n  );\n}\n\ninterface VirtualListRowProps {\n  index: number;\n  style: React.CSSProperties;\n  data: {\n    table: TableInstance<DashboardsTreeItem>;\n    isSelected: DashboardsTreeCellProps['isSelected'];\n    onAllSelectionChange: DashboardsTreeCellProps['onAllSelectionChange'];\n    onItemSelectionChange: DashboardsTreeCellProps['onItemSelectionChange'];\n  };\n}\n\nfunction VirtualListRow({ index, style, data }: VirtualListRowProps) {\n  const styles = useStyles2(getStyles);\n  const { table, isSelected, onItemSelectionChange } = data;\n  const { rows, prepareRow } = table;\n\n  const row = rows[index];\n  prepareRow(row);\n\n  return (\n    <div\n      {...row.getRowProps({ style })}\n      className={cx(styles.row, styles.bodyRow)}\n      data-testid={selectors.pages.BrowseDashbards.table.row(row.original.item.uid)}\n    >\n      {row.cells.map((cell) => {\n        const { key, ...cellProps } = cell.getCellProps();\n\n        return (\n          <div key={key} {...cellProps} className={styles.cell}>\n            {cell.render('Cell', { isSelected, onItemSelectionChange })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    tableRoot: css({\n      // Responsively\n      [INDENT_AMOUNT_CSS_VAR]: theme.spacing(1),\n\n      [theme.breakpoints.up('md')]: {\n        [INDENT_AMOUNT_CSS_VAR]: theme.spacing(3),\n      },\n    }),\n\n    // Column flex properties (cell sizing) are set by customFlexTableLayout.ts\n\n    row: css({\n      gap: theme.spacing(1),\n    }),\n\n    headerRow: css({\n      backgroundColor: theme.colors.background.secondary,\n      height: HEADER_HEIGHT,\n    }),\n\n    bodyRow: css({\n      height: ROW_HEIGHT,\n\n      '&:hover': {\n        backgroundColor: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n\n    cell: css({\n      padding: theme.spacing(1),\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n    }),\n\n    link: css({\n      '&:hover': {\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import React, { useCallback, useEffect } from 'react';\n\nimport { Spinner } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { DashboardViewItem } from 'app/features/search/types';\nimport { useDispatch } from 'app/types';\n\nimport {\n  useFlatTreeState,\n  useCheckboxSelectionState,\n  fetchChildren,\n  setFolderOpenState,\n  setItemSelectionState,\n  useChildrenByParentUIDState,\n  setAllSelection,\n  useBrowseLoadingStatus,\n} from '../state';\nimport { DashboardTreeSelection, SelectionState } from '../types';\n\nimport { DashboardsTree } from './DashboardsTree';\n\ninterface BrowseViewProps {\n  height: number;\n  width: number;\n  folderUID: string | undefined;\n  canSelect: boolean;\n}\n\nexport function BrowseView({ folderUID, width, height, canSelect }: BrowseViewProps) {\n  const status = useBrowseLoadingStatus(folderUID);\n  const dispatch = useDispatch();\n  const flatTree = useFlatTreeState(folderUID);\n  const selectedItems = useCheckboxSelectionState();\n  const childrenByParentUID = useChildrenByParentUIDState();\n\n  const handleFolderClick = useCallback(\n    (clickedFolderUID: string, isOpen: boolean) => {\n      dispatch(setFolderOpenState({ folderUID: clickedFolderUID, isOpen }));\n\n      if (isOpen) {\n        dispatch(fetchChildren(clickedFolderUID));\n      }\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    dispatch(fetchChildren(folderUID));\n  }, [handleFolderClick, dispatch, folderUID]);\n\n  const handleItemSelectionChange = useCallback(\n    (item: DashboardViewItem, isSelected: boolean) => {\n      dispatch(setItemSelectionState({ item, isSelected }));\n    },\n    [dispatch]\n  );\n\n  const isSelected = useCallback(\n    (item: DashboardViewItem | '$all'): SelectionState => {\n      if (item === '$all') {\n        // We keep the boolean $all state up to date in redux, so we can short-circut\n        // the logic if we know this has been selected\n        if (selectedItems.$all) {\n          return SelectionState.Selected;\n        }\n\n        // Otherwise, if we have any selected items, then it should be in 'mixed' state\n        for (const selection of Object.values(selectedItems)) {\n          if (typeof selection === 'boolean') {\n            continue;\n          }\n\n          for (const uid in selection) {\n            const isSelected = selection[uid];\n            if (isSelected) {\n              return SelectionState.Mixed;\n            }\n          }\n        }\n\n        // Otherwise otherwise, nothing is selected and header should be unselected\n        return SelectionState.Unselected;\n      }\n\n      const isSelected = selectedItems[item.kind][item.uid];\n      if (isSelected) {\n        return SelectionState.Selected;\n      }\n\n      // Because if _all_ children, then the parent is selected (and bailed in the previous check),\n      // this .some check will only return true if the children are partially selected\n      const isMixed = hasSelectedDescendants(item, childrenByParentUID, selectedItems);\n      if (isMixed) {\n        return SelectionState.Mixed;\n      }\n\n      return SelectionState.Unselected;\n    },\n    [selectedItems, childrenByParentUID]\n  );\n\n  if (status === 'pending') {\n    return <Spinner />;\n  }\n\n  if (status === 'fulfilled' && flatTree.length === 0) {\n    return (\n      <div style={{ width }}>\n        <EmptyListCTA\n          title={folderUID ? \"This folder doesn't have any dashboards yet\" : 'No dashboards yet. Create your first!'}\n          buttonIcon=\"plus\"\n          buttonTitle=\"Create Dashboard\"\n          buttonLink={folderUID ? `dashboard/new?folderUid=${folderUID}` : 'dashboard/new'}\n          proTip={folderUID && 'Add/move dashboards to your folder at ->'}\n          proTipLink={folderUID && 'dashboards'}\n          proTipLinkTitle={folderUID && 'Browse dashboards'}\n          proTipTarget=\"\"\n        />\n      </div>\n    );\n  }\n\n  return (\n    <DashboardsTree\n      canSelect={canSelect}\n      items={flatTree}\n      width={width}\n      height={height}\n      isSelected={isSelected}\n      onFolderClick={handleFolderClick}\n      onAllSelectionChange={(newState) => dispatch(setAllSelection({ isSelected: newState, folderUID }))}\n      onItemSelectionChange={handleItemSelectionChange}\n    />\n  );\n}\n\nfunction hasSelectedDescendants(\n  item: DashboardViewItem,\n  childrenByParentUID: Record<string, DashboardViewItem[] | undefined>,\n  selectedItems: DashboardTreeSelection\n): boolean {\n  const children = childrenByParentUID[item.uid];\n  if (!children) {\n    return false;\n  }\n\n  return children.some((v) => {\n    const thisIsSelected = selectedItems[v.kind][v.uid];\n    if (thisIsSelected) {\n      return thisIsSelected;\n    }\n\n    return hasSelectedDescendants(v, childrenByParentUID, selectedItems);\n  });\n}\n","import React from 'react';\n\nimport { Button, Dropdown, Icon, Menu, MenuItem } from '@grafana/ui';\nimport {\n  getNewDashboardPhrase,\n  getNewFolderPhrase,\n  getImportPhrase,\n  getNewPhrase,\n} from 'app/features/search/tempI18nPhrases';\n\ninterface Props {\n  /**\n   * Pass a folder UID in which the dashboard or folder will be created\n   */\n  inFolder?: string;\n  canCreateFolder: boolean;\n  canCreateDashboard: boolean;\n}\n\nexport function CreateNewButton({ inFolder, canCreateDashboard, canCreateFolder }: Props) {\n  const newMenu = (\n    <Menu>\n      {canCreateDashboard && (\n        <MenuItem url={addFolderUidToUrl('/dashboard/new', inFolder)} label={getNewDashboardPhrase()} />\n      )}\n      {canCreateFolder && (\n        <MenuItem url={addFolderUidToUrl('/dashboards/folder/new', inFolder)} label={getNewFolderPhrase()} />\n      )}\n      {canCreateDashboard && (\n        <MenuItem url={addFolderUidToUrl('/dashboard/import', inFolder)} label={getImportPhrase()} />\n      )}\n    </Menu>\n  );\n\n  return (\n    <Dropdown overlay={newMenu}>\n      <Button>\n        {getNewPhrase()}\n        <Icon name=\"angle-down\" />\n      </Button>\n    </Dropdown>\n  );\n}\n\n/**\n *\n * @param url without any parameters\n * @param folderUid  folder id\n * @returns url with paramter if folder is present\n */\nfunction addFolderUidToUrl(url: string, folderUid: string | undefined) {\n  return folderUid ? url + '?folderUid=' + folderUid : url;\n}\n","import React, { useCallback } from 'react';\n\nimport { Button, Card, Spinner } from '@grafana/ui';\nimport { useKeyNavigationListener } from 'app/features/search/hooks/useSearchKeyboardSelection';\nimport { SearchResultsProps, SearchResultsTable } from 'app/features/search/page/components/SearchResultsTable';\nimport { useSearchStateManager } from 'app/features/search/state/SearchStateManager';\nimport { DashboardViewItemKind } from 'app/features/search/types';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { setAllSelection, setItemSelectionState, useHasSelection } from '../state';\n\ninterface SearchViewProps {\n  height: number;\n  width: number;\n  canSelect: boolean;\n}\n\nexport function SearchView({ width, height, canSelect }: SearchViewProps) {\n  const dispatch = useDispatch();\n  const selectedItems = useSelector((wholeState) => wholeState.browseDashboards.selectedItems);\n  const hasSelection = useHasSelection();\n\n  const { keyboardEvents } = useKeyNavigationListener();\n  const [searchState, stateManager] = useSearchStateManager();\n\n  const value = searchState.result;\n\n  const selectionChecker = useCallback(\n    (kind: string | undefined, uid: string): boolean => {\n      if (!kind) {\n        return false;\n      }\n\n      // Currently, this indicates _some_ items are selected, not nessicarily all are\n      // selected.\n      if (kind === '*' && uid === '*') {\n        return hasSelection;\n      } else if (kind === '*') {\n        // Unsure how this case can happen\n        return false;\n      }\n\n      return selectedItems[assertDashboardViewItemKind(kind)][uid] ?? false;\n    },\n    [selectedItems, hasSelection]\n  );\n\n  const clearSelection = useCallback(() => {\n    dispatch(setAllSelection({ isSelected: false, folderUID: undefined }));\n  }, [dispatch]);\n\n  const handleItemSelectionChange = useCallback(\n    (kind: string, uid: string) => {\n      const newIsSelected = !selectionChecker(kind, uid);\n\n      dispatch(\n        setItemSelectionState({ item: { kind: assertDashboardViewItemKind(kind), uid }, isSelected: newIsSelected })\n      );\n    },\n    [selectionChecker, dispatch]\n  );\n\n  if (!value) {\n    return (\n      <div style={{ width }}>\n        <Spinner />\n      </div>\n    );\n  }\n\n  if (value.totalRows === 0) {\n    return (\n      <div style={{ width }}>\n        <Card>\n          <Card.Heading>No results found for your query.</Card.Heading>\n          <Card.Actions>\n            <Button variant=\"secondary\" onClick={stateManager.onClearSearchAndFilters}>\n              Clear search and filters\n            </Button>\n          </Card.Actions>\n        </Card>\n      </div>\n    );\n  }\n\n  const props: SearchResultsProps = {\n    response: value,\n    selection: canSelect ? selectionChecker : undefined,\n    selectionToggle: canSelect ? handleItemSelectionChange : undefined,\n    clearSelection,\n    width: width,\n    height: height,\n    onTagSelected: stateManager.onAddTag,\n    keyboardEvents,\n    onDatasourceChange: searchState.datasource ? stateManager.onDatasourceChange : undefined,\n    onClickItem: stateManager.onSearchItemClicked,\n  };\n\n  return <SearchResultsTable {...props} />;\n}\n\nfunction assertDashboardViewItemKind(kind: string): DashboardViewItemKind {\n  switch (kind) {\n    case 'folder':\n      return 'folder';\n    case 'dashboard':\n      return 'dashboard';\n    case 'panel':\n      return 'panel';\n  }\n\n  throw new Error('Unsupported kind' + kind);\n}\n","import { contextSrv } from 'app/core/core';\nimport { AccessControlAction, FolderDTO } from 'app/types';\n\nfunction checkFolderPermission(action: AccessControlAction, fallback: boolean, folderDTO?: FolderDTO) {\n  return folderDTO\n    ? contextSrv.hasAccessInMetadata(action, folderDTO, fallback)\n    : contextSrv.hasAccess(action, fallback);\n}\n\nexport function getFolderPermissions(folderDTO?: FolderDTO) {\n  // It is possible to have edit permissions for folders and dashboards, without being able to save, hence 'canSave'\n  const canEditInFolderFallback = folderDTO ? folderDTO.canSave : contextSrv.hasEditPermissionInFolders;\n\n  const canEditInFolder = checkFolderPermission(AccessControlAction.FoldersWrite, canEditInFolderFallback, folderDTO);\n  const canCreateFolder = checkFolderPermission(AccessControlAction.FoldersCreate, contextSrv.isEditor);\n  const canCreateDashboards = checkFolderPermission(\n    AccessControlAction.DashboardsCreate,\n    canEditInFolderFallback || !!folderDTO?.canSave\n  );\n\n  return {\n    canEditInFolder,\n    canCreateDashboards,\n    canCreateFolder,\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { memo, useEffect, useMemo } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { FilterInput, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { useDispatch } from 'app/types';\n\nimport { buildNavModel, getDashboardsTabID } from '../folders/state/navModel';\nimport { useSearchStateManager } from '../search/state/SearchStateManager';\nimport { getSearchPlaceholder } from '../search/tempI18nPhrases';\n\nimport { skipToken, useGetFolderQuery } from './api/browseDashboardsAPI';\nimport { BrowseActions } from './components/BrowseActions/BrowseActions';\nimport { BrowseFilters } from './components/BrowseFilters';\nimport { BrowseView } from './components/BrowseView';\nimport { CreateNewButton } from './components/CreateNewButton';\nimport { SearchView } from './components/SearchView';\nimport { getFolderPermissions } from './permissions';\nimport { setAllSelection, useHasSelection } from './state';\n\nexport interface BrowseDashboardsPageRouteParams {\n  uid?: string;\n  slug?: string;\n}\n\nexport interface Props extends GrafanaRouteComponentProps<BrowseDashboardsPageRouteParams> {}\n\n// New Browse/Manage/Search Dashboards views for nested folders\n\nconst BrowseDashboardsPage = memo(({ match }: Props) => {\n  const { uid: folderUID } = match.params;\n  const dispatch = useDispatch();\n\n  const styles = useStyles2(getStyles);\n  const [searchState, stateManager] = useSearchStateManager();\n  const isSearching = stateManager.hasSearchFilters();\n\n  useEffect(() => {\n    stateManager.initStateFromUrl(folderUID);\n\n    // Clear selected state when folderUID changes\n    dispatch(\n      setAllSelection({\n        isSelected: false,\n        folderUID: undefined,\n      })\n    );\n  }, [dispatch, folderUID, stateManager]);\n\n  useEffect(() => {\n    // Clear the search results when we leave SearchView to prevent old results flashing\n    // when starting a new search\n    if (!isSearching && searchState.result) {\n      stateManager.setState({ result: undefined, includePanels: undefined });\n    }\n  }, [isSearching, searchState.result, stateManager]);\n\n  const { data: folderDTO } = useGetFolderQuery(folderUID ?? skipToken);\n  const navModel = useMemo(() => {\n    if (!folderDTO) {\n      return undefined;\n    }\n    const model = buildNavModel(folderDTO);\n\n    // Set the \"Dashboards\" tab to active\n    const dashboardsTabID = getDashboardsTabID(folderDTO.uid);\n    const dashboardsTab = model.children?.find((child) => child.id === dashboardsTabID);\n    if (dashboardsTab) {\n      dashboardsTab.active = true;\n    }\n    return model;\n  }, [folderDTO]);\n\n  const hasSelection = useHasSelection();\n\n  const { canEditInFolder, canCreateDashboards, canCreateFolder } = getFolderPermissions(folderDTO);\n\n  return (\n    <Page\n      navId=\"dashboards/browse\"\n      pageNav={navModel}\n      actions={\n        (canCreateDashboards || canCreateFolder) && (\n          <CreateNewButton\n            inFolder={folderUID}\n            canCreateDashboard={canCreateDashboards}\n            canCreateFolder={canCreateFolder}\n          />\n        )\n      }\n    >\n      <Page.Contents className={styles.pageContents}>\n        <FilterInput\n          placeholder={getSearchPlaceholder(searchState.includePanels)}\n          value={searchState.query}\n          escapeRegex={false}\n          onChange={(e) => stateManager.onQueryChange(e)}\n        />\n\n        {hasSelection ? <BrowseActions /> : <BrowseFilters />}\n\n        <div className={styles.subView}>\n          <AutoSizer>\n            {({ width, height }) =>\n              isSearching ? (\n                <SearchView canSelect={canEditInFolder} width={width} height={height} />\n              ) : (\n                <BrowseView canSelect={canEditInFolder} width={width} height={height} folderUID={folderUID} />\n              )\n            }\n          </AutoSizer>\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  pageContents: css({\n    display: 'grid',\n    gridTemplateRows: 'auto auto 1fr',\n    height: '100%',\n    rowGap: theme.spacing(1),\n  }),\n\n  // AutoSizer needs an element to measure the full height available\n  subView: css({\n    height: '100%',\n  }),\n});\n\nBrowseDashboardsPage.displayName = 'BrowseDashboardsPage';\nexport default BrowseDashboardsPage;\n","import { backendSrv } from 'app/core/services/backend_srv';\n\nimport { buildNavModel } from '../folders/state/navModel';\n\nexport const loadFolderPage = (uid: string) => {\n  return backendSrv.getFolderByUid(uid, { withAccessControl: true }).then((folder) => {\n    const navModel = buildNavModel(folder);\n    navModel.children![0].active = true;\n\n    return { folder, folderNav: navModel };\n  });\n};\n","// Using '*' for uid will return true if anything is selected\nexport type SelectionChecker = (kind: string, uid: string) => boolean;\nexport type SelectionToggle = (kind: string, uid: string) => void;\n\nexport interface SearchSelection {\n  // Check if an item is selected\n  isSelected: SelectionChecker;\n\n  // Selected items by kind\n  items: Map<string, Set<string>>;\n}\n\nexport function newSearchSelection(): SearchSelection {\n  // the check is called often, on potentially large (all) results so using Map/Set is better than simple array\n  const items = new Map<string, Set<string>>();\n\n  const isSelected = (kind: string, uid: string) => {\n    return Boolean(items.get(kind)?.has(uid));\n  };\n\n  return {\n    items,\n    isSelected,\n  };\n}\n\nexport function updateSearchSelection(\n  old: SearchSelection,\n  selected: boolean,\n  kind: string,\n  uids: string[]\n): SearchSelection {\n  const items = old.items; // mutate! :/\n\n  if (uids.length) {\n    const k = items.get(kind);\n    if (k) {\n      for (const uid of uids) {\n        if (selected) {\n          k.add(uid);\n        } else {\n          k.delete(uid);\n        }\n      }\n      if (k.size < 1) {\n        items.delete(kind);\n      }\n    } else if (selected) {\n      items.set(kind, new Set<string>(uids));\n    }\n  }\n\n  return {\n    items,\n    isSelected: (kind: string, uid: string) => {\n      if (uid === '*') {\n        if (kind === '*') {\n          for (const k of items.keys()) {\n            if (items.get(k)?.size) {\n              return true;\n            }\n          }\n          return false;\n        }\n        return Boolean(items.get(kind)?.size);\n      }\n      return Boolean(items.get(kind)?.has(uid));\n    },\n  };\n}\n","import React, { memo } from 'react';\n\nimport { Checkbox } from '@grafana/ui';\n\ninterface Props {\n  checked?: boolean;\n  onClick?: React.MouseEventHandler<HTMLInputElement>;\n  className?: string;\n  editable?: boolean;\n  'aria-label'?: string;\n}\n\nexport const SearchCheckbox = memo(\n  ({ onClick, className, checked = false, editable = false, 'aria-label': ariaLabel }: Props) => {\n    return editable ? (\n      <Checkbox onClick={onClick} className={className} value={checked} aria-label={ariaLabel} />\n    ) : null;\n  }\n);\n\nSearchCheckbox.displayName = 'SearchCheckbox';\n","import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Card, Icon, IconName, TagList, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { SEARCH_ITEM_HEIGHT } from '../constants';\nimport { getIconForKind } from '../service/utils';\nimport { DashboardViewItem, OnToggleChecked } from '../types';\n\nimport { SearchCheckbox } from './SearchCheckbox';\n\nexport interface Props {\n  item: DashboardViewItem;\n  isSelected?: boolean;\n  editable?: boolean;\n  onTagSelected: (name: string) => any;\n  onToggleChecked?: OnToggleChecked;\n  onClickItem?: (event: React.MouseEvent<HTMLElement>) => void;\n}\n\nconst selectors = e2eSelectors.components.Search;\n\nconst getIconFromMeta = (meta = ''): IconName => {\n  const metaIconMap = new Map<string, IconName>([\n    ['errors', 'info-circle'],\n    ['views', 'eye'],\n  ]);\n\n  return metaIconMap.has(meta) ? metaIconMap.get(meta)! : 'sort-amount-down';\n};\n\n/** @deprecated */\nexport const SearchItem = ({ item, isSelected, editable, onToggleChecked, onTagSelected, onClickItem }: Props) => {\n  const styles = useStyles2(getStyles);\n  const tagSelected = useCallback(\n    (tag: string, event: React.MouseEvent<HTMLElement>) => {\n      event.stopPropagation();\n      event.preventDefault();\n      onTagSelected(tag);\n    },\n    [onTagSelected]\n  );\n\n  const handleCheckboxClick = useCallback(\n    (ev: React.MouseEvent) => {\n      ev.stopPropagation();\n\n      if (onToggleChecked) {\n        onToggleChecked(item);\n      }\n    },\n    [item, onToggleChecked]\n  );\n\n  const description = config.featureToggles.nestedFolders ? (\n    <>\n      <Icon name={getIconForKind(item.kind)} aria-hidden /> {kindName(item.kind)}\n    </>\n  ) : (\n    <>\n      <Icon name={getIconForKind(item.parentKind ?? 'folder')} aria-hidden /> {item.parentTitle || 'General'}\n    </>\n  );\n\n  return (\n    <div className={styles.cardContainer}>\n      <SearchCheckbox\n        aria-label=\"Select dashboard\"\n        editable={editable}\n        checked={isSelected}\n        onClick={handleCheckboxClick}\n      />\n\n      <Card\n        className={styles.card}\n        data-testid={selectors.dashboardItem(item.title)}\n        href={item.url}\n        style={{ minHeight: SEARCH_ITEM_HEIGHT }}\n        onClick={onClickItem}\n      >\n        <Card.Heading>{item.title}</Card.Heading>\n\n        <Card.Meta separator={''}>\n          <span className={styles.metaContainer}>{description}</span>\n\n          {item.sortMetaName && (\n            <span className={styles.metaContainer}>\n              <Icon name={getIconFromMeta(item.sortMetaName)} />\n              {item.sortMeta} {item.sortMetaName}\n            </span>\n          )}\n        </Card.Meta>\n        <Card.Tags>\n          <TagList tags={item.tags ?? []} onClick={tagSelected} getAriaLabel={(tag) => `Filter by tag \"${tag}\"`} />\n        </Card.Tags>\n      </Card>\n    </div>\n  );\n};\n\nfunction kindName(kind: DashboardViewItem['kind']) {\n  switch (kind) {\n    case 'folder':\n      return t('search.result-kind.folder', 'Folder');\n    case 'dashboard':\n      return t('search.result-kind.dashboard', 'Dashboard');\n    case 'panel':\n      return t('search.result-kind.panel', 'Panel');\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardContainer: css`\n      display: flex;\n      align-items: center;\n      margin-bottom: ${theme.spacing(0.75)};\n    `,\n    card: css`\n      padding: ${theme.spacing(1)} ${theme.spacing(2)};\n      margin-bottom: 0;\n    `,\n    metaContainer: css`\n      display: flex;\n      align-items: center;\n      margin-right: ${theme.spacing(1)};\n\n      svg {\n        margin-right: ${theme.spacing(0.5)};\n      }\n    `,\n  };\n};\n","import { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport type UseUrlParamsResult = [URLSearchParams, (params: Record<string, unknown>, replace?: boolean) => void];\n\n/** @internal experimental */\nexport function useUrlParams(): UseUrlParamsResult {\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n\n  const updateUrlParams = (params: Record<string, unknown>, replace?: boolean) => {\n    // Should find a way to use history directly here\n    locationService.partial(params, replace);\n  };\n\n  return [params, updateUrlParams];\n}\n","import { css } from '@emotion/css';\nimport { useDialog } from '@react-aria/dialog';\nimport { FocusScope } from '@react-aria/focus';\nimport { OverlayContainer, useOverlay } from '@react-aria/overlays';\nimport React, { useEffect, useRef, useState } from 'react';\nimport CSSTransition from 'react-transition-group/CSSTransition';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, useStyles2 } from '@grafana/ui';\n\nimport { useKeyNavigationListener } from '../hooks/useSearchKeyboardSelection';\nimport { SearchView } from '../page/components/SearchView';\nimport { getSearchStateManager } from '../state/SearchStateManager';\n\nconst ANIMATION_DURATION = 200;\n\nexport interface Props {\n  isOpen: boolean;\n}\n\nexport function DashboardSearchModal({ isOpen }: Props) {\n  const styles = useStyles2(getStyles);\n  const animStyles = useStyles2((theme) => getAnimStyles(theme, ANIMATION_DURATION));\n  const stateManager = getSearchStateManager();\n  const state = stateManager.useState();\n  const ref = useRef<HTMLDivElement>(null);\n  const backdropRef = useRef(null);\n  const [animationComplete, setAnimationComplete] = useState(false);\n  const { overlayProps, underlayProps } = useOverlay({ isOpen, onClose: stateManager.onCloseSearch }, ref);\n  const { dialogProps } = useDialog({}, ref);\n  const { onKeyDown, keyboardEvents } = useKeyNavigationListener();\n\n  useEffect(() => stateManager.initStateFromUrl(), [stateManager]);\n\n  return (\n    <OverlayContainer>\n      <CSSTransition nodeRef={backdropRef} appear in timeout={ANIMATION_DURATION} classNames={animStyles.underlay}>\n        <div ref={backdropRef} onClick={stateManager.onCloseSearch} className={styles.underlay} {...underlayProps} />\n      </CSSTransition>\n      <CSSTransition\n        nodeRef={ref}\n        onEntered={() => setAnimationComplete(true)}\n        appear\n        in\n        timeout={ANIMATION_DURATION}\n        classNames={animStyles.overlay}\n      >\n        <div ref={ref} className={styles.overlay} {...overlayProps} {...dialogProps}>\n          <FocusScope contain autoFocus>\n            <div className={styles.searchField}>\n              <div>\n                <input\n                  type=\"text\"\n                  placeholder={\n                    state.includePanels ? 'Search dashboards and panels by name' : 'Search dashboards by name'\n                  }\n                  value={state.query ?? ''}\n                  onChange={(e) => stateManager.onQueryChange(e.currentTarget.value)}\n                  onKeyDown={onKeyDown}\n                  tabIndex={0}\n                  spellCheck={false}\n                  className={styles.input}\n                />\n              </div>\n\n              <div className={styles.closeBtn}>\n                <IconButton name=\"times\" onClick={stateManager.onCloseSearch} size=\"xl\" tooltip=\"Close search\" />\n              </div>\n            </div>\n            {animationComplete && (\n              <div className={styles.search}>\n                <SearchView showManage={false} keyboardEvents={keyboardEvents} />\n              </div>\n            )}\n          </FocusScope>\n        </div>\n      </CSSTransition>\n    </OverlayContainer>\n  );\n}\n\nconst getAnimStyles = (theme: GrafanaTheme2, animationDuration: number) => {\n  const commonTransition = {\n    transitionDuration: `${animationDuration}ms`,\n    transitionTimingFunction: theme.transitions.easing.easeInOut,\n  };\n\n  const underlayTransition = {\n    [theme.breakpoints.up('md')]: {\n      ...commonTransition,\n      transitionProperty: 'opacity',\n    },\n  };\n\n  const underlayClosed = {\n    [theme.breakpoints.up('md')]: {\n      opacity: 0,\n    },\n  };\n\n  const underlayOpen = {\n    [theme.breakpoints.up('md')]: {\n      opacity: 1,\n    },\n  };\n\n  const overlayTransition = {\n    [theme.breakpoints.up('md')]: {\n      ...commonTransition,\n      transitionProperty: 'height, width',\n      overflow: 'hidden',\n    },\n  };\n\n  const overlayClosed = {\n    height: '100%',\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      height: '32px',\n      width: '50%',\n    },\n  };\n\n  const overlayOpen = {\n    height: '100%',\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      height: '90%',\n      width: '75%',\n    },\n  };\n\n  return {\n    overlay: {\n      appear: css(overlayClosed),\n      appearActive: css(overlayTransition, overlayOpen),\n      appearDone: css(overlayOpen),\n    },\n    underlay: {\n      appear: css(underlayClosed),\n      appearActive: css(underlayTransition, underlayOpen),\n      appearDone: css(underlayOpen),\n    },\n  };\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    underlay: css`\n      background-color: ${theme.components.overlay.background};\n      backdrop-filter: blur(1px);\n      bottom: 0;\n      left: 0;\n      padding: 0;\n      position: fixed;\n      right: 0;\n      top: 0;\n      z-index: ${theme.zIndex.modalBackdrop};\n    `,\n    overlay: css`\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.components.panel.borderColor};\n      display: flex;\n      flex-direction: column;\n      margin: 0 auto;\n      padding: ${theme.spacing(1)};\n      position: fixed;\n      height: 100%;\n      z-index: ${theme.zIndex.modal};\n\n      ${theme.breakpoints.up('md')} {\n        border-radius: ${theme.shape.radius.default};\n        box-shadow: ${theme.shadows.z3};\n        left: 0;\n        margin: ${theme.spacing(0.5, 'auto', 0)};\n        padding: ${theme.spacing(1)};\n        right: 0;\n      }\n    `,\n    closeBtn: css`\n      right: -5px;\n      top: 0px;\n      z-index: 1;\n      position: absolute;\n    `,\n    searchField: css`\n      position: relative;\n    `,\n    search: css`\n      display: flex;\n      flex-direction: column;\n      overflow: hidden;\n      height: 100%;\n      padding: ${theme.spacing(2, 0, 3, 0)};\n    `,\n    input: css`\n      box-sizing: border-box;\n      outline: none;\n      background-color: transparent;\n      background: transparent;\n      border-bottom: 1px solid ${theme.colors.border.medium};\n      font-size: 16px;\n      line-height: 30px;\n      width: 100%;\n\n      &::placeholder {\n        color: ${theme.colors.text.disabled};\n      }\n    `,\n  };\n};\n","import React, { memo } from 'react';\n\nimport { useUrlParams } from 'app/core/navigation/hooks';\n\nimport { DashboardSearchModal } from './DashboardSearchModal';\n\nexport const SearchWrapper = memo(() => {\n  const [params] = useUrlParams();\n  const isOpen = params.get('search') === 'open';\n\n  return isOpen ? <DashboardSearchModal isOpen={isOpen} /> : null;\n});\n\nSearchWrapper.displayName = 'SearchWrapper';\n","import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\nimport { useAsync, useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme2, toIconName } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Card, Checkbox, CollapsableSection, Icon, Spinner, useStyles2 } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { t } from 'app/core/internationalization';\nimport { getSectionStorageKey } from 'app/features/search/utils';\nimport { useUniqueId } from 'app/plugins/datasource/influxdb/components/useUniqueId';\n\nimport { SearchItem } from '../..';\nimport { GENERAL_FOLDER_UID } from '../../constants';\nimport { getGrafanaSearcher } from '../../service';\nimport { getFolderChildren } from '../../service/folders';\nimport { queryResultToViewItem } from '../../service/utils';\nimport { DashboardViewItem } from '../../types';\nimport { SelectionChecker, SelectionToggle } from '../selection';\n\ninterface SectionHeaderProps {\n  selection?: SelectionChecker;\n  selectionToggle?: SelectionToggle;\n  onClickItem?: (e: React.MouseEvent<HTMLElement>) => void;\n  onTagSelected: (tag: string) => void;\n  section: DashboardViewItem;\n  renderStandaloneBody?: boolean; // render the body on its own\n  tags?: string[];\n}\n\nasync function getChildren(section: DashboardViewItem, tags: string[] | undefined): Promise<DashboardViewItem[]> {\n  if (config.featureToggles.nestedFolders) {\n    return getFolderChildren(section.uid, section.title);\n  }\n\n  const query = section.itemsUIDs\n    ? {\n        uid: section.itemsUIDs,\n      }\n    : {\n        query: '*',\n        kind: ['dashboard'],\n        location: section.uid,\n        sort: 'name_sort',\n        limit: 1000, // this component does not have infinite scroll, so we need to load everything upfront\n      };\n\n  const raw = await getGrafanaSearcher().search({ ...query, tags });\n  return raw.view.map((v) => queryResultToViewItem(v, raw.view));\n}\n\nexport const FolderSection = ({\n  section,\n  selectionToggle,\n  onClickItem,\n  onTagSelected,\n  selection,\n  renderStandaloneBody,\n  tags,\n}: SectionHeaderProps) => {\n  const editable = selectionToggle != null;\n  const styles = useStyles2(useCallback((theme: GrafanaTheme2) => getSectionHeaderStyles(theme, editable), [editable]));\n  const [sectionExpanded, setSectionExpanded] = useLocalStorage(getSectionStorageKey(section.title), false);\n\n  const results = useAsync(async () => {\n    if (!sectionExpanded && !renderStandaloneBody) {\n      return Promise.resolve([]);\n    }\n\n    const childItems = getChildren(section, tags);\n\n    return childItems;\n  }, [sectionExpanded, tags]);\n\n  const onSectionExpand = () => {\n    setSectionExpanded(!sectionExpanded);\n  };\n\n  const onToggleFolder = (evt: React.FormEvent) => {\n    evt.preventDefault();\n    evt.stopPropagation();\n    if (selectionToggle && selection) {\n      const checked = !selection(section.kind, section.uid);\n      selectionToggle(section.kind, section.uid);\n      const sub = results.value ?? [];\n      for (const item of sub) {\n        if (selection(item.kind, item.uid!) !== checked) {\n          selectionToggle(item.kind, item.uid!);\n        }\n      }\n    }\n  };\n\n  const id = useUniqueId();\n  const labelId = `section-header-label-${id}`;\n\n  let icon = toIconName(section.icon ?? '');\n  if (!icon) {\n    icon = sectionExpanded ? 'folder-open' : 'folder';\n  }\n\n  const renderResults = () => {\n    if (!results.value) {\n      return null;\n    } else if (results.value.length === 0 && !results.loading) {\n      return (\n        <Card>\n          <Card.Heading>No results found</Card.Heading>\n        </Card>\n      );\n    }\n\n    return results.value.map((item) => {\n      return (\n        <SearchItem\n          key={item.uid}\n          item={item}\n          onTagSelected={onTagSelected}\n          onToggleChecked={(item) => selectionToggle?.(item.kind, item.uid)}\n          editable={Boolean(selection != null)}\n          onClickItem={onClickItem}\n          isSelected={selection?.(item.kind, item.uid)}\n        />\n      );\n    });\n  };\n\n  // Skip the folder wrapper\n  if (renderStandaloneBody) {\n    return (\n      <div className={styles.folderViewResults}>\n        {!results.value?.length && results.loading ? <Spinner className={styles.spinner} /> : renderResults()}\n      </div>\n    );\n  }\n\n  return (\n    <CollapsableSection\n      headerDataTestId={selectors.components.Search.folderHeader(section.title)}\n      contentDataTestId={selectors.components.Search.folderContent(section.title)}\n      isOpen={sectionExpanded ?? false}\n      onToggle={onSectionExpand}\n      className={styles.wrapper}\n      contentClassName={styles.content}\n      loading={results.loading}\n      labelId={labelId}\n      label={\n        <>\n          {selectionToggle && selection && (\n            <div onClick={onToggleFolder}>\n              <Checkbox\n                value={selection(section.kind, section.uid)}\n                aria-label={t('search.folder-view.select-folder', 'Select folder')}\n              />\n            </div>\n          )}\n\n          <div className={styles.icon}>\n            <Icon name={icon} />\n          </div>\n\n          <div className={styles.text}>\n            <span id={labelId}>{section.title}</span>\n            {section.url && section.uid !== GENERAL_FOLDER_UID && (\n              <a href={section.url} className={styles.link}>\n                <span className={styles.separator}>|</span> <Icon name=\"folder-upload\" />{' '}\n                {t('search.folder-view.go-to-folder', 'Go to folder')}\n              </a>\n            )}\n          </div>\n        </>\n      }\n    >\n      {results.value && <ul className={styles.sectionItems}>{renderResults()}</ul>}\n    </CollapsableSection>\n  );\n};\n\nconst getSectionHeaderStyles = (theme: GrafanaTheme2, editable: boolean) => {\n  const sm = theme.spacing(1);\n\n  return {\n    wrapper: css`\n      align-items: center;\n      font-size: ${theme.typography.size.base};\n      padding: 12px;\n      border-bottom: none;\n      color: ${theme.colors.text.secondary};\n      z-index: 1;\n\n      &:hover,\n      &.selected {\n        color: ${theme.colors.text};\n      }\n\n      &:hover,\n      &:focus-visible,\n      &:focus-within {\n        a {\n          opacity: 1;\n        }\n      }\n    `,\n    sectionItems: css`\n      margin: 0 24px 0 32px;\n    `,\n    icon: css`\n      padding: 0 ${sm} 0 ${editable ? 0 : sm};\n    `,\n    folderViewResults: css`\n      overflow: auto;\n    `,\n    text: css`\n      flex-grow: 1;\n      line-height: 24px;\n    `,\n    link: css`\n      padding: 2px 10px 0;\n      color: ${theme.colors.text.secondary};\n      opacity: 0;\n      transition: opacity 150ms ease-in-out;\n    `,\n    separator: css`\n      margin-right: 6px;\n    `,\n    content: css`\n      padding-top: 0px;\n      padding-bottom: 0px;\n    `,\n    spinner: css`\n      display: grid;\n      place-content: center;\n      padding-bottom: 1rem;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ConfirmModal, useStyles2 } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { deleteFoldersAndDashboards } from 'app/features/manage-dashboards/state/actions';\n\nimport { OnMoveOrDeleleSelectedItems } from '../../types';\n\ninterface Props {\n  onDeleteItems: OnMoveOrDeleleSelectedItems;\n  results: Map<string, Set<string>>;\n  onDismiss: () => void;\n}\n\nexport const ConfirmDeleteModal = ({ results, onDeleteItems, onDismiss }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const dashboards = Array.from(results.get('dashboard') ?? []);\n  const folders = Array.from(results.get('folder') ?? []);\n\n  const folderCount = folders.length;\n  const dashCount = dashboards.length;\n\n  let text = 'Do you want to delete the ';\n  let subtitle;\n  const dashEnding = dashCount === 1 ? '' : 's';\n  const folderEnding = folderCount === 1 ? '' : 's';\n\n  if (folderCount > 0 && dashCount > 0) {\n    text += `selected folder${folderEnding} and dashboard${dashEnding}?\\n`;\n    subtitle = `All dashboards and alerts of the selected folder${folderEnding} will also be deleted`;\n  } else if (folderCount > 0) {\n    text += `selected folder${folderEnding} and all ${folderCount === 1 ? 'its' : 'their'} dashboards and alerts?`;\n  } else {\n    text += `${dashCount} selected dashboard${dashEnding}?`;\n  }\n\n  const deleteItems = () => {\n    deleteFoldersAndDashboards(folders, dashboards).then(() => {\n      onDeleteItems();\n      onDismiss();\n    });\n  };\n\n  const requireDoubleConfirm = config.featureToggles.nestedFolders && folderCount > 0;\n\n  return (\n    <ConfirmModal\n      isOpen\n      title=\"Delete\"\n      body={\n        <>\n          {text} {subtitle && <div className={styles.subtitle}>{subtitle}</div>}\n        </>\n      }\n      confirmText=\"Delete\"\n      confirmationText={requireDoubleConfirm ? 'delete' : undefined}\n      onConfirm={deleteItems}\n      onDismiss={onDismiss}\n    />\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  subtitle: css`\n    font-size: ${theme.typography.fontSize}px;\n    padding-top: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, HorizontalGroup, Modal, useStyles2 } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport config from 'app/core/config';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { moveDashboards, moveFolders } from 'app/features/manage-dashboards/state/actions';\nimport { FolderInfo } from 'app/types';\n\nimport { GENERAL_FOLDER_UID } from '../../constants';\nimport { OnMoveOrDeleleSelectedItems } from '../../types';\n\ninterface Props {\n  onMoveItems: OnMoveOrDeleleSelectedItems;\n  results: Map<string, Set<string>>;\n  onDismiss: () => void;\n}\n\nexport const MoveToFolderModal = ({ results, onMoveItems, onDismiss }: Props) => {\n  const [folder, setFolder] = useState<FolderInfo | null>(null);\n  const styles = useStyles2(getStyles);\n  const notifyApp = useAppNotification();\n  const [moving, setMoving] = useState(false);\n\n  const nestedFoldersEnabled = config.featureToggles.nestedFolders;\n\n  const selectedDashboards = Array.from(results.get('dashboard') ?? []);\n  const selectedFolders = nestedFoldersEnabled\n    ? Array.from(results.get('folder') ?? []).filter((v) => v !== GENERAL_FOLDER_UID)\n    : [];\n\n  const handleFolderChange = useCallback(\n    (newFolder: FolderInfo) => {\n      setFolder(newFolder);\n    },\n    [setFolder]\n  );\n\n  const moveTo = async () => {\n    if (!folder) {\n      return;\n    }\n\n    if (nestedFoldersEnabled) {\n      setMoving(true);\n      let totalCount = 0;\n      let successCount = 0;\n\n      if (selectedDashboards.length) {\n        const moveDashboardsResult = await moveDashboards(selectedDashboards, folder);\n\n        totalCount += moveDashboardsResult.totalCount;\n        successCount += moveDashboardsResult.successCount;\n      }\n\n      if (selectedFolders.length) {\n        const moveFoldersResult = await moveFolders(selectedFolders, folder);\n\n        totalCount += moveFoldersResult.totalCount;\n        successCount += moveFoldersResult.successCount;\n      }\n\n      const destTitle = folder.title ?? 'General';\n      notifyNestedMoveResult(notifyApp, destTitle, {\n        selectedDashboardsCount: selectedDashboards.length,\n        selectedFoldersCount: selectedFolders.length,\n        totalCount,\n        successCount,\n      });\n\n      onMoveItems();\n      setMoving(false);\n      onDismiss();\n\n      return;\n    }\n\n    if (selectedDashboards.length) {\n      const folderTitle = folder.title ?? 'General';\n      setMoving(true);\n      moveDashboards(selectedDashboards, folder).then((result) => {\n        if (result.successCount > 0) {\n          const ending = result.successCount === 1 ? '' : 's';\n          const header = `Dashboard${ending} Moved`;\n          const msg = `${result.successCount} dashboard${ending} moved to ${folderTitle}`;\n          notifyApp.success(header, msg);\n        }\n\n        if (result.totalCount === result.alreadyInFolderCount) {\n          notifyApp.error('Error', `Dashboard already belongs to folder ${folderTitle}`);\n        } else {\n          //update the list\n          onMoveItems();\n        }\n\n        setMoving(false);\n        onDismiss();\n      });\n    }\n  };\n\n  const thingsMoving = [\n    ['folder', 'folders', selectedFolders.length] as const,\n    ['dashboard', 'dashboards', selectedDashboards.length] as const,\n  ]\n    .filter(([single, plural, count]) => count > 0)\n    .map(([single, plural, count]) => `${count.toLocaleString()} ${count === 1 ? single : plural}`)\n    .join(' and ');\n\n  return (\n    <Modal\n      isOpen\n      className={styles.modal}\n      title={nestedFoldersEnabled ? 'Move' : 'Choose Dashboard Folder'}\n      icon=\"folder-plus\"\n      onDismiss={onDismiss}\n    >\n      <>\n        <div className={styles.content}>\n          {nestedFoldersEnabled && selectedFolders.length > 0 && (\n            <Alert severity=\"warning\" title=\" Moving this item may change its permissions\" />\n          )}\n\n          <p>Move {thingsMoving} to:</p>\n\n          <FolderPicker allowEmpty={true} enableCreateNew={false} onChange={handleFolderChange} />\n        </div>\n\n        <HorizontalGroup justify=\"flex-end\">\n          <Button icon={moving ? 'fa fa-spinner' : undefined} variant=\"primary\" onClick={moveTo}>\n            Move\n          </Button>\n          <Button variant=\"secondary\" onClick={onDismiss}>\n            Cancel\n          </Button>\n        </HorizontalGroup>\n      </>\n    </Modal>\n  );\n};\n\ninterface NotifyCounts {\n  selectedDashboardsCount: number;\n  selectedFoldersCount: number;\n  totalCount: number;\n  successCount: number;\n}\n\nfunction notifyNestedMoveResult(\n  notifyApp: ReturnType<typeof useAppNotification>,\n  destinationName: string,\n  { selectedDashboardsCount, selectedFoldersCount, totalCount, successCount }: NotifyCounts\n) {\n  let objectMoving: string | undefined;\n  const plural = successCount === 1 ? '' : 's';\n  const failedCount = totalCount - successCount;\n\n  if (selectedDashboardsCount && selectedFoldersCount) {\n    objectMoving = `Item${plural}`;\n  } else if (selectedDashboardsCount) {\n    objectMoving = `Dashboard${plural}`;\n  } else if (selectedFoldersCount) {\n    objectMoving = `Folder${plural}`;\n  }\n\n  if (objectMoving) {\n    const objectLower = objectMoving?.toLocaleLowerCase();\n\n    if (totalCount === successCount) {\n      notifyApp.success(`${objectMoving} moved`, `Moved ${successCount} ${objectLower} to ${destinationName}`);\n    } else if (successCount === 0) {\n      notifyApp.error(`Failed to move ${objectLower}`, `Could not move ${totalCount} ${objectLower} due to an error`);\n    } else {\n      notifyApp.warning(\n        `Partially moved ${objectLower}`,\n        `Failed to move ${failedCount} ${objectLower} to ${destinationName}`\n      );\n    }\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css`\n      width: 500px;\n    `,\n    content: css`\n      margin-bottom: ${theme.spacing(3)};\n    `,\n  };\n};\n","import React, { useState } from 'react';\n\nimport { Button, HorizontalGroup, IconButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { FolderDTO } from 'app/types';\n\nimport { GENERAL_FOLDER_UID } from '../../constants';\nimport { OnMoveOrDeleleSelectedItems } from '../../types';\n\nimport { getStyles } from './ActionRow';\nimport { ConfirmDeleteModal } from './ConfirmDeleteModal';\nimport { MoveToFolderModal } from './MoveToFolderModal';\n\ntype Props = {\n  items: Map<string, Set<string>>;\n  folder?: FolderDTO; // when we are loading in folder page\n  onChange: OnMoveOrDeleleSelectedItems;\n  clearSelection: () => void;\n};\n\nexport function ManageActions({ items, folder, onChange, clearSelection }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const canSave = folder?.canSave;\n  const hasEditPermissionInFolders = folder ? canSave : contextSrv.hasEditPermissionInFolders;\n\n  const canMove = hasEditPermissionInFolders;\n\n  const selectedFolders = Array.from(items.get('folder') ?? []);\n  const includesGeneralFolder = selectedFolders.find((result) => result === GENERAL_FOLDER_UID);\n\n  const canDelete = hasEditPermissionInFolders && !includesGeneralFolder;\n  const [isMoveModalOpen, setIsMoveModalOpen] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n  const onMove = () => {\n    setIsMoveModalOpen(true);\n  };\n\n  const onDelete = () => {\n    setIsDeleteModalOpen(true);\n  };\n\n  return (\n    <div className={styles.actionRow} data-testid=\"manage-actions\">\n      <HorizontalGroup spacing=\"md\" width=\"auto\">\n        <IconButton name=\"check-square\" onClick={clearSelection} title=\"Uncheck everything\" />\n        <Button disabled={!canMove} onClick={onMove} icon=\"exchange-alt\" variant=\"secondary\">\n          Move\n        </Button>\n        <Button disabled={!canDelete} onClick={onDelete} icon=\"trash-alt\" variant=\"destructive\">\n          Delete\n        </Button>\n      </HorizontalGroup>\n\n      {isDeleteModalOpen && (\n        <ConfirmDeleteModal onDeleteItems={onChange} results={items} onDismiss={() => setIsDeleteModalOpen(false)} />\n      )}\n\n      {isMoveModalOpen && (\n        <MoveToFolderModal onMoveItems={onChange} results={items} onDismiss={() => setIsMoveModalOpen(false)} />\n      )}\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Alert, Spinner, useStyles2 } from '@grafana/ui';\nimport config from 'app/core/config';\n\nimport { contextSrv } from '../../../../core/services/context_srv';\nimport impressionSrv from '../../../../core/services/impression_srv';\nimport { GENERAL_FOLDER_UID } from '../../constants';\nimport { getGrafanaSearcher } from '../../service';\nimport { getFolderChildren } from '../../service/folders';\nimport { queryResultToViewItem } from '../../service/utils';\n\nimport { FolderSection } from './FolderSection';\nimport { SearchResultsProps } from './SearchResultsTable';\n\nasync function getChildren() {\n  if (config.featureToggles.nestedFolders) {\n    return getFolderChildren();\n  }\n\n  const searcher = getGrafanaSearcher();\n  const results = await searcher.search({\n    query: '*',\n    kind: ['folder'],\n    sort: searcher.getFolderViewSort(),\n    limit: 1000,\n  });\n\n  return results.view.map((v) => queryResultToViewItem(v, results.view));\n}\n\ntype Props = Pick<SearchResultsProps, 'selection' | 'selectionToggle' | 'onTagSelected' | 'onClickItem'> & {\n  tags?: string[];\n  hidePseudoFolders?: boolean;\n};\nexport const RootFolderView = ({\n  selection,\n  selectionToggle,\n  onTagSelected,\n  tags,\n  hidePseudoFolders,\n  onClickItem,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const results = useAsync(async () => {\n    const folders = await getChildren();\n\n    folders.unshift({ title: 'General', url: '/dashboards', kind: 'folder', uid: GENERAL_FOLDER_UID });\n\n    if (!hidePseudoFolders) {\n      const itemsUIDs = await impressionSrv.getDashboardOpened();\n      if (itemsUIDs.length) {\n        folders.unshift({ title: 'Recent', icon: 'clock-nine', kind: 'folder', uid: '__recent', itemsUIDs });\n      }\n\n      if (contextSrv.isSignedIn) {\n        const stars = await getBackendSrv().get('api/user/stars');\n        if (stars.length > 0) {\n          folders.unshift({ title: 'Starred', icon: 'star', kind: 'folder', uid: '__starred', itemsUIDs: stars });\n        }\n      }\n    }\n\n    return folders;\n  }, []);\n\n  const renderResults = () => {\n    if (results.loading) {\n      return <Spinner className={styles.spinner} />;\n    } else if (!results.value) {\n      return <Alert className={styles.error} title={results.error ? results.error.message : 'Something went wrong'} />;\n    } else {\n      return results.value.map((section) => (\n        <div data-testid={selectors.components.Search.sectionV2} className={styles.section} key={section.title}>\n          {section.title && (\n            <FolderSection\n              selection={selection}\n              selectionToggle={selectionToggle}\n              onTagSelected={onTagSelected}\n              section={section}\n              tags={tags}\n              onClickItem={onClickItem}\n            />\n          )}\n        </div>\n      ));\n    }\n  };\n\n  return <div className={styles.wrapper}>{renderResults()}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      display: flex;\n      flex-direction: column;\n      overflow: auto;\n\n      > ul {\n        list-style: none;\n      }\n\n      border: solid 1px ${theme.v1.colors.border2};\n    `,\n    section: css`\n      display: flex;\n      flex-direction: column;\n      background: ${theme.v1.colors.panelBg};\n\n      &:not(:last-child) {\n        border-bottom: solid 1px ${theme.v1.colors.border2};\n      }\n    `,\n    spinner: css`\n      align-items: center;\n      display: flex;\n      justify-content: center;\n      min-height: 100px;\n    `,\n    error: css`\n      margin: ${theme.spacing(4)} auto;\n    `,\n  };\n};\n","/* eslint-disable react/jsx-no-undef */\nimport { css } from '@emotion/css';\nimport React, { useEffect, useRef, useCallback, useState, CSSProperties } from 'react';\nimport { FixedSizeList } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { SearchItem } from '../../components/SearchItem';\nimport { useSearchKeyboardNavigation } from '../../hooks/useSearchKeyboardSelection';\nimport { queryResultToViewItem } from '../../service/utils';\n\nimport { SearchResultsProps } from './SearchResultsTable';\n\nexport const SearchResultsCards = React.memo(\n  ({\n    response,\n    width,\n    height,\n    selection,\n    selectionToggle,\n    onTagSelected,\n    keyboardEvents,\n    onClickItem,\n  }: SearchResultsProps) => {\n    const styles = useStyles2(getStyles);\n    const infiniteLoaderRef = useRef<InfiniteLoader>(null);\n    const [listEl, setListEl] = useState<FixedSizeList | null>(null);\n    const highlightIndex = useSearchKeyboardNavigation(keyboardEvents, 0, response);\n\n    // Scroll to the top and clear loader cache when the query results change\n    useEffect(() => {\n      if (infiniteLoaderRef.current) {\n        infiniteLoaderRef.current.resetloadMoreItemsCache();\n      }\n      if (listEl) {\n        listEl.scrollTo(0);\n      }\n    }, [response, listEl]);\n\n    const RenderRow = useCallback(\n      ({ index: rowIndex, style }: { index: number; style: CSSProperties }) => {\n        let className = '';\n        if (rowIndex === highlightIndex.y) {\n          className += ' ' + styles.selectedRow;\n        }\n\n        const item = response.view.get(rowIndex);\n        const searchItem = queryResultToViewItem(item, response.view);\n        const isSelected = selectionToggle && selection?.(searchItem.kind, searchItem.uid);\n\n        return (\n          <div style={style} key={item.uid} className={className} role=\"row\">\n            <SearchItem\n              item={searchItem}\n              onTagSelected={onTagSelected}\n              onToggleChecked={(item) => {\n                if (selectionToggle) {\n                  selectionToggle('dashboard', item.uid!);\n                }\n              }}\n              editable={Boolean(selection != null)}\n              onClickItem={onClickItem}\n              isSelected={isSelected}\n            />\n          </div>\n        );\n      },\n      [response.view, highlightIndex, styles, onTagSelected, selection, selectionToggle, onClickItem]\n    );\n\n    if (!response.totalRows) {\n      return (\n        <div className={styles.noData} style={{ width }}>\n          No data\n        </div>\n      );\n    }\n\n    return (\n      <div aria-label=\"Search results list\" style={{ width }} role=\"list\">\n        <InfiniteLoader\n          ref={infiniteLoaderRef}\n          isItemLoaded={response.isItemLoaded}\n          itemCount={response.totalRows}\n          loadMoreItems={response.loadMoreItems}\n        >\n          {({ onItemsRendered, ref }) => (\n            <FixedSizeList\n              ref={(innerRef) => {\n                ref(innerRef);\n                setListEl(innerRef);\n              }}\n              onItemsRendered={onItemsRendered}\n              height={height}\n              itemCount={response.totalRows}\n              itemSize={72}\n              width=\"100%\"\n              style={{ overflow: 'hidden auto' }}\n            >\n              {RenderRow}\n            </FixedSizeList>\n          )}\n        </InfiniteLoader>\n      </div>\n    );\n  }\n);\nSearchResultsCards.displayName = 'SearchResultsCards';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    noData: css`\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      height: 100%;\n    `,\n    selectedRow: css`\n      border-left: 3px solid ${theme.colors.primary.border};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\nimport { useDebounce } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Observable } from 'rxjs';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { useStyles2, Spinner, Button } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { FolderDTO } from 'app/types';\n\nimport { getGrafanaSearcher } from '../../service';\nimport { getSearchStateManager } from '../../state/SearchStateManager';\nimport { SearchLayout, DashboardViewItem } from '../../types';\nimport { newSearchSelection, updateSearchSelection } from '../selection';\n\nimport { ActionRow, getValidQueryLayout } from './ActionRow';\nimport { FolderSection } from './FolderSection';\nimport { ManageActions } from './ManageActions';\nimport { RootFolderView } from './RootFolderView';\nimport { SearchResultsCards } from './SearchResultsCards';\nimport { SearchResultsTable, SearchResultsProps } from './SearchResultsTable';\n\nexport type SearchViewProps = {\n  showManage: boolean;\n  folderDTO?: FolderDTO;\n  hidePseudoFolders?: boolean; // Recent + starred\n  keyboardEvents: Observable<React.KeyboardEvent>;\n};\n\nexport const SearchView = ({ showManage, folderDTO, hidePseudoFolders, keyboardEvents }: SearchViewProps) => {\n  const styles = useStyles2(getStyles);\n  const stateManager = getSearchStateManager(); // State is initialized from URL by parent component\n  const state = stateManager.useState();\n\n  const [searchSelection, setSearchSelection] = useState(newSearchSelection());\n  const layout = getValidQueryLayout(state);\n  const isFolders = layout === SearchLayout.Folders;\n\n  const [listKey, setListKey] = useState(Date.now());\n\n  // Search usage reporting\n  useDebounce(stateManager.onReportSearchUsage, 1000, []);\n\n  const clearSelection = useCallback(() => {\n    searchSelection.items.clear();\n    setSearchSelection({ ...searchSelection });\n  }, [searchSelection]);\n\n  const toggleSelection = useCallback(\n    (kind: string, uid: string) => {\n      const current = searchSelection.isSelected(kind, uid);\n      setSearchSelection(updateSearchSelection(searchSelection, !current, kind, [uid]));\n    },\n    [searchSelection]\n  );\n\n  // function to update items when dashboards or folders are moved or deleted\n  const onChangeItemsList = async () => {\n    // clean up search selection\n    clearSelection();\n    setListKey(Date.now());\n    // trigger again the search to the backend\n    stateManager.onQueryChange(state.query);\n  };\n\n  const renderResults = () => {\n    const value = state.result;\n\n    if ((!value || !value.totalRows) && !isFolders) {\n      if (state.loading && !value) {\n        return <Spinner />;\n      }\n\n      return (\n        <div className={styles.noResults}>\n          <div>No results found for your query.</div>\n          <br />\n          <Button variant=\"secondary\" onClick={stateManager.onClearSearchAndFilters}>\n            Clear search and filters\n          </Button>\n        </div>\n      );\n    }\n\n    const selection = showManage ? searchSelection.isSelected : undefined;\n\n    if (layout === SearchLayout.Folders) {\n      if (folderDTO) {\n        return (\n          <FolderSection\n            section={sectionForFolderView(folderDTO)}\n            selection={selection}\n            selectionToggle={toggleSelection}\n            onTagSelected={stateManager.onAddTag}\n            renderStandaloneBody={true}\n            tags={state.tag}\n            key={listKey}\n            onClickItem={stateManager.onSearchItemClicked}\n          />\n        );\n      }\n      return (\n        <RootFolderView\n          key={listKey}\n          selection={selection}\n          selectionToggle={toggleSelection}\n          tags={state.tag}\n          onTagSelected={stateManager.onAddTag}\n          hidePseudoFolders={hidePseudoFolders}\n          onClickItem={stateManager.onSearchItemClicked}\n        />\n      );\n    }\n\n    return (\n      <div style={{ height: '100%', width: '100%' }}>\n        <AutoSizer>\n          {({ width, height }) => {\n            const props: SearchResultsProps = {\n              response: value!,\n              selection,\n              selectionToggle: toggleSelection,\n              clearSelection,\n              width: width,\n              height: height,\n              onTagSelected: stateManager.onAddTag,\n              keyboardEvents,\n              onDatasourceChange: state.datasource ? stateManager.onDatasourceChange : undefined,\n              onClickItem: stateManager.onSearchItemClicked,\n            };\n\n            if (width < 800) {\n              return <SearchResultsCards {...props} />;\n            }\n\n            return <SearchResultsTable {...props} />;\n          }}\n        </AutoSizer>\n      </div>\n    );\n  };\n\n  if (\n    folderDTO &&\n    // With nested folders, SearchView doesn't know if it's fetched all children\n    // of a folder so don't show empty state here.\n    !config.featureToggles.nestedFolders &&\n    !state.loading &&\n    !state.result?.totalRows &&\n    !stateManager.hasSearchFilters()\n  ) {\n    return (\n      <EmptyListCTA\n        title=\"This folder doesn't have any dashboards yet\"\n        buttonIcon=\"plus\"\n        buttonTitle=\"Create Dashboard\"\n        buttonLink={`dashboard/new?folderUid=${folderDTO.uid}`}\n        proTip=\"Add/move dashboards to your folder at ->\"\n        proTipLink=\"dashboards\"\n        proTipLinkTitle=\"Manage dashboards\"\n        proTipTarget=\"\"\n      />\n    );\n  }\n\n  return (\n    <>\n      {Boolean(searchSelection.items.size > 0) ? (\n        <ManageActions items={searchSelection.items} onChange={onChangeItemsList} clearSelection={clearSelection} />\n      ) : (\n        <ActionRow\n          onLayoutChange={stateManager.onLayoutChange}\n          showStarredFilter={hidePseudoFolders}\n          onStarredFilterChange={!hidePseudoFolders ? undefined : stateManager.onStarredFilterChange}\n          onSortChange={stateManager.onSortChange}\n          onTagFilterChange={stateManager.onTagFilterChange}\n          getTagOptions={stateManager.getTagOptions}\n          getSortOptions={getGrafanaSearcher().getSortOptions}\n          sortPlaceholder={getGrafanaSearcher().sortPlaceholder}\n          onDatasourceChange={stateManager.onDatasourceChange}\n          onPanelTypeChange={stateManager.onPanelTypeChange}\n          state={state}\n          includePanels={state.includePanels!}\n          onSetIncludePanels={stateManager.onSetIncludePanels}\n        />\n      )}\n\n      {renderResults()}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchInput: css`\n    margin-bottom: 6px;\n    min-height: ${theme.spacing(4)};\n  `,\n  unsupported: css`\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    font-size: 18px;\n  `,\n  noResults: css`\n    padding: ${theme.v1.spacing.md};\n    background: ${theme.v1.colors.bg2};\n    font-style: italic;\n    margin-top: ${theme.v1.spacing.md};\n  `,\n});\n\nfunction sectionForFolderView(folderDTO: FolderDTO): DashboardViewItem {\n  return { uid: folderDTO.uid, kind: 'folder', title: folderDTO.title };\n}\n","import React, { useMemo, useState } from 'react';\n\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Menu, Dropdown, Button, Icon, HorizontalGroup } from '@grafana/ui';\nimport { FolderDTO } from 'app/types';\n\nimport { MoveToFolderModal } from '../page/components/MoveToFolderModal';\nimport { getImportPhrase, getNewDashboardPhrase, getNewFolderPhrase, getNewPhrase } from '../tempI18nPhrases';\n\nexport interface Props {\n  folder: FolderDTO | undefined;\n  canCreateFolders?: boolean;\n  canCreateDashboards?: boolean;\n}\n\nexport const DashboardActions = ({ folder, canCreateFolders = false, canCreateDashboards = false }: Props) => {\n  const [isMoveModalOpen, setIsMoveModalOpen] = useState(false);\n  const canMove = config.featureToggles.nestedFolders && (folder?.canSave ?? false);\n\n  const moveSelection = useMemo(\n    () => new Map<string, Set<string>>([['folder', new Set(folder?.uid ? [folder.uid] : [])]]),\n    [folder]\n  );\n\n  const actionUrl = (type: string) => {\n    let url = `dashboard/${type}`;\n    const isTypeNewFolder = type === 'new_folder';\n\n    if (isTypeNewFolder) {\n      url = `dashboards/folder/new/`;\n    }\n\n    if (folder?.uid) {\n      url += `?folderUid=${folder.uid}`;\n    }\n\n    return url;\n  };\n\n  const MenuActions = () => {\n    return (\n      <Menu>\n        {canCreateDashboards && (\n          <Menu.Item\n            url={actionUrl('new')}\n            label={getNewDashboardPhrase()}\n            onClick={() =>\n              reportInteraction('grafana_menu_item_clicked', { url: actionUrl('new'), from: '/dashboards' })\n            }\n          />\n        )}\n        {canCreateFolders && (config.featureToggles.nestedFolders || !folder?.uid) && (\n          <Menu.Item\n            url={actionUrl('new_folder')}\n            label={getNewFolderPhrase()}\n            onClick={() =>\n              reportInteraction('grafana_menu_item_clicked', { url: actionUrl('new_folder'), from: '/dashboards' })\n            }\n          />\n        )}\n        {canCreateDashboards && (\n          <Menu.Item\n            url={actionUrl('import')}\n            label={getImportPhrase()}\n            onClick={() =>\n              reportInteraction('grafana_menu_item_clicked', { url: actionUrl('import'), from: '/dashboards' })\n            }\n          />\n        )}\n      </Menu>\n    );\n  };\n\n  return (\n    <>\n      <div>\n        <HorizontalGroup>\n          {canMove && (\n            <Button onClick={() => setIsMoveModalOpen(true)} icon=\"exchange-alt\" variant=\"secondary\">\n              Move\n            </Button>\n          )}\n          <Dropdown overlay={MenuActions} placement=\"bottom-start\">\n            <Button variant=\"primary\">\n              {getNewPhrase()}\n              <Icon name=\"angle-down\" />\n            </Button>\n          </Dropdown>\n        </HorizontalGroup>\n      </div>\n\n      {canMove && isMoveModalOpen && (\n        <MoveToFolderModal onMoveItems={() => {}} results={moveSelection} onDismiss={() => setIsMoveModalOpen(false)} />\n      )}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, FilterInput } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { FolderDTO, AccessControlAction } from 'app/types';\n\nimport { useKeyNavigationListener } from '../hooks/useSearchKeyboardSelection';\nimport { SearchView } from '../page/components/SearchView';\nimport { getSearchStateManager } from '../state/SearchStateManager';\nimport { getSearchPlaceholder } from '../tempI18nPhrases';\n\nimport { DashboardActions } from './DashboardActions';\n\nexport interface Props {\n  folder?: FolderDTO;\n}\n\nexport const ManageDashboardsNew = React.memo(({ folder }: Props) => {\n  const styles = useStyles2(getStyles);\n  // since we don't use \"query\" from use search... it is not actually loaded from the URL!\n  const stateManager = getSearchStateManager();\n  const state = stateManager.useState();\n  const { onKeyDown, keyboardEvents } = useKeyNavigationListener();\n\n  // TODO: we need to refactor DashboardActions to use folder.uid instead\n\n  const folderUid = folder?.uid;\n  const canSave = folder?.canSave;\n  const { isEditor } = contextSrv;\n  const hasEditPermissionInFolders = folder ? canSave : contextSrv.hasEditPermissionInFolders;\n  const canCreateFolders = contextSrv.hasAccess(AccessControlAction.FoldersCreate, isEditor);\n  const canCreateDashboardsFallback = hasEditPermissionInFolders || !!canSave;\n  const canCreateDashboards = folderUid\n    ? contextSrv.hasAccessInMetadata(AccessControlAction.DashboardsCreate, folder, canCreateDashboardsFallback)\n    : contextSrv.hasAccess(AccessControlAction.DashboardsCreate, canCreateDashboardsFallback);\n  const viewActions = (folder === undefined && canCreateFolders) || canCreateDashboards;\n\n  useEffect(() => stateManager.initStateFromUrl(folder?.uid), [folder?.uid, stateManager]);\n\n  return (\n    <>\n      <div className={cx(styles.actionBar, 'page-action-bar')}>\n        <div className={cx(styles.inputWrapper, 'gf-form gf-form--grow m-r-2')}>\n          <FilterInput\n            value={state.query ?? ''}\n            onChange={(e) => stateManager.onQueryChange(e)}\n            onKeyDown={onKeyDown}\n            // eslint-disable-next-line jsx-a11y/no-autofocus\n            autoFocus\n            spellCheck={false}\n            placeholder={getSearchPlaceholder(state.includePanels)}\n            escapeRegex={false}\n            className={styles.searchInput}\n          />\n        </div>\n        {viewActions && (\n          <DashboardActions\n            folder={folder}\n            canCreateFolders={canCreateFolders}\n            canCreateDashboards={canCreateDashboards}\n          />\n        )}\n      </div>\n\n      <SearchView\n        showManage={Boolean(isEditor || hasEditPermissionInFolders || canSave)}\n        folderDTO={folder}\n        hidePseudoFolders={true}\n        keyboardEvents={keyboardEvents}\n      />\n    </>\n  );\n});\n\nManageDashboardsNew.displayName = 'ManageDashboardsNew';\n\nexport default ManageDashboardsNew;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  actionBar: css`\n    ${theme.breakpoints.down('sm')} {\n      flex-wrap: wrap;\n    }\n  `,\n  inputWrapper: css`\n    ${theme.breakpoints.down('sm')} {\n      margin-right: 0 !important;\n    }\n  `,\n  searchInput: css`\n    margin-bottom: 6px;\n    min-height: ${theme.spacing(4)};\n  `,\n  unsupported: css`\n    padding: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n    font-size: 18px;\n  `,\n  noResults: css`\n    padding: ${theme.v1.spacing.md};\n    background: ${theme.v1.colors.bg2};\n    font-style: italic;\n    margin-top: ${theme.v1.spacing.md};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { memo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { locationUtil, NavModelItem } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport NewBrowseDashboardsPage from 'app/features/browse-dashboards/BrowseDashboardsPage';\nimport { FolderDTO } from 'app/types';\n\nimport { loadFolderPage } from '../loaders';\n\nimport ManageDashboardsNew from './ManageDashboardsNew';\n\nexport interface DashboardListPageRouteParams {\n  uid?: string;\n  slug?: string;\n}\n\ninterface Props extends GrafanaRouteComponentProps<DashboardListPageRouteParams> {}\n\nexport const DashboardListPageFeatureToggle = memo((props: Props) => {\n  if (config.featureToggles.nestedFolders) {\n    return <NewBrowseDashboardsPage {...props} />;\n  }\n\n  return <DashboardListPage {...props} />;\n});\nDashboardListPageFeatureToggle.displayName = 'DashboardListPageFeatureToggle';\n\nconst DashboardListPage = memo(({ match, location }: Props) => {\n  const { loading, value } = useAsync<() => Promise<{ folder?: FolderDTO; pageNav?: NavModelItem }>>(() => {\n    const uid = match.params.uid;\n    const url = location.pathname;\n\n    if (!uid || !url.startsWith('/dashboards')) {\n      return Promise.resolve({});\n    }\n\n    return loadFolderPage(uid!).then(({ folder, folderNav }) => {\n      const path = locationUtil.stripBaseFromUrl(folder.url);\n\n      if (path !== location.pathname) {\n        locationService.replace(path);\n      }\n\n      return { folder, pageNav: folderNav };\n    });\n  }, [match.params.uid]);\n\n  return (\n    <Page navId=\"dashboards/browse\" pageNav={value?.pageNav}>\n      <Page.Contents\n        isLoading={loading}\n        className={css`\n          display: flex;\n          flex-direction: column;\n          height: 100%;\n        `}\n      >\n        <ManageDashboardsNew folder={value?.folder} />\n      </Page.Contents>\n    </Page>\n  );\n});\n\nDashboardListPage.displayName = 'DashboardListPage';\n\nexport default DashboardListPageFeatureToggle;\n","import { reportInteraction } from '@grafana/runtime';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { EventTrackingNamespace, SearchLayout } from '../types';\n\ninterface QueryProps {\n  layout: SearchLayout;\n  starred: boolean;\n  sortValue?: string;\n  query: string;\n  tagCount: number;\n  includePanels?: boolean;\n}\n\nexport const reportDashboardListViewed = (eventTrackingNamespace: EventTrackingNamespace, query: QueryProps) => {\n  reportInteraction(`${eventTrackingNamespace}_viewed`, getQuerySearchContext(query));\n};\n\nexport const reportSearchResultInteraction = (eventTrackingNamespace: EventTrackingNamespace, query: QueryProps) => {\n  reportInteraction(`${eventTrackingNamespace}_result_clicked`, getQuerySearchContext(query));\n};\n\nexport const reportSearchQueryInteraction = (eventTrackingNamespace: EventTrackingNamespace, query: QueryProps) => {\n  reportInteraction(`${eventTrackingNamespace}_query_submitted`, getQuerySearchContext(query));\n};\n\nexport const reportSearchFailedQueryInteraction = (\n  eventTrackingNamespace: EventTrackingNamespace,\n  { error, ...query }: QueryProps & { error?: string }\n) => {\n  reportInteraction(`${eventTrackingNamespace}_query_failed`, { ...getQuerySearchContext(query), error });\n};\n\nexport const reportPanelInspectInteraction = (\n  PanelInspectType: InspectTab,\n  name: string,\n  properties?: Record<string, boolean | string>\n) => {\n  reportInteraction(`grafana_panel_inspect_${PanelInspectType}_${name}_clicked`, properties);\n};\n\nconst getQuerySearchContext = (query: QueryProps) => {\n  return {\n    layout: query.layout,\n    starredFilter: query.starred ?? false,\n    sort: query.sortValue ?? '',\n    tagCount: query.tagCount ?? 0,\n    queryLength: query.query?.length ?? 0,\n    includePanels: query.includePanels ?? false,\n  };\n};\n"],"names":["defaultSortOptionsGetter","SortPicker","onChange","value","placeholder","filter","getSortOptions","isClearable","options","vals","v","isDesc","opt","StateManagerBase","state","useLatestState","update","observerOrNext","model","forceUpdate","s","hasFilters","query","getSectionStorageKey","title","parseRouteParams","params","cleanedParams","obj","key","val","folderStr","initialState","defaultQueryParams","SearchStateManager","tagToRemove","tag","tags","newTag","datasource","panel_type","e","starred","sort","layout","includePanels","store","folderUid","doInitialSearch","stateFromUrl","stateManager","q","trackingInfo","searcher","searchTimestamp","result","error","getSearchStateManager","useSearchStateManager","getSearchPlaceholder","getNewDashboardPhrase","getNewFolderPhrase","getImportPhrase","getNewPhrase","rootItemsSelector","wholeState","childrenByParentUIDSelector","openFoldersSelector","selectedItemsSelector","flatTreeSelector","rootFolderUID","rootItems","childrenByParentUID","openFolders","folderUID","createFlatTree","hasSelectionSelector","selectedItems","selectedItem","isSelected","selectedItemsForActionsSelector","children","child","useBrowseLoadingStatus","useFlatTreeState","useHasSelection","useCheckboxSelectionState","useChildrenByParentUIDState","useActionSelectionState","childrenByUID","level","mapItem","item","parentUID","mappedChildren","isOpen","emptyFolder","buildBreakdownString","folderCount","dashboardCount","libraryPanelCount","alertRuleCount","total","parts","breakdownString","DeleteModal","onConfirm","onDismiss","props","styles","getStyles","data","isFetching","isLoading","onDelete","ConfirmModal","Spinner","Alert","theme","MoveModal","moveTarget","setMoveTarget","selectedFolders","uid","onMove","Modal","Field","FolderPicker","Button","BrowseActions","dispatch","selectedDashboards","isSearching","onActionComplete","parentsToRefresh","folder","dashboardUID","dashboard","destinationUID","showMoveModal","showDeleteModal","getLayoutOptions","getValidQueryLayout","ActionRow","onLayoutChange","onSortChange","onStarredFilterChange","onTagFilterChange","getTagOptions","sortPlaceholder","onDatasourceChange","onPanelTypeChange","onSetIncludePanels","showStarredFilter","hideLayout","disabledOptions","TagFilter","config","Checkbox","RadioButtonGroup","change","BrowseFilters","searchState","INDENT_AMOUNT_CSS_VAR","SelectionState","CheckboxCell","row","onItemSelectionChange","selectors","ev","CheckboxHeaderCell","onAllSelectionChange","Indent","space","NameCell","onFolderClick","chevronIcon","IconButton","Link","TagsCell","TagList","TypeCell","iconName","Icon","useCustomFlexLayout","hooks","getRowStyles","column","getColumnStyleProps","cell","HEADER_HEIGHT","ROW_HEIGHT","DashboardsTree","items","width","height","canSelect","tableColumns","table","getTableProps","getTableBodyProps","headerGroups","virtualData","headerGroup","headerGroupProps","headerProps","VirtualListRow","index","style","rows","prepareRow","cellProps","BrowseView","status","flatTree","handleFolderClick","clickedFolderUID","handleItemSelectionChange","selection","hasSelectedDescendants","EmptyListCTA","newState","thisIsSelected","CreateNewButton","inFolder","canCreateDashboard","canCreateFolder","newMenu","Menu","MenuItem","addFolderUidToUrl","Dropdown","url","SearchView","hasSelection","keyboardEvents","selectionChecker","kind","assertDashboardViewItemKind","clearSelection","newIsSelected","Card","SearchResultsTable","checkFolderPermission","action","fallback","folderDTO","getFolderPermissions","canEditInFolderFallback","canEditInFolder","canCreateDashboards","BrowseDashboardsPage","match","navModel","dashboardsTabID","dashboardsTab","Page","FilterInput","loadFolderPage","newSearchSelection","updateSearchSelection","old","selected","uids","k","SearchCheckbox","onClick","className","checked","editable","ariaLabel","getIconFromMeta","meta","metaIconMap","SearchItem","onToggleChecked","onTagSelected","onClickItem","tagSelected","event","handleCheckboxClick","description","kindName","useUrlParams","location","replace","ANIMATION_DURATION","DashboardSearchModal","animStyles","getAnimStyles","ref","backdropRef","animationComplete","setAnimationComplete","overlayProps","underlayProps","dialogProps","onKeyDown","CSSTransition","animationDuration","commonTransition","underlayTransition","underlayClosed","underlayOpen","overlayTransition","overlayClosed","overlayOpen","SearchWrapper","getChildren","section","raw","FolderSection","selectionToggle","renderStandaloneBody","getSectionHeaderStyles","sectionExpanded","setSectionExpanded","useLocalStorage","results","useAsync","onSectionExpand","onToggleFolder","evt","sub","labelId","useUniqueId","icon","renderResults","CollapsableSection","sm","ConfirmDeleteModal","onDeleteItems","dashboards","folders","dashCount","text","subtitle","dashEnding","folderEnding","deleteItems","requireDoubleConfirm","MoveToFolderModal","onMoveItems","setFolder","notifyApp","moving","setMoving","nestedFoldersEnabled","handleFolderChange","newFolder","moveTo","totalCount","successCount","moveDashboardsResult","moveFoldersResult","destTitle","notifyNestedMoveResult","folderTitle","ending","header","msg","thingsMoving","single","plural","count","destinationName","selectedDashboardsCount","selectedFoldersCount","objectMoving","failedCount","objectLower","ManageActions","canSave","hasEditPermissionInFolders","canMove","includesGeneralFolder","canDelete","isMoveModalOpen","setIsMoveModalOpen","isDeleteModalOpen","setIsDeleteModalOpen","RootFolderView","hidePseudoFolders","itemsUIDs","stars","SearchResultsCards","response","infiniteLoaderRef","listEl","setListEl","highlightIndex","RenderRow","rowIndex","searchItem","onItemsRendered","innerRef","showManage","searchSelection","setSearchSelection","isFolders","listKey","setListKey","useDebounce","toggleSelection","current","onChangeItemsList","sectionForFolderView","DashboardActions","canCreateFolders","moveSelection","actionUrl","type","MenuActions","ManageDashboardsNew","isEditor","canCreateDashboardsFallback","viewActions","DashboardListPageFeatureToggle","DashboardListPage","loading","folderNav","path","reportDashboardListViewed","eventTrackingNamespace","getQuerySearchContext","reportSearchResultInteraction","reportSearchQueryInteraction","reportSearchFailedQueryInteraction","reportPanelInspectInteraction","PanelInspectType","name","properties"],"sourceRoot":""}