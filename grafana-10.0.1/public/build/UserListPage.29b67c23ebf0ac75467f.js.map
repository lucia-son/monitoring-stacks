{"version":3,"file":"UserListPage.29b67c23ebf0ac75467f.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/UserListPublicDashboardPage/DashboardsListModalButton.tsx","webpack://grafana/./public/app/features/admin/UserListPublicDashboardPage/DeleteUserModalButton.tsx","webpack://grafana/./public/app/features/admin/UserListPublicDashboardPage/UserListPublicDashboardPage.tsx","webpack://grafana/./public/app/features/admin/UserListPage.tsx","webpack://grafana/./public/app/features/invites/InviteeRow.tsx","webpack://grafana/./public/app/features/invites/InviteesTable.tsx","webpack://grafana/./public/app/features/invites/state/selectors.ts","webpack://grafana/./public/app/features/users/state/actions.ts","webpack://grafana/./public/app/features/users/state/selectors.ts","webpack://grafana/./public/app/features/users/UsersActionBar.tsx","webpack://grafana/./public/app/features/users/UsersListPage.tsx","webpack://grafana/./public/app/features/users/UsersTable.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { Button, LoadingPlaceholder, Modal, ModalsController, useStyles2 } from '@grafana/ui/src';\nimport {\n  generatePublicDashboardConfigUrl,\n  generatePublicDashboardUrl,\n} from 'app/features/dashboard/components/ShareModal/SharePublicDashboard/SharePublicDashboardUtils';\n\nimport { useGetActiveUserDashboardsQuery } from '../../dashboard/api/publicDashboardApi';\n\nconst selectors = e2eSelectors.pages.UserListPage.UsersListPublicDashboardsPage.DashboardsListModal;\nexport const DashboardsListModal = ({ email, onDismiss }: { email: string; onDismiss: () => void }) => {\n  const styles = useStyles2(getStyles);\n\n  const { data: dashboards, isLoading } = useGetActiveUserDashboardsQuery(email);\n\n  return (\n    <Modal className={styles.modal} isOpen title=\"Public dashboards\" onDismiss={onDismiss}>\n      {isLoading ? (\n        <div className={styles.loading}>\n          <LoadingPlaceholder text=\"Loading...\" />\n        </div>\n      ) : (\n        dashboards?.map((dash) => (\n          <div key={dash.dashboardUid} className={styles.listItem} data-testid={selectors.listItem(dash.dashboardUid)}>\n            <p className={styles.dashboardTitle}>{dash.dashboardTitle}</p>\n            <div className={styles.urlsContainer}>\n              <a\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                className={cx('external-link', styles.url)}\n                href={generatePublicDashboardUrl(dash.publicDashboardAccessToken)}\n                onClick={onDismiss}\n              >\n                Public dashboard URL\n              </a>\n              <span className={styles.urlsDivider}>•</span>\n              <a\n                className={cx('external-link', styles.url)}\n                href={generatePublicDashboardConfigUrl(dash.dashboardUid)}\n                onClick={onDismiss}\n              >\n                Public dashboard settings\n              </a>\n            </div>\n            <hr className={styles.divider} />\n          </div>\n        ))\n      )}\n    </Modal>\n  );\n};\n\nexport const DashboardsListModalButton = ({ email }: { email: string }) => (\n  <ModalsController>\n    {({ showModal, hideModal }) => (\n      <Button\n        variant=\"secondary\"\n        size=\"sm\"\n        icon=\"question-circle\"\n        title=\"Open dashboards list\"\n        aria-label=\"Open dashboards list\"\n        onClick={() => showModal(DashboardsListModal, { email, onDismiss: hideModal })}\n      />\n    )}\n  </ModalsController>\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    width: 590px;\n  `,\n  loading: css`\n    display: flex;\n    justify-content: center;\n  `,\n  listItem: css`\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing(0.5)};\n  `,\n  divider: css`\n    margin: ${theme.spacing(1.5, 0)};\n    color: ${theme.colors.text.secondary};\n  `,\n  urlsContainer: css`\n    display: flex;\n    gap: ${theme.spacing(0.5)};\n\n    ${theme.breakpoints.down('sm')} {\n      flex-direction: column;\n    }\n  `,\n  urlsDivider: css`\n    color: ${theme.colors.text.secondary};\n    ${theme.breakpoints.down('sm')} {\n      display: none;\n    }\n  `,\n  dashboardTitle: css`\n    font-size: ${theme.typography.body.fontSize};\n    font-weight: ${theme.typography.fontWeightBold};\n    margin-bottom: 0;\n  `,\n  url: css`\n    font-size: ${theme.typography.body.fontSize};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Button, Modal, ModalsController, useStyles2 } from '@grafana/ui/src';\nimport { SessionUser } from 'app/features/dashboard/components/ShareModal/SharePublicDashboard/SharePublicDashboardUtils';\n\nconst DeleteUserModal = ({ user, onDismiss }: { user: SessionUser; onDismiss: () => void }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Modal className={styles.modal} isOpen title=\"Delete\" onDismiss={onDismiss}>\n      <p className={styles.description}>\n        The user {user.email} is currently present in {user.totalDashboards} public dashboard(s). If you wish to remove\n        this user, please navigate to the settings of the corresponding public dashboard.\n      </p>\n      <Modal.ButtonRow>\n        <Button type=\"button\" variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          Close\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nexport const DeleteUserModalButton = ({ user }: { user: SessionUser }) => (\n  <ModalsController>\n    {({ showModal, hideModal }) => (\n      <Button\n        size=\"sm\"\n        variant=\"destructive\"\n        onClick={() => showModal(DeleteUserModal, { user, onDismiss: hideModal })}\n        icon=\"times\"\n        aria-label=\"Delete user\"\n        title=\"Delete user\"\n      />\n    )}\n  </ModalsController>\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    width: 500px;\n  `,\n  description: css`\n    font-size: ${theme.typography.body.fontSize};\n    margin: 0;\n  `,\n});\n","import React from 'react';\n\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { HorizontalGroup, Icon, Tag, Tooltip } from '@grafana/ui/src';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { useGetActiveUsersQuery } from '../../dashboard/api/publicDashboardApi';\n\nimport { DashboardsListModalButton } from './DashboardsListModalButton';\nimport { DeleteUserModalButton } from './DeleteUserModalButton';\n\nconst selectors = e2eSelectors.pages.UserListPage.publicDashboards;\n\nexport const UserListPublicDashboardPage = () => {\n  const { data: users, isLoading } = useGetActiveUsersQuery();\n\n  return (\n    <Page.Contents isLoading={isLoading}>\n      <table className=\"filter-table form-inline\" data-testid={selectors.container}>\n        <thead>\n          <tr>\n            <th>Email</th>\n            <th>\n              <span>Activated </span>\n              <Tooltip placement=\"top\" content={'Earliest time user has been an active user to a dashboard'}>\n                <Icon name=\"question-circle\" />\n              </Tooltip>\n            </th>\n            <th>Origin</th>\n            <th>Role</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {users?.map((user) => (\n            <tr key={user.email}>\n              <td className=\"max-width-10\">\n                <span className=\"ellipsis\" title={user.email}>\n                  {user.email}\n                </span>\n              </td>\n              <td className=\"max-width-10\">{user.firstSeenAtAge}</td>\n              <td className=\"max-width-10\">\n                <HorizontalGroup spacing=\"sm\">\n                  <span>{user.totalDashboards} dashboard(s)</span>\n                  <DashboardsListModalButton email={user.email} />\n                </HorizontalGroup>\n              </td>\n              <td className=\"max-width-10\">\n                <Tag name=\"Viewer\" colorIndex={19} />\n              </td>\n              <td className=\"text-right\">\n                <DeleteUserModalButton user={user} />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Page.Contents>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { config, featureEnabled } from '@grafana/runtime';\nimport { useStyles2, TabsBar, Tab } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { Page } from '../../core/components/Page/Page';\nimport { AccessControlAction } from '../../types';\nimport { UsersListPageContent } from '../users/UsersListPage';\n\nimport { UserListAdminPageContent } from './UserListAdminPage';\nimport { UserListPublicDashboardPage } from './UserListPublicDashboardPage/UserListPublicDashboardPage';\n\nenum TabView {\n  ADMIN = 'admin',\n  ORG = 'org',\n  PUBLIC_DASHBOARDS = 'public-dashboards',\n}\n\nconst selectors = e2eSelectors.pages.UserListPage;\n\nconst PublicDashboardsTab = ({ view, setView }: { view: TabView | null; setView: (v: TabView | null) => void }) => (\n  <Tab\n    label=\"Public dashboard users\"\n    active={view === TabView.PUBLIC_DASHBOARDS}\n    onChangeTab={() => setView(TabView.PUBLIC_DASHBOARDS)}\n    data-testid={selectors.tabs.publicDashboardsUsers}\n  />\n);\n\nconst TAB_PAGE_MAP: Record<TabView, React.ReactElement> = {\n  [TabView.ADMIN]: <UserListAdminPageContent />,\n  [TabView.ORG]: <UsersListPageContent />,\n  [TabView.PUBLIC_DASHBOARDS]: <UserListPublicDashboardPage />,\n};\n\nexport default function UserListPage() {\n  const styles = useStyles2(getStyles);\n\n  const hasAccessToAdminUsers = contextSrv.hasAccess(AccessControlAction.UsersRead, contextSrv.isGrafanaAdmin);\n  const hasAccessToOrgUsers = contextSrv.hasPermission(AccessControlAction.OrgUsersRead);\n  const hasEmailSharingEnabled =\n    Boolean(config.featureToggles.publicDashboards) &&\n    Boolean(config.featureToggles.publicDashboardsEmailSharing) &&\n    featureEnabled('publicDashboardsEmailSharing');\n\n  const [view, setView] = useState(() => {\n    if (hasAccessToAdminUsers) {\n      return TabView.ADMIN;\n    } else if (hasAccessToOrgUsers) {\n      return TabView.ORG;\n    }\n    return null;\n  });\n\n  const showAdminAndOrgTabs = hasAccessToOrgUsers && hasAccessToAdminUsers;\n\n  return (\n    <Page navId={'global-users'}>\n      {showAdminAndOrgTabs ? (\n        <TabsBar className={styles.tabsMargin}>\n          <Tab\n            label=\"All users\"\n            active={view === TabView.ADMIN}\n            onChangeTab={() => setView(TabView.ADMIN)}\n            data-testid={selectors.tabs.allUsers}\n          />\n          <Tab\n            label=\"Organization users\"\n            active={view === TabView.ORG}\n            onChangeTab={() => setView(TabView.ORG)}\n            data-testid={selectors.tabs.orgUsers}\n          />\n          {hasEmailSharingEnabled && <PublicDashboardsTab view={view} setView={setView} />}\n        </TabsBar>\n      ) : (\n        hasEmailSharingEnabled && (\n          <TabsBar className={styles.tabsMargin}>\n            <Tab\n              label=\"Users\"\n              active={view === TabView.ORG}\n              onChangeTab={() => setView(TabView.ORG)}\n              data-testid={selectors.tabs.users}\n            />\n            <PublicDashboardsTab view={view} setView={setView} />\n          </TabsBar>\n        )\n      )}\n      {view ? TAB_PAGE_MAP[view] : <UsersListPageContent />}\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tabsMargin: css({\n    marginBottom: theme.spacing(3),\n  }),\n});\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Button, ClipboardButton } from '@grafana/ui';\nimport { Invitee } from 'app/types';\n\nimport { revokeInvite } from './state/actions';\n\nconst mapDispatchToProps = {\n  revokeInvite,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  invitee: Invitee;\n}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nclass InviteeRow extends PureComponent<Props> {\n  render() {\n    const { invitee, revokeInvite } = this.props;\n    return (\n      <tr>\n        <td>{invitee.email}</td>\n        <td>{invitee.name}</td>\n        <td className=\"text-right\">\n          <ClipboardButton icon=\"copy\" variant=\"secondary\" size=\"sm\" getText={() => invitee.url}>\n            Copy Invite\n          </ClipboardButton>\n          &nbsp;\n        </td>\n        <td>\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            icon=\"times\"\n            onClick={() => revokeInvite(invitee.code)}\n            aria-label=\"Revoke Invite\"\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(InviteeRow);\n","import React, { PureComponent } from 'react';\n\nimport { Invitee } from 'app/types';\n\nimport InviteeRow from './InviteeRow';\n\nexport interface Props {\n  invitees: Invitee[];\n}\n\nexport default class InviteesTable extends PureComponent<Props> {\n  render() {\n    const { invitees } = this.props;\n\n    return (\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>Email</th>\n            <th>Name</th>\n            <th />\n            <th style={{ width: '34px' }} />\n          </tr>\n        </thead>\n        <tbody data-testid=\"InviteesTable-body\">\n          {invitees.map((invitee, index) => {\n            return <InviteeRow key={`${invitee.id}-${index}`} invitee={invitee} />;\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { selectors } from './reducers';\n\nexport const { selectAll, selectById, selectTotal } = selectors;\n\nconst selectQuery = (_: any, query: string) => query;\nexport const selectInvitesMatchingQuery = createSelector([selectAll, selectQuery], (invites, searchQuery) => {\n  const regex = new RegExp(searchQuery, 'i');\n  const matches = invites.filter((invite) => regex.test(invite.name) || regex.test(invite.email));\n  return matches;\n});\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { OrgUser } from 'app/types';\n\nimport { ThunkResult } from '../../../types';\n\nimport { usersLoaded, pageChanged, usersFetchBegin, usersFetchEnd, searchQueryChanged } from './reducers';\n\nexport function loadUsers(): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      const { perPage, page, searchQuery } = getState().users;\n      const users = await getBackendSrv().get(\n        `/api/org/users/search`,\n        accessControlQueryParam({ perpage: perPage, page, query: searchQuery })\n      );\n      dispatch(usersLoaded(users));\n    } catch (error) {\n      usersFetchEnd();\n    }\n  };\n}\n\nconst fetchUsersWithDebounce = debounce((dispatch) => dispatch(loadUsers()), 300);\n\nexport function updateUser(user: OrgUser): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`/api/org/users/${user.userId}`, { role: user.role });\n    dispatch(loadUsers());\n  };\n}\n\nexport function removeUser(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/org/users/${userId}`);\n    dispatch(loadUsers());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(usersFetchBegin());\n    dispatch(pageChanged(page));\n    dispatch(loadUsers());\n  };\n}\n\nexport function changeSearchQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(usersFetchBegin());\n    dispatch(searchQueryChanged(query));\n    fetchUsersWithDebounce(dispatch);\n  };\n}\n","import { UsersState } from 'app/types';\n\nexport const getUsers = (state: UsersState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.users.filter((user) => {\n    return regex.test(user.login) || regex.test(user.email) || regex.test(user.name);\n  });\n};\n\nexport const getUsersSearchQuery = (state: UsersState) => state.searchQuery;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { RadioButtonGroup, LinkButton, FilterInput } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport { selectTotal } from '../invites/state/selectors';\n\nimport { changeSearchQuery } from './state/actions';\nimport { getUsersSearchQuery } from './state/selectors';\n\nexport interface OwnProps {\n  showInvites: boolean;\n  onShowInvites: () => void;\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    searchQuery: getUsersSearchQuery(state.users),\n    pendingInvitesCount: selectTotal(state.invites),\n    externalUserMngLinkName: state.users.externalUserMngLinkName,\n    externalUserMngLinkUrl: state.users.externalUserMngLinkUrl,\n    canInvite: state.users.canInvite,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeSearchQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const UsersActionBarUnconnected = ({\n  canInvite,\n  externalUserMngLinkName,\n  externalUserMngLinkUrl,\n  searchQuery,\n  pendingInvitesCount,\n  changeSearchQuery,\n  onShowInvites,\n  showInvites,\n}: Props): JSX.Element => {\n  const options = [\n    { label: 'Users', value: 'users' },\n    { label: `Pending Invites (${pendingInvitesCount})`, value: 'invites' },\n  ];\n  const canAddToOrg: boolean = contextSrv.hasAccess(AccessControlAction.OrgUsersAdd, canInvite);\n  // Show invite button in the following cases:\n  // 1) the instance is not a hosted Grafana instance (!config.externalUserMngInfo)\n  // 2) new basic auth users can be created for this instance (!config.disableLoginForm).\n  const showInviteButton: boolean = canAddToOrg && !(config.disableLoginForm && config.externalUserMngInfo);\n\n  return (\n    <div className=\"page-action-bar\" data-testid=\"users-action-bar\">\n      <div className=\"gf-form gf-form--grow\">\n        <FilterInput\n          value={searchQuery}\n          onChange={changeSearchQuery}\n          placeholder=\"Search user by login, email or name\"\n        />\n      </div>\n      {pendingInvitesCount > 0 && (\n        <div style={{ marginLeft: '1rem' }}>\n          <RadioButtonGroup value={showInvites ? 'invites' : 'users'} options={options} onChange={onShowInvites} />\n        </div>\n      )}\n      {showInviteButton && <LinkButton href=\"org/users/invite\">Invite</LinkButton>}\n      {externalUserMngLinkUrl && (\n        <LinkButton href={externalUserMngLinkUrl} target=\"_blank\" rel=\"noopener\">\n          {externalUserMngLinkName}\n        </LinkButton>\n      )}\n    </div>\n  );\n};\n\nexport const UsersActionBar = connector(UsersActionBarUnconnected);\n","import React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { renderMarkdown } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { HorizontalGroup, Pagination, VerticalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { OrgUser, OrgRole, StoreState } from 'app/types';\n\nimport InviteesTable from '../invites/InviteesTable';\nimport { fetchInvitees } from '../invites/state/actions';\nimport { selectInvitesMatchingQuery } from '../invites/state/selectors';\n\nimport { UsersActionBar } from './UsersActionBar';\nimport { UsersTable } from './UsersTable';\nimport { loadUsers, removeUser, updateUser, changePage } from './state/actions';\nimport { getUsers, getUsersSearchQuery } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  const searchQuery = getUsersSearchQuery(state.users);\n  return {\n    users: getUsers(state.users),\n    searchQuery: getUsersSearchQuery(state.users),\n    page: state.users.page,\n    totalPages: state.users.totalPages,\n    perPage: state.users.perPage,\n    invitees: selectInvitesMatchingQuery(state.invites, searchQuery),\n    externalUserMngInfo: state.users.externalUserMngInfo,\n    isLoading: state.users.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUsers,\n  fetchInvitees,\n  changePage,\n  updateUser,\n  removeUser,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector>;\n\nexport interface State {\n  showInvites: boolean;\n}\n\nconst selectors = e2eSelectors.pages.UserListPage.UsersListPage;\n\nexport const UsersListPageUnconnected = ({\n  users,\n  page,\n  totalPages,\n  invitees,\n  externalUserMngInfo,\n  isLoading,\n  loadUsers,\n  fetchInvitees,\n  changePage,\n  updateUser,\n  removeUser,\n}: Props): JSX.Element => {\n  const [showInvites, setShowInvites] = useState(false);\n  const externalUserMngInfoHtml = externalUserMngInfo ? renderMarkdown(externalUserMngInfo) : '';\n\n  useEffect(() => {\n    loadUsers();\n    fetchInvitees();\n  }, [fetchInvitees, loadUsers]);\n\n  const onRoleChange = (role: OrgRole, user: OrgUser) => {\n    updateUser({ ...user, role: role });\n  };\n\n  const onShowInvites = () => {\n    setShowInvites(!showInvites);\n  };\n\n  const renderTable = () => {\n    if (showInvites) {\n      return <InviteesTable invitees={invitees} />;\n    } else {\n      return (\n        <VerticalGroup spacing=\"md\" data-testid={selectors.container}>\n          <UsersTable\n            users={users}\n            orgId={contextSrv.user.orgId}\n            onRoleChange={(role, user) => onRoleChange(role, user)}\n            onRemoveUser={(user) => removeUser(user.userId)}\n          />\n          <HorizontalGroup justify=\"flex-end\">\n            <Pagination\n              onNavigate={changePage}\n              currentPage={page}\n              numberOfPages={totalPages}\n              hideWhenSinglePage={true}\n            />\n          </HorizontalGroup>\n        </VerticalGroup>\n      );\n    }\n  };\n\n  return (\n    <Page.Contents isLoading={!isLoading}>\n      <UsersActionBar onShowInvites={onShowInvites} showInvites={showInvites} />\n      {externalUserMngInfoHtml && (\n        <div className=\"grafana-info-box\" dangerouslySetInnerHTML={{ __html: externalUserMngInfoHtml }} />\n      )}\n      {isLoading && renderTable()}\n    </Page.Contents>\n  );\n};\n\nexport const UsersListPageContent = connector(UsersListPageUnconnected);\n\nexport default function UsersListPage() {\n  return (\n    <Page navId=\"users\">\n      <UsersListPageContent />\n    </Page>\n  );\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { OrgRole } from '@grafana/data';\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgUser, Role } from 'app/types';\n\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\n\nexport interface Props {\n  users: OrgUser[];\n  orgId?: number;\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n}\n\nexport const UsersTable = ({ users, orgId, onRoleChange, onRemoveUser }: Props) => {\n  const [userToRemove, setUserToRemove] = useState<OrgUser | null>(null);\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(orgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options');\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [orgId]);\n\n  return (\n    <>\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th />\n            <th>Login</th>\n            <th>Email</th>\n            <th>Name</th>\n            <th>Seen</th>\n            <th>Role</th>\n            <th style={{ width: '34px' }} />\n            <th>Origin</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {users.map((user, index) => {\n            let basicRoleDisabled = !contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersWrite, user);\n            if (config.featureToggles.onlyExternalOrgRoleSync) {\n              const isUserSynced = user?.isExternallySynced;\n              basicRoleDisabled = isUserSynced || basicRoleDisabled;\n            }\n            return (\n              <tr key={`${user.userId}-${index}`}>\n                <td className=\"width-2 text-center\">\n                  <img className=\"filter-table__avatar\" src={user.avatarUrl} alt=\"User avatar\" />\n                </td>\n                <td className=\"max-width-6\">\n                  <span className=\"ellipsis\" title={user.login}>\n                    {user.login}\n                  </span>\n                </td>\n\n                <td className=\"max-width-5\">\n                  <span className=\"ellipsis\" title={user.email}>\n                    {user.email}\n                  </span>\n                </td>\n                <td className=\"max-width-5\">\n                  <span className=\"ellipsis\" title={user.name}>\n                    {user.name}\n                  </span>\n                </td>\n                <td className=\"width-1\">{user.lastSeenAtAge}</td>\n\n                <td className=\"width-8\">\n                  {contextSrv.licensedAccessControlEnabled() ? (\n                    <UserRolePicker\n                      userId={user.userId}\n                      orgId={orgId}\n                      roleOptions={roleOptions}\n                      basicRole={user.role}\n                      onBasicRoleChange={(newRole) => onRoleChange(newRole, user)}\n                      basicRoleDisabled={basicRoleDisabled}\n                    />\n                  ) : (\n                    <OrgRolePicker\n                      aria-label=\"Role\"\n                      value={user.role}\n                      disabled={basicRoleDisabled}\n                      onChange={(newRole) => onRoleChange(newRole, user)}\n                    />\n                  )}\n                </td>\n\n                <td className=\"width-1 text-center\">\n                  {user.isDisabled && <span className=\"label label-tag label-tag--gray\">Disabled</span>}\n                </td>\n\n                <td className=\"width-1\">\n                  {Array.isArray(user.authLabels) && user.authLabels.length > 0 && (\n                    <TagBadge label={user.authLabels[0]} removeIcon={false} count={0} />\n                  )}\n                </td>\n\n                {contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersRemove, user) && (\n                  <td className=\"text-right\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => {\n                        setUserToRemove(user);\n                      }}\n                      icon=\"times\"\n                      aria-label=\"Delete user\"\n                    />\n                  </td>\n                )}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {Boolean(userToRemove) && (\n        <ConfirmModal\n          body={`Are you sure you want to delete user ${userToRemove?.login}?`}\n          confirmText=\"Delete\"\n          title=\"Delete\"\n          onDismiss={() => {\n            setUserToRemove(null);\n          }}\n          isOpen={true}\n          onConfirm={() => {\n            if (!userToRemove) {\n              return;\n            }\n            onRemoveUser(userToRemove);\n            setUserToRemove(null);\n          }}\n        />\n      )}\n    </>\n  );\n};\n"],"names":["DashboardsListModal","email","onDismiss","styles","getStyles","dashboards","isLoading","Modal","LoadingPlaceholder","dash","DashboardsListModalButton","showModal","hideModal","Button","theme","DeleteUserModal","user","DeleteUserModalButton","UserListPublicDashboardPage","users","Page","Tooltip","Icon","Tag","TabView","PublicDashboardsTab","view","setView","Tab","TAB_PAGE_MAP","UserListAdminPage","UsersListPage","UserListPage","hasAccessToAdminUsers","hasAccessToOrgUsers","hasEmailSharingEnabled","config","showAdminAndOrgTabs","TabsBar","mapDispatchToProps","connector","InviteeRow","invitee","revokeInvite","ClipboardButton","InviteesTable","invitees","index","selectAll","selectById","selectTotal","selectQuery","_","query","selectInvitesMatchingQuery","invites","searchQuery","regex","invite","loadUsers","dispatch","getState","perPage","page","accessControl","fetchUsersWithDebounce","updateUser","removeUser","userId","changePage","changeSearchQuery","getUsers","state","getUsersSearchQuery","mapStateToProps","UsersActionBar","canInvite","externalUserMngLinkName","externalUserMngLinkUrl","pendingInvitesCount","onShowInvites","showInvites","options","showInviteButton","FilterInput","RadioButtonGroup","UsersListPageUnconnected","totalPages","externalUserMngInfo","fetchInvitees","setShowInvites","externalUserMngInfoHtml","onRoleChange","role","renderTable","UsersTable","Pagination","UsersListPageContent","orgId","onRemoveUser","userToRemove","setUserToRemove","roleOptions","setRoleOptions","fetchOptions","basicRoleDisabled","newRole"],"sourceRoot":""}