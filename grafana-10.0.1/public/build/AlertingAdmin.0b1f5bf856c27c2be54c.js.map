{"version":3,"file":"AlertingAdmin.0b1f5bf856c27c2be54c.js","mappings":"sXAoBO,MAAMA,EAAe,CAAC,CAC3B,cAAAC,EACA,SAAAC,EACA,QAAAC,EACA,uBAAAC,EACA,0BAAAC,EACA,SAAAC,EACA,QAAAC,EACA,eAAAC,EACA,UAAAC,CACF,IAEI,gBAACC,EAAA,EAAI,CAAC,cAAAT,EAA8B,SAAAK,EAAoB,IAAKL,EAAc,YACxE,CAAC,CAAE,SAAAU,EAAU,OAAAC,CAAO,IACnB,gCACG,CAACV,GACA,gCACE,gBAACW,EAAA,GACC,SAAUV,EACV,MAAM,gBACN,QAAS,CAAC,CAACS,EAAO,WAClB,MAAOA,EAAO,YAAY,SAE1B,gBAACE,EAAA,GACE,GAAGH,EAAS,aAAc,CACzB,SAAU,CAAE,MAAO,GAAM,QAAS,WAAY,EAC9C,SAAW,GAAM,CACf,GAAI,CACF,YAAK,MAAM,CAAC,EACL,EACT,OAASI,EAAP,CACA,OAAOA,aAAa,MAAQA,EAAE,QAAU,eAC1C,CACF,CACF,CAAC,EACD,GAAG,gBACH,KAAM,GACR,CACF,EAEA,gBAAC,KAAe,KACd,gBAACC,EAAA,GAAM,CAAC,KAAK,SAAS,QAAQ,UAAU,SAAUb,CAAA,EAAS,oBAE3D,EACCI,GACC,gBAACS,EAAA,GAAM,CAAC,KAAK,SAAS,SAAUb,EAAS,QAAQ,cAAc,QAASI,CAAA,EAAS,qBAEjF,CAEJ,CACF,EAEDL,GACC,gBAACW,EAAA,EAAK,CAAC,MAAM,iBACX,gBAAC,OAAI,cAAY,mBAAmBZ,EAAc,UAAW,CAC/D,EAED,QAAQI,CAAyB,GAAKG,GAAkBC,GACvD,gBAACQ,EAAA,GACC,OAAQ,GACR,MAAM,mCACN,KAAM,gDACJb,IAA2B,KACvB,+BACA,QAAQA,kFAEd,YAAY,2BACZ,UAAWI,EACX,UAAAC,CAAA,CACF,CAEJ,CAEJ,EClEW,SAASS,EAA2B,CACjD,SAAAC,EACA,iBAAAC,EACA,cAAAnB,EACA,SAAAK,EACA,SAAAJ,EACA,QAAAC,CACF,EAAiD,CAC/C,KAAM,CAAE,oCAAAkB,EAAqC,+CAAAC,CAA+C,EAAIC,EAAA,EAE1FC,KAAS,MAAWC,CAAS,EAE7B,CAAE,YAAaC,EAAgB,UAAWC,CAAyB,EAAIN,EAAoC,EAE3G,CAACO,CAAmC,EAAIN,EAA+C,EAEvFO,KAAwB,WAAQ,IAAM,CAC1C,GAAI,CAACH,GAAgB,OACnB,MAAO,CAAC,EAGV,MAAMI,EAAiCJ,EAAe,IAAKK,GAAW,CACpE,MAAMC,EAAO,IAAI,KAAKD,EAAO,YAAa,EAC1C,MAAO,CACL,MAAOA,EAAO,aACV,eAAeC,EAAK,eAAe,SAAM,MAASA,CAAI,EAAE,OAAO,IAAI,EAAE,QAAQ,EAAI,SACjF,kBACJ,MAAOD,CACT,CACF,CAAC,EACD,OAAAZ,EAASW,EAAQ,CAAC,CAAC,EACZA,CACT,EAAG,CAACJ,EAAgBP,CAAQ,CAAC,EAEvBc,EAAe,SAAY,CAC/B,MAAMC,EAAKd,GAAkB,OAAO,GAChCc,IAAO,QAIXN,EAAoC,CAAE,GAAAM,CAAG,CAAC,CAC5C,EAEA,OACE,gCACG,CAACP,GAA4BD,GAAkBA,EAAe,OAAS,EACtE,gCACE,gBAAC,WAAI,mEAAiE,EAEtE,gBAAC,OAAI,UAAWF,EAAO,WACrB,gBAAC,KAAe,CAAC,MAAM,aAAa,QAAQ,MAC1C,gBAACW,EAAA,IACC,QAASN,EACT,MAAOT,EACP,SAAWgB,GAA2B,CACpCjB,EAASiB,CAAK,CAChB,EACF,EAEA,gBAACpB,EAAA,GAAM,CAAC,QAAQ,UAAU,SAAUb,EAAS,QAAS8B,CAAA,EAAc,iCAEpE,CACF,CACF,EAEA,gBAACjC,EAAA,CACC,cAAAC,EACA,SAAWoC,GAAW/B,EAAS+B,CAAM,EACrC,SAAAnC,EACA,QAAAC,EACA,uBAAwB,KAC1B,CACF,EACE,IACN,CAEJ,CACA,MAAMsB,EAAaa,IAA0B,CAC3C,UAAW;AAAA,kBACKA,EAAM,QAAQ,CAAC;AAAA,qBACZA,EAAM,QAAQ,CAAC;AAAA,GAEpC,GCnFe,SAASC,GAAkC,CACxD,MAAMC,KAAW,eAAY,EACvBC,KAAgB,KAA6B,cAAc,EAC3D,CAACrC,EAAwBsC,CAAyB,KAAIC,EAAA,GAA0BF,CAAa,EAE7F,CAACpC,EAA2BuC,CAA4B,KAAI,YAAS,EAAK,EAC1E,CAAE,QAASC,CAAW,KAAIC,EAAA,GAA4BC,GAAUA,EAAM,cAAc,EACpF,CAAE,QAASC,CAAS,KAAIF,EAAA,GAA4BC,GAAUA,EAAM,YAAY,EAEhF7C,EAAWE,KAAyB,MAA0CA,CAAsB,EAAI,GACxGoB,KAAS,MAAW,EAAS,EAE7ByB,KAAiBH,EAAA,GAA4BC,GAAUA,EAAM,SAAS,EAEtE,CAAC3B,EAAkB8B,CAAmB,KAAI,YAA0C,EAEpF,CACJ,OAAQnB,EACR,QAASoB,EACT,MAAOC,CACT,EAAKhD,GAA0B6C,EAAe7C,CAAsB,GAAM,QAE1E,aAAU,IAAM,CACVA,GACFoC,KAAS,MAA8BpC,CAAsB,CAAC,CAElE,EAAG,CAACA,EAAwBoC,CAAQ,CAAC,EAErC,MAAMa,EAAc,IAAM,CACpBjD,GACFoC,KAAS,MAA+BpC,CAAsB,CAAC,EAEjEwC,EAA6B,EAAK,CACpC,EAEM3C,MAAgB,WACpB,KAAmB,CACjB,WAAY8B,EAAS,KAAK,UAAUA,EAAQ,KAAM,CAAC,EAAI,EACzD,GACA,CAACA,CAAM,CACT,EAEMuB,MAAqB,WACzB,KAAmB,CACjB,WAAYlC,EAAmB,KAAK,UAAUA,EAAiB,MAAO,KAAM,CAAC,EAAI,EACnF,GACA,CAACA,CAAgB,CACnB,EAEMjB,EAAU0C,GAAcM,GAAmBH,EAE3C1C,EAAY+B,GAAuB,CACnCjC,GAA0B2B,GAC5BS,KACE,MAA+B,CAC7B,UAAW,KAAK,MAAMH,EAAO,UAAU,EACvC,UAAWN,EACX,uBAAA3B,EACA,eAAgB,sCAChB,QAAS,EACX,CAAC,CACH,CAEJ,EAEA,OACE,gBAAC,OAAI,UAAWoB,EAAO,WACrB,gBAAC+B,EAAA,GACC,QAASnD,EACT,SAAUsC,EACV,YAAaD,CAAA,CACf,EACCW,GAAgB,CAACjD,GAChB,gCACE,gBAACqD,EAAA,GACC,SAAS,QACT,MAAM,qFAELJ,EAAa,SAAW,gBAC3B,EAEChD,IAA2B,MAC1B,gBAACc,EAAA,CACC,SAAUgC,EACV,iBAAA9B,EACA,cAAekC,GACf,SAAU,GACV,QAAAnD,EACA,SAAAG,CAAA,CACF,CAEJ,EAEDuC,GAAczC,IAA2B,MACxC,gBAACoD,EAAA,EAAK,CAAC,SAAS,OAAO,MAAM,wCAAuC,0BAEpE,EAEDpD,GAA0B2B,GACzB,gBAAC/B,EAAA,CACC,cAAAC,GACA,SAAWoC,GAAW/B,EAAS+B,CAAM,EACrC,SAAAnC,EACA,QAAAC,EACA,uBAAAC,EACA,0BAAAC,EACA,QAAS,IAAMuC,EAA6B,EAAI,EAChD,eAAgBS,EAChB,UAAW,IAAMT,EAA6B,EAAK,EACrD,CAEJ,CAEJ,CAEA,MAAM,GAAaN,IAA0B,CAC3C,UAAW;AAAA,qBACQA,EAAM,QAAQ,CAAC;AAAA,GAEpC,G,iDCjIO,SAASmB,IAA6D,CAC3E,KAAM,CAAE,iCAAAC,CAAiC,EAAInC,EAAA,EACvC,CAAE,YAAaoC,CAAwB,EAAID,EAAiC,EAE5EE,KAA0B,MAA2B,EAAE,OAAQC,GAAOA,EAAG,SAAS,0BAA0B,EAE5GC,KAA0B,eAAaf,MAC3C,SACEA,EAAM,YAAY,YAAY,OAAQc,GAAOA,EAAG,OAAS,cAAc,EACtEA,GAAOA,EAAG,GACb,CACF,EAEME,KAAgB,WAAQJ,GAAyB,qBAAuBK,GAAMA,EAAE,GAAG,EACnFC,KAAe,WAAQN,GAAyB,oBAAsBK,GAAMA,EAAE,GAAG,EAEvF,OAAOJ,EAAwB,IAA2BM,GAAS,CACjE,MAAMC,EAAaL,EAAwBI,EAAK,GAAG,EAEnD,GAAI,CAACC,EACH,MAAO,CACL,WAAYD,EACZ,OAAQ,SACV,EAIF,MAAME,EAAc,GADNC,GAA6BF,CAAU,kBAG/CG,EAAsBP,EAAcK,CAAW,GAAK,EACpDG,EAAqBN,EAAaG,CAAW,GAAK,EAElDI,EAAYF,EAAsB,EAClCG,EAAWF,EAAqB,EAKhCG,EAAuBJ,EAAsBC,EAAqB,EAElEI,EAASH,EAAY,UAAYC,EAAW,SAAW,UAE7D,MAAO,CACL,WAAYP,EACZ,IAAKC,EAAW,IAChB,OAAAQ,EACA,mBAAoBD,CACtB,CACF,CAAC,CACH,CAEA,SAASL,GAA2DF,EAAmC,CAErG,OADoB,IAAI,OAAO,WAAW,EAAE,KAAKA,EAAW,GAAG,EAKxDA,EAAW,IAHT,UAAUA,EAAW,KAIhC,C,0EC3DO,SAASS,GAAgC,CAAE,cAAAC,EAAe,SAAAC,CAAS,EAAyC,CACjH,MAAMtD,KAAS,MAAW,CAAS,EAEnC,OACE,gCACE,gBAAC,UAAG,gDAA8C,EAClD,gBAAC,OAAI,UAAWA,EAAO,OAAO,4IAEC,gBAAC,SAAG,EAAE,8FAErC,EACCqD,EAAc,SAAW,GACxB,gBAACE,GAAA,GACC,QACE,gBAAC,WAAI,wFACkF,gBAAC,SAAG,EAAE,yFAE7F,EAEF,oBAAqB,gBAAC,KAAU,CAAC,KAAK,gBAAe,oBAAkB,EACvE,UAAWvD,EAAO,cACpB,EAEDqD,EAAc,OAAS,GACtB,gBAAC,OAAI,UAAWrD,EAAO,YACpBqD,EAAc,IAAKG,GAClB,gBAACC,GAAA,CAAyB,IAAKD,EAAG,WAAW,IAAK,aAAcA,EAAI,SAAAF,CAAA,CAAoB,CACzF,CACH,CAEJ,CAEJ,CAOO,SAASG,GAAyB,CAAE,aAAAC,EAAc,SAAAJ,CAAS,EAAkC,CAClG,MAAMtD,KAAS,MAAW,CAAS,EAE7B,CAAE,WAAA2D,EAAY,OAAAR,EAAQ,mBAAAS,EAAoB,IAAAC,CAAI,EAAIH,EAExD,OACE,gBAACI,EAAA,EAAI,KACH,gBAACA,EAAA,WAAa,UAAW9D,EAAO,iBAC7B2D,EAAW,KAAM,IACjBC,GACC,gBAACG,GAAA,EAAO,CAAC,QAAQ,yFACf,gBAACC,GAAA,EAAI,CAAC,KAAK,uBAAuB,KAAK,KAAK,UAAWhE,EAAO,oBAAqB,CACrF,CAEJ,EACA,gBAAC8D,EAAA,cACC,gBAAC,OACC,IAAI,0DACJ,IAAI,GACJ,OAAO,OACP,MAAM,OACN,MAAO,CAAE,UAAW,SAAU,EAChC,CACF,EACA,gBAACA,EAAA,YACER,EACC,gBAACW,EAAA,GACC,KAAK,WACL,MAAM,MACN,QAAQ,qIACV,EAEA,gBAACA,EAAA,GACC,QAAM,cAAWd,CAAM,EACvB,MAAOA,IAAW,UAAY,MAAQA,IAAW,SAAW,QAAU,SACxE,CAEJ,EACA,gBAACW,EAAA,YAAWD,CAAI,EAChB,gBAACC,EAAA,eACC,gBAAC,KAAU,CAAC,QAAM,OAAmBH,CAAU,EAAG,KAAK,KAAK,QAAQ,aAAY,kBAEhF,CACF,CACF,CAEJ,CAEO,MAAM,EAAa7C,IAA0B,CAClD,MAAO;AAAA,iBACQA,EAAM,WAAW,UAAU;AAAA,mBACzBA,EAAM,WAAW,UAAU;AAAA,aACjCA,EAAM,OAAO,KAAK;AAAA,IAE7B,gBAAiB;AAAA;AAAA,IAGjB,oBAAqB;AAAA,cACTA,EAAM,QAAQ,EAAG,CAAC;AAAA,YACpBA,EAAM,OAAO,QAAQ;AAAA,IAE/B,WAAY;AAAA;AAAA,WAEHA,EAAM,QAAQ,CAAC;AAAA,eACXA,EAAM,QAAQ,EAAG,CAAC;AAAA,IAE/B,cAAe;AAAA,cACHA,EAAM,QAAQ,EAAG,CAAC;AAAA,GAEhC,GC7GMoD,GAAkE,CACtE,CAAE,MAAO,cAA6B,MAAO,eAAgB,EAC7D,CAAE,MAAO,cAA6B,MAAO,eAAgB,EAC7D,CAAE,MAAO,SAAwB,MAAO,4BAA6B,CACvE,EAEaC,GAAwB,IAAM,CACzC,MAAMnE,KAAS,MAAW,EAAS,EAC7BgB,KAAW,eAAY,EAEvBoB,EAA0BH,GAAmC,EAE7D,CACJ,2CAAAmC,EACA,sCAAAC,EACA,iCAAAnC,CACF,EAAInC,EAAA,EAEE,CAACuE,CAAyB,EAAIF,EAA2C,EACzE,CAAE,YAAaG,CAA2B,EAAIF,EAAsC,EAG1FnC,EAAiC,OAAW,CAAE,gBAAiB,GAAK,CAAC,EAErE,MAAMsC,EAAsBD,GAA4B,uBAExD,aAAU,IAAM,CACdvD,KAAS,OAAgB,CAAC,CAC5B,EAAG,CAACA,CAAQ,CAAC,EAEb,MAAMyD,EAA8BD,GAA4C,CAC9EF,EAA0B,CAAE,oBAAAE,CAAoB,CAAC,CACnD,EAEA,OACE,gBAAC,WACC,gBAAC,UAAG,wBAAsB,EAC1B,gBAACxC,EAAA,EAAK,CAAC,MAAM,gCAAgC,SAAS,QAAO,4DAE3D,gBAAC,SAAG,EAAE,oGAEN,gBAAC,SAAG,EAAE,mDAER,EAEA,gBAAC,OAAI,UAAWhC,EAAO,UACrB,gBAACX,EAAA,GACC,MAAM,iBACN,YAAY,+LAEZ,gBAACqF,GAAA,GACC,QAASR,GACT,MAAOM,EACP,SAAW5D,GAAU6D,EAA2B7D,CAAM,EACxD,CACF,CACF,EAEA,gBAACwC,GAAA,CACC,cAAehB,EACf,SAAUoC,IAAwB,aAAmB,CACvD,CACF,CAEJ,EAEa,GAAa1D,IAA0B,CAClD,IAAK;AAAA,oBACaA,EAAM,QAAQ,CAAC;AAAA,IAEjC,QAAS;AAAA,kBACOA,EAAM,QAAQ,CAAC;AAAA;AAAA;AAAA,IAI/B,MAAO;AAAA,qBACYA,EAAM,QAAQ,CAAC;AAAA,IAElC,SAAU;AAAA,qBACSA,EAAM,QAAQ,CAAC;AAAA,GAEpC,GCtFe,SAAS6D,IAAqB,CAC3C,MAAM1D,KAAgB,KAA6B,cAAc,EAC3D,CAACrC,CAAsB,KAAIuC,EAAA,GAA0BF,CAAa,EAElE2D,EAAsBhG,IAA2B,KAEvD,OACE,gBAACiG,EAAA,EAAmB,CAAC,OAAO,kBAC1B,gBAAC9D,EAAkB,CAAC,UAAQ,0BAA2B,GACtD6D,GAAuB,gBAACT,GAAqB,CAAC,UAAQ,6BAA8B,EACvF,CAEJ,C,8FCbA,SAASW,EAA2BC,EAAkD,CACpF,SAAO,eACJC,GACqCD,EAAuB,IAAKvB,GAAOA,EAAG,IAAI,EAC3C,SAASwB,CAAgB,EAE9D,CAACD,CAAsB,CACzB,CACF,CAMO,SAAS5D,EACd4D,EACgE,CAChE,KAAM,CAACE,EAAaC,CAAiB,KAAI,KAAe,EAClDC,EAA0BL,EAA2BC,CAAsB,EAE3EK,KAAS,eACZxG,GAAmC,CAC7BuG,EAAwBvG,CAAsB,IAG/CA,IAA2B,MAC7B,WAAa,IAAmC,EAChDsG,EAAkB,CAAE,CAAC,IAA2B,EAAG,IAAK,CAAC,IAEzD,QAAU,KAAqCtG,CAAsB,EACrEsG,EAAkB,CAAE,CAAC,IAA2B,EAAGtG,CAAuB,CAAC,GAE/E,EACA,CAACsG,EAAmBC,CAAuB,CAC7C,EAEME,EAAcJ,EAAY,IAA2B,EAE3D,GAAII,GAAe,OAAOA,GAAgB,SACxC,OAAIF,EAAwBE,CAAW,EAC9B,CAACA,EAAaD,CAAM,EAGpB,CAAC,OAAWA,CAAM,EAI7B,MAAME,EAAc,QAAU,IAAmC,EACjE,OAAIA,GAAe,OAAOA,GAAgB,UAAYH,EAAwBG,CAAW,GACvFF,EAAOE,CAAW,EACX,CAACA,EAAaF,CAAM,GAGzBD,EAAwB,IAAyB,EAC5C,CAAC,KAA2BC,CAAM,EAGpC,CAAC,OAAWA,CAAM,CAC3B,C,6DC9DO,SAASG,EAA6BC,EAAyC,CACpF,SAAO,WAAQ,OAAM,MAAuCA,CAAU,EAAG,CAACA,CAAU,CAAC,CACvF,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/admin/ConfigEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/admin/AlertmanagerConfigSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/admin/AlertmanagerConfig.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useExternalAmSelector.ts","webpack://grafana/./public/app/features/alerting/unified/components/admin/ExternalAlertmanagerDataSources.tsx","webpack://grafana/./public/app/features/alerting/unified/components/admin/ExternalAlertmanagers.tsx","webpack://grafana/./public/app/features/alerting/unified/Admin.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts"],"sourcesContent":["import React from 'react';\n\nimport { Button, ConfirmModal, Field, Form, HorizontalGroup, TextArea } from '@grafana/ui';\n\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { FormValues } from './AlertmanagerConfig';\n\ninterface ConfigEditorProps {\n  defaultValues: { configJSON: string };\n  readOnly: boolean;\n  loading: boolean;\n  alertManagerSourceName?: string;\n  onSubmit: (values: FormValues) => void;\n  showConfirmDeleteAMConfig?: boolean;\n  onReset?: () => void;\n  onConfirmReset?: () => void;\n  onDismiss?: () => void;\n}\n\nexport const ConfigEditor = ({\n  defaultValues,\n  readOnly,\n  loading,\n  alertManagerSourceName,\n  showConfirmDeleteAMConfig,\n  onSubmit,\n  onReset,\n  onConfirmReset,\n  onDismiss,\n}: ConfigEditorProps) => {\n  return (\n    <Form defaultValues={defaultValues} onSubmit={onSubmit} key={defaultValues.configJSON}>\n      {({ register, errors }) => (\n        <>\n          {!readOnly && (\n            <>\n              <Field\n                disabled={loading}\n                label=\"Configuration\"\n                invalid={!!errors.configJSON}\n                error={errors.configJSON?.message}\n              >\n                <TextArea\n                  {...register('configJSON', {\n                    required: { value: true, message: 'Required.' },\n                    validate: (v) => {\n                      try {\n                        JSON.parse(v);\n                        return true;\n                      } catch (e) {\n                        return e instanceof Error ? e.message : 'Invalid JSON.';\n                      }\n                    },\n                  })}\n                  id=\"configuration\"\n                  rows={25}\n                />\n              </Field>\n\n              <HorizontalGroup>\n                <Button type=\"submit\" variant=\"primary\" disabled={loading}>\n                  Save configuration\n                </Button>\n                {onReset && (\n                  <Button type=\"button\" disabled={loading} variant=\"destructive\" onClick={onReset}>\n                    Reset configuration\n                  </Button>\n                )}\n              </HorizontalGroup>\n            </>\n          )}\n          {readOnly && (\n            <Field label=\"Configuration\">\n              <pre data-testid=\"readonly-config\">{defaultValues.configJSON}</pre>\n            </Field>\n          )}\n          {Boolean(showConfirmDeleteAMConfig) && onConfirmReset && onDismiss && (\n            <ConfirmModal\n              isOpen={true}\n              title=\"Reset Alertmanager configuration\"\n              body={`Are you sure you want to reset configuration ${\n                alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME\n                  ? 'for the Grafana Alertmanager'\n                  : `for \"${alertManagerSourceName}\"`\n              }? Contact points and notification policies will be reset to their defaults.`}\n              confirmText=\"Yes, reset configuration\"\n              onConfirm={onConfirmReset}\n              onDismiss={onDismiss}\n            />\n          )}\n        </>\n      )}\n    </Form>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { dateTime, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Button, HorizontalGroup, Select, useStyles2 } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { FormValues } from './AlertmanagerConfig';\nimport { ConfigEditor } from './ConfigEditor';\n\nexport interface ValidAmConfigOption {\n  label?: string;\n  value?: AlertManagerCortexConfig;\n}\n\ninterface AlertmanagerConfigSelectorProps {\n  onChange: (selectedOption: ValidAmConfigOption) => void;\n  selectedAmConfig?: ValidAmConfigOption;\n  defaultValues: FormValues;\n  onSubmit: (values: FormValues, oldConfig?: AlertManagerCortexConfig) => void;\n  readOnly: boolean;\n  loading: boolean;\n}\n\nexport default function AlertmanagerConfigSelector({\n  onChange,\n  selectedAmConfig,\n  defaultValues,\n  onSubmit,\n  readOnly,\n  loading,\n}: AlertmanagerConfigSelectorProps): JSX.Element {\n  const { useGetValidAlertManagersConfigQuery, useResetAlertManagerConfigToOldVersionMutation } = alertmanagerApi;\n\n  const styles = useStyles2(getStyles);\n\n  const { currentData: validAmConfigs, isLoading: isFetchingValidAmConfigs } = useGetValidAlertManagersConfigQuery();\n\n  const [resetAlertManagerConfigToOldVersion] = useResetAlertManagerConfigToOldVersionMutation();\n\n  const validAmConfigsOptions = useMemo(() => {\n    if (!validAmConfigs?.length) {\n      return [];\n    }\n\n    const configs: ValidAmConfigOption[] = validAmConfigs.map((config) => {\n      const date = new Date(config.last_applied!);\n      return {\n        label: config.last_applied\n          ? `Config from ${date.toLocaleString()} (${dateTime(date).locale('en').fromNow(true)} ago)`\n          : 'Previous config',\n        value: config,\n      };\n    });\n    onChange(configs[0]);\n    return configs;\n  }, [validAmConfigs, onChange]);\n\n  const onResetClick = async () => {\n    const id = selectedAmConfig?.value?.id;\n    if (id === undefined) {\n      return;\n    }\n\n    resetAlertManagerConfigToOldVersion({ id });\n  };\n\n  return (\n    <>\n      {!isFetchingValidAmConfigs && validAmConfigs && validAmConfigs.length > 0 ? (\n        <>\n          <div>Select a previous working configuration until you fix this error:</div>\n\n          <div className={styles.container}>\n            <HorizontalGroup align=\"flex-start\" spacing=\"md\">\n              <Select\n                options={validAmConfigsOptions}\n                value={selectedAmConfig}\n                onChange={(value: SelectableValue) => {\n                  onChange(value);\n                }}\n              />\n\n              <Button variant=\"primary\" disabled={loading} onClick={onResetClick}>\n                Reset to selected configuration\n              </Button>\n            </HorizontalGroup>\n          </div>\n\n          <ConfigEditor\n            defaultValues={defaultValues}\n            onSubmit={(values) => onSubmit(values)}\n            readOnly={readOnly}\n            loading={loading}\n            alertManagerSourceName={GRAFANA_RULES_SOURCE_NAME}\n          />\n        </>\n      ) : null}\n    </>\n  );\n}\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    margin-top: ${theme.spacing(2)};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, useStyles2 } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\n\nimport { useAlertManagerSourceName } from '../../hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from '../../hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport {\n  deleteAlertManagerConfigAction,\n  fetchAlertManagerConfigAction,\n  updateAlertManagerConfigAction,\n} from '../../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME, isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { AlertManagerPicker } from '../AlertManagerPicker';\n\nimport AlertmanagerConfigSelector, { ValidAmConfigOption } from './AlertmanagerConfigSelector';\nimport { ConfigEditor } from './ConfigEditor';\n\nexport interface FormValues {\n  configJSON: string;\n}\n\nexport default function AlertmanagerConfig(): JSX.Element {\n  const dispatch = useDispatch();\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const [showConfirmDeleteAMConfig, setShowConfirmDeleteAMConfig] = useState(false);\n  const { loading: isDeleting } = useUnifiedAlertingSelector((state) => state.deleteAMConfig);\n  const { loading: isSaving } = useUnifiedAlertingSelector((state) => state.saveAMConfig);\n\n  const readOnly = alertManagerSourceName ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) : false;\n  const styles = useStyles2(getStyles);\n\n  const configRequests = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const [selectedAmConfig, setSelectedAmConfig] = useState<ValidAmConfigOption | undefined>();\n\n  const {\n    result: config,\n    loading: isLoadingConfig,\n    error: loadingError,\n  } = (alertManagerSourceName && configRequests[alertManagerSourceName]) || initialAsyncRequestState;\n\n  useEffect(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  const resetConfig = () => {\n    if (alertManagerSourceName) {\n      dispatch(deleteAlertManagerConfigAction(alertManagerSourceName));\n    }\n    setShowConfirmDeleteAMConfig(false);\n  };\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      configJSON: config ? JSON.stringify(config, null, 2) : '',\n    }),\n    [config]\n  );\n\n  const defaultValidValues = useMemo(\n    (): FormValues => ({\n      configJSON: selectedAmConfig ? JSON.stringify(selectedAmConfig.value, null, 2) : '',\n    }),\n    [selectedAmConfig]\n  );\n\n  const loading = isDeleting || isLoadingConfig || isSaving;\n\n  const onSubmit = (values: FormValues) => {\n    if (alertManagerSourceName && config) {\n      dispatch(\n        updateAlertManagerConfigAction({\n          newConfig: JSON.parse(values.configJSON),\n          oldConfig: config,\n          alertManagerSourceName,\n          successMessage: 'Alertmanager configuration updated.',\n          refetch: true,\n        })\n      );\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      {loadingError && !loading && (\n        <>\n          <Alert\n            severity=\"error\"\n            title=\"Your Alertmanager configuration is incorrect. These are the details of the error:\"\n          >\n            {loadingError.message || 'Unknown error.'}\n          </Alert>\n\n          {alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME && (\n            <AlertmanagerConfigSelector\n              onChange={setSelectedAmConfig}\n              selectedAmConfig={selectedAmConfig}\n              defaultValues={defaultValidValues}\n              readOnly={true}\n              loading={loading}\n              onSubmit={onSubmit}\n            />\n          )}\n        </>\n      )}\n      {isDeleting && alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME && (\n        <Alert severity=\"info\" title=\"Resetting Alertmanager configuration\">\n          It might take a while...\n        </Alert>\n      )}\n      {alertManagerSourceName && config && (\n        <ConfigEditor\n          defaultValues={defaultValues}\n          onSubmit={(values) => onSubmit(values)}\n          readOnly={readOnly}\n          loading={loading}\n          alertManagerSourceName={alertManagerSourceName}\n          showConfirmDeleteAMConfig={showConfirmDeleteAMConfig}\n          onReset={() => setShowConfirmDeleteAMConfig(true)}\n          onConfirmReset={resetConfig}\n          onDismiss={() => setShowConfirmDeleteAMConfig(false)}\n        />\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import { countBy, keyBy } from 'lodash';\n\nimport { DataSourceInstanceSettings, DataSourceJsonData, DataSourceSettings } from '@grafana/data';\nimport { AlertManagerDataSourceJsonData } from 'app/plugins/datasource/alertmanager/types';\nimport { useSelector } from 'app/types';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { getAlertManagerDataSources } from '../utils/datasource';\n\nexport interface ExternalDataSourceAM {\n  dataSource: DataSourceInstanceSettings<AlertManagerDataSourceJsonData>;\n  url?: string;\n  status: 'active' | 'pending' | 'dropped';\n  statusInconclusive?: boolean;\n}\n\nexport function useExternalDataSourceAlertmanagers(): ExternalDataSourceAM[] {\n  const { useGetExternalAlertmanagersQuery } = alertmanagerApi;\n  const { currentData: discoveredAlertmanagers } = useGetExternalAlertmanagersQuery();\n\n  const externalDsAlertManagers = getAlertManagerDataSources().filter((ds) => ds.jsonData.handleGrafanaManagedAlerts);\n\n  const alertmanagerDatasources = useSelector((state) =>\n    keyBy(\n      state.dataSources.dataSources.filter((ds) => ds.type === 'alertmanager'),\n      (ds) => ds.uid\n    )\n  );\n\n  const droppedAMUrls = countBy(discoveredAlertmanagers?.droppedAlertManagers, (x) => x.url);\n  const activeAMUrls = countBy(discoveredAlertmanagers?.activeAlertManagers, (x) => x.url);\n\n  return externalDsAlertManagers.map<ExternalDataSourceAM>((dsAm) => {\n    const dsSettings = alertmanagerDatasources[dsAm.uid];\n\n    if (!dsSettings) {\n      return {\n        dataSource: dsAm,\n        status: 'pending',\n      };\n    }\n\n    const amUrl = getDataSourceUrlWithProtocol(dsSettings);\n    const amStatusUrl = `${amUrl}/api/v2/alerts`;\n\n    const matchingDroppedUrls = droppedAMUrls[amStatusUrl] ?? 0;\n    const matchingActiveUrls = activeAMUrls[amStatusUrl] ?? 0;\n\n    const isDropped = matchingDroppedUrls > 0;\n    const isActive = matchingActiveUrls > 0;\n\n    // Multiple Alertmanagers of the same URL may exist (e.g. with different credentials)\n    // Alertmanager response only contains URLs, so in case of duplication, we are not able\n    // to distinguish which is which, resulting in an inconclusive status.\n    const isStatusInconclusive = matchingDroppedUrls + matchingActiveUrls > 1;\n\n    const status = isDropped ? 'dropped' : isActive ? 'active' : 'pending';\n\n    return {\n      dataSource: dsAm,\n      url: dsSettings.url,\n      status,\n      statusInconclusive: isStatusInconclusive,\n    };\n  });\n}\n\nfunction getDataSourceUrlWithProtocol<T extends DataSourceJsonData>(dsSettings: DataSourceSettings<T>) {\n  const hasProtocol = new RegExp('^[^:]*://').test(dsSettings.url);\n  if (!hasProtocol) {\n    return `http://${dsSettings.url}`; // Grafana append http protocol if there is no any\n  }\n\n  return dsSettings.url;\n}\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, CallToActionCard, Card, Icon, LinkButton, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { ExternalDataSourceAM } from '../../hooks/useExternalAmSelector';\nimport { makeDataSourceLink } from '../../utils/misc';\n\nexport interface ExternalAlertManagerDataSourcesProps {\n  alertmanagers: ExternalDataSourceAM[];\n  inactive: boolean;\n}\n\nexport function ExternalAlertmanagerDataSources({ alertmanagers, inactive }: ExternalAlertManagerDataSourcesProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <h5>Alertmanagers Receiving Grafana-managed alerts</h5>\n      <div className={styles.muted}>\n        Alertmanager data sources support a configuration setting that allows you to choose to send Grafana-managed\n        alerts to that Alertmanager. <br />\n        Below, you can see the list of all Alertmanager data sources that have this setting enabled.\n      </div>\n      {alertmanagers.length === 0 && (\n        <CallToActionCard\n          message={\n            <div>\n              There are no Alertmanager data sources configured to receive Grafana-managed alerts. <br />\n              You can change this by selecting Receive Grafana Alerts in a data source configuration.\n            </div>\n          }\n          callToActionElement={<LinkButton href=\"/datasources\">Go to data sources</LinkButton>}\n          className={styles.externalDsCTA}\n        />\n      )}\n      {alertmanagers.length > 0 && (\n        <div className={styles.externalDs}>\n          {alertmanagers.map((am) => (\n            <ExternalAMdataSourceCard key={am.dataSource.uid} alertmanager={am} inactive={inactive} />\n          ))}\n        </div>\n      )}\n    </>\n  );\n}\n\ninterface ExternalAMdataSourceCardProps {\n  alertmanager: ExternalDataSourceAM;\n  inactive: boolean;\n}\n\nexport function ExternalAMdataSourceCard({ alertmanager, inactive }: ExternalAMdataSourceCardProps) {\n  const styles = useStyles2(getStyles);\n\n  const { dataSource, status, statusInconclusive, url } = alertmanager;\n\n  return (\n    <Card>\n      <Card.Heading className={styles.externalHeading}>\n        {dataSource.name}{' '}\n        {statusInconclusive && (\n          <Tooltip content=\"Multiple Alertmanagers have the same URL configured. The state might be inconclusive.\">\n            <Icon name=\"exclamation-triangle\" size=\"md\" className={styles.externalWarningIcon} />\n          </Tooltip>\n        )}\n      </Card.Heading>\n      <Card.Figure>\n        <img\n          src=\"public/app/plugins/datasource/alertmanager/img/logo.svg\"\n          alt=\"\"\n          height=\"40px\"\n          width=\"40px\"\n          style={{ objectFit: 'contain' }}\n        />\n      </Card.Figure>\n      <Card.Tags>\n        {inactive ? (\n          <Badge\n            text=\"Inactive\"\n            color=\"red\"\n            tooltip=\"Grafana is configured to send alerts to the built-in internal Alertmanager only. External Alertmanagers do not receive any alerts.\"\n          />\n        ) : (\n          <Badge\n            text={capitalize(status)}\n            color={status === 'dropped' ? 'red' : status === 'active' ? 'green' : 'orange'}\n          />\n        )}\n      </Card.Tags>\n      <Card.Meta>{url}</Card.Meta>\n      <Card.Actions>\n        <LinkButton href={makeDataSourceLink(dataSource)} size=\"sm\" variant=\"secondary\">\n          Go to datasource\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  muted: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    line-height: ${theme.typography.bodySmall.lineHeight};\n    color: ${theme.colors.text.secondary};\n  `,\n  externalHeading: css`\n    justify-content: flex-start;\n  `,\n  externalWarningIcon: css`\n    margin: ${theme.spacing(0, 1)};\n    fill: ${theme.colors.warning.main};\n  `,\n  externalDs: css`\n    display: grid;\n    gap: ${theme.spacing(1)};\n    padding: ${theme.spacing(2, 0)};\n  `,\n  externalDsCTA: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Alert, Field, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { loadDataSources } from 'app/features/datasources/state/actions';\nimport { AlertmanagerChoice } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { useExternalDataSourceAlertmanagers } from '../../hooks/useExternalAmSelector';\n\nimport { ExternalAlertmanagerDataSources } from './ExternalAlertmanagerDataSources';\n\nconst alertmanagerChoices: Array<SelectableValue<AlertmanagerChoice>> = [\n  { value: AlertmanagerChoice.Internal, label: 'Only Internal' },\n  { value: AlertmanagerChoice.External, label: 'Only External' },\n  { value: AlertmanagerChoice.All, label: 'Both internal and external' },\n];\n\nexport const ExternalAlertmanagers = () => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n\n  const externalDsAlertManagers = useExternalDataSourceAlertmanagers();\n\n  const {\n    useSaveExternalAlertmanagersConfigMutation,\n    useGetExternalAlertmanagerConfigQuery,\n    useGetExternalAlertmanagersQuery,\n  } = alertmanagerApi;\n\n  const [saveExternalAlertManagers] = useSaveExternalAlertmanagersConfigMutation();\n  const { currentData: externalAlertmanagerConfig } = useGetExternalAlertmanagerConfigQuery();\n\n  // Just to refresh the status periodically\n  useGetExternalAlertmanagersQuery(undefined, { pollingInterval: 5000 });\n\n  const alertmanagersChoice = externalAlertmanagerConfig?.alertmanagersChoice;\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n\n  const onChangeAlertmanagerChoice = (alertmanagersChoice: AlertmanagerChoice) => {\n    saveExternalAlertManagers({ alertmanagersChoice });\n  };\n\n  return (\n    <div>\n      <h4>External Alertmanagers</h4>\n      <Alert title=\"External Alertmanager changes\" severity=\"info\">\n        The way you configure external Alertmanagers has changed.\n        <br />\n        You can now use configured Alertmanager data sources as receivers of your Grafana-managed alerts.\n        <br />\n        For more information, refer to our documentation.\n      </Alert>\n\n      <div className={styles.amChoice}>\n        <Field\n          label=\"Send alerts to\"\n          description=\"Configures how the Grafana alert rule evaluation engine Alertmanager handles your alerts. Internal (Grafana built-in Alertmanager), External (All Alertmanagers configured below), or both.\"\n        >\n          <RadioButtonGroup\n            options={alertmanagerChoices}\n            value={alertmanagersChoice}\n            onChange={(value) => onChangeAlertmanagerChoice(value!)}\n          />\n        </Field>\n      </div>\n\n      <ExternalAlertmanagerDataSources\n        alertmanagers={externalDsAlertManagers}\n        inactive={alertmanagersChoice === AlertmanagerChoice.Internal}\n      />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  url: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n  actions: css`\n    margin-top: ${theme.spacing(2)};\n    display: flex;\n    justify-content: flex-end;\n  `,\n  table: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  amChoice: css`\n    margin-bottom: ${theme.spacing(4)};\n  `,\n});\n","import React from 'react';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport AlertmanagerConfig from './components/admin/AlertmanagerConfig';\nimport { ExternalAlertmanagers } from './components/admin/ExternalAlertmanagers';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\n\nexport default function Admin(): JSX.Element {\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const isGrafanaAmSelected = alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME;\n\n  return (\n    <AlertingPageWrapper pageId=\"alerting-admin\">\n      <AlertmanagerConfig test-id=\"admin-alertmanagerconfig\" />\n      {isGrafanaAmSelected && <ExternalAlertmanagers test-id=\"admin-externalalertmanagers\" />}\n    </AlertingPageWrapper>\n  );\n}\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neither GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n"],"names":["ConfigEditor","defaultValues","readOnly","loading","alertManagerSourceName","showConfirmDeleteAMConfig","onSubmit","onReset","onConfirmReset","onDismiss","Form","register","errors","Field","TextArea","e","Button","ConfirmModal","AlertmanagerConfigSelector","onChange","selectedAmConfig","useGetValidAlertManagersConfigQuery","useResetAlertManagerConfigToOldVersionMutation","alertmanagerApi","styles","getStyles","validAmConfigs","isFetchingValidAmConfigs","resetAlertManagerConfigToOldVersion","validAmConfigsOptions","configs","config","date","onResetClick","id","Select","value","values","theme","AlertmanagerConfig","dispatch","alertManagers","setAlertManagerSourceName","useAlertManagerSourceName","setShowConfirmDeleteAMConfig","isDeleting","useUnifiedAlertingSelector","state","isSaving","configRequests","setSelectedAmConfig","isLoadingConfig","loadingError","resetConfig","defaultValidValues","AlertManagerPicker","Alert","useExternalDataSourceAlertmanagers","useGetExternalAlertmanagersQuery","discoveredAlertmanagers","externalDsAlertManagers","ds","alertmanagerDatasources","droppedAMUrls","x","activeAMUrls","dsAm","dsSettings","amStatusUrl","getDataSourceUrlWithProtocol","matchingDroppedUrls","matchingActiveUrls","isDropped","isActive","isStatusInconclusive","status","ExternalAlertmanagerDataSources","alertmanagers","inactive","CallToActionCard","am","ExternalAMdataSourceCard","alertmanager","dataSource","statusInconclusive","url","Card","Tooltip","Icon","Badge","alertmanagerChoices","ExternalAlertmanagers","useSaveExternalAlertmanagersConfigMutation","useGetExternalAlertmanagerConfigQuery","saveExternalAlertManagers","externalAlertmanagerConfig","alertmanagersChoice","onChangeAlertmanagerChoice","RadioButtonGroup","Admin","isGrafanaAmSelected","AlertingPageWrapper","useIsAlertManagerAvailable","availableAlertManagers","alertManagerName","queryParams","updateQueryParams","isAlertManagerAvailable","update","querySource","storeSource","useAlertManagersByPermission","accessType"],"sourceRoot":""}