{"version":3,"file":"9133.1f0698b65351ea3817e7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/datasources/components/BasicSettings.tsx","webpack://grafana/./public/app/features/datasources/components/ButtonRow.tsx","webpack://grafana/./public/app/features/datasources/components/CloudInfoBox.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceReadOnlyMessage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceLoadError.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceMissingRightsMessage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginConfigPage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginSettings.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginState.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTestingStatus.tsx","webpack://grafana/./public/app/features/datasources/components/EditDataSource.tsx","webpack://grafana/./public/app/features/datasources/components/EditDataSourceActions.tsx","webpack://grafana/./public/app/features/plugins/components/PluginStateInfo.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineSwitch, Input, Badge, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n  alertingSupported: boolean;\n  disabled?: boolean;\n}\n\nexport function BasicSettings({\n  dataSourceName,\n  isDefault,\n  onDefaultChange,\n  onNameChange,\n  alertingSupported,\n  disabled,\n}: Props) {\n  return (\n    <>\n      <AlertingEnabled enabled={alertingSupported} />\n\n      <div className=\"gf-form-group\" aria-label=\"Datasource settings page basic settings\">\n        <div className=\"gf-form-inline\">\n          {/* Name */}\n          <div className=\"gf-form max-width-30\">\n            <InlineField\n              label=\"Name\"\n              tooltip=\"The name is used when you select the data source in panels. The default data source is\n              'preselected in new panels.\"\n              grow\n              disabled={disabled}\n            >\n              <Input\n                id=\"basic-settings-name\"\n                type=\"text\"\n                value={dataSourceName}\n                placeholder=\"Name\"\n                onChange={(event) => onNameChange(event.currentTarget.value)}\n                required\n                aria-label={selectors.pages.DataSource.name}\n              />\n            </InlineField>\n          </div>\n\n          {/* Is Default */}\n          <InlineField label=\"Default\" labelWidth={8} disabled={disabled}>\n            <InlineSwitch\n              id=\"basic-settings-default\"\n              value={isDefault}\n              onChange={(event: React.FormEvent<HTMLInputElement>) => {\n                onDefaultChange(event.currentTarget.checked);\n              }}\n            />\n          </InlineField>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport function AlertingEnabled({ enabled }: { enabled: boolean }) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.badge}>\n      {enabled ? (\n        <Badge color=\"green\" icon=\"check-circle\" text=\"Alerting supported\" />\n      ) : (\n        <Badge color=\"orange\" icon=\"exclamation-triangle\" text=\"Alerting not supported\" />\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  badge: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button } from '@grafana/ui';\n\nexport interface Props {\n  canSave: boolean;\n  canDelete: boolean;\n  onDelete: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onSubmit: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onTest: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport function ButtonRow({ canSave, canDelete, onDelete, onSubmit, onTest }: Props) {\n  return (\n    <div className=\"gf-form-button-row\">\n      <Button\n        type=\"button\"\n        variant=\"destructive\"\n        disabled={!canDelete}\n        onClick={onDelete}\n        data-testid={selectors.pages.DataSource.delete}\n      >\n        Delete\n      </Button>\n      {canSave && (\n        <Button\n          type=\"submit\"\n          variant=\"primary\"\n          disabled={!canSave}\n          onClick={onSubmit}\n          data-testid={selectors.pages.DataSource.saveAndTest}\n        >\n          Save &amp; test\n        </Button>\n      )}\n      {!canSave && (\n        <Button variant=\"primary\" onClick={onTest}>\n          Test\n        </Button>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { GrafanaEdition } from '@grafana/data/src/types/config';\nimport { Alert } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport { config } from 'app/core/config';\n\nconst LOCAL_STORAGE_KEY = 'datasources.settings.cloudInfoBox.isDismissed';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport function CloudInfoBox({ dataSource }: Props) {\n  let mainDS = '';\n  let extraDS = '';\n\n  // don't show for already configured data sources or provisioned data sources\n  if (dataSource.readOnly || (dataSource.version ?? 0) > 2) {\n    return null;\n  }\n\n  // Skip showing this info box in some editions\n  if (config.buildInfo.edition !== GrafanaEdition.OpenSource) {\n    return null;\n  }\n\n  switch (dataSource.type) {\n    case 'prometheus':\n      mainDS = 'Prometheus';\n      extraDS = 'Loki';\n      break;\n    case 'loki':\n      mainDS = 'Loki';\n      extraDS = 'Prometheus';\n      break;\n    default:\n      return null;\n  }\n\n  return (\n    <LocalStorageValueProvider<boolean> storageKey={LOCAL_STORAGE_KEY} defaultValue={false}>\n      {(isDismissed, onDismiss) => {\n        if (isDismissed) {\n          return null;\n        }\n        return (\n          <Alert\n            title={`Configure your ${mainDS} data source below`}\n            severity=\"info\"\n            bottomSpacing={4}\n            onRemove={() => {\n              onDismiss(true);\n            }}\n          >\n            Or skip the effort and get {mainDS} (and {extraDS}) as fully-managed, scalable, and hosted data sources from\n            Grafana Labs with the{' '}\n            <a\n              className=\"external-link\"\n              href={`https://grafana.com/signup/cloud/connect-account?src=grafana-oss&cnt=${dataSource.type}-settings`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              title=\"The free plan includes 10k active metrics and 50gb storage.\"\n            >\n              free-forever Grafana Cloud plan\n            </a>\n            .\n          </Alert>\n        );\n      }}\n    </LocalStorageValueProvider>\n  );\n}\n","import React from 'react';\n\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Alert } from '@grafana/ui';\n\nexport const readOnlyMessage =\n  'This data source was added by config and cannot be modified using the UI. Please contact your server admin to update this data source.';\n\nexport function DataSourceReadOnlyMessage() {\n  return (\n    <Alert aria-label={e2eSelectors.pages.DataSource.readOnly} severity=\"info\" title=\"Provisioned data source\">\n      {readOnlyMessage}\n    </Alert>\n  );\n}\n","import React from 'react';\n\nimport { Button } from '@grafana/ui';\n\nimport { DataSourceRights } from '../types';\n\nimport { DataSourceReadOnlyMessage } from './DataSourceReadOnlyMessage';\n\nexport type Props = {\n  dataSourceRights: DataSourceRights;\n  onDelete: () => void;\n};\n\nexport function DataSourceLoadError({ dataSourceRights, onDelete }: Props) {\n  const { readOnly, hasDeleteRights } = dataSourceRights;\n  const canDelete = !readOnly && hasDeleteRights;\n  const navigateBack = () => history.back();\n\n  return (\n    <>\n      {readOnly && <DataSourceReadOnlyMessage />}\n\n      <div className=\"gf-form-button-row\">\n        {canDelete && (\n          <Button type=\"submit\" variant=\"destructive\" onClick={onDelete}>\n            Delete\n          </Button>\n        )}\n\n        <Button variant=\"secondary\" fill=\"outline\" type=\"button\" onClick={navigateBack}>\n          Back\n        </Button>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nexport const missingRightsMessage =\n  'You are not allowed to modify this data source. Please contact your server admin to update this data source.';\n\nexport function DataSourceMissingRightsMessage() {\n  return (\n    <Alert severity=\"info\" title=\"Missing rights\">\n      {missingRightsMessage}\n    </Alert>\n  );\n}\n","import React from 'react';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nexport type Props = {\n  plugin?: GenericDataSourcePlugin | null;\n  pageId: string;\n};\n\nexport function DataSourcePluginConfigPage({ plugin, pageId }: Props) {\n  if (!plugin || !plugin.configPages) {\n    return null;\n  }\n\n  const page = plugin.configPages.find(({ id }) => id === pageId);\n\n  if (page) {\n    // TODO: Investigate if any plugins are using this? We should change this interface\n    return <page.body plugin={plugin} query={{}} />;\n  }\n\n  return <div>Page not found: {page}</div>;\n}\n","import { cloneDeep } from 'lodash';\nimport React, { PureComponent } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { AngularComponent, getAngularLoader } from '@grafana/runtime';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class DataSourcePluginSettings extends PureComponent<Props> {\n  element: HTMLDivElement | null = null;\n  component?: AngularComponent;\n  scopeProps: {\n    ctrl: { datasourceMeta: DataSourcePluginMeta; current: DataSourceSettings };\n    onModelChanged: (dataSource: DataSourceSettings) => void;\n  };\n\n  constructor(props: Props) {\n    super(props);\n\n    this.scopeProps = {\n      ctrl: { datasourceMeta: props.dataSourceMeta, current: cloneDeep(props.dataSource) },\n      onModelChanged: this.onModelChanged,\n    };\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  componentDidMount() {\n    const { plugin } = this.props;\n\n    if (!this.element) {\n      return;\n    }\n\n    if (!plugin.components.ConfigEditor) {\n      // React editor is not specified, let's render angular editor\n      // How to approach this better? Introduce ReactDataSourcePlugin interface and typeguard it here?\n      const loader = getAngularLoader();\n      const template = '<plugin-component type=\"datasource-config-ctrl\" />';\n\n      this.component = loader.load(this.element, this.scopeProps, template);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { plugin } = this.props;\n    if (!plugin.components.ConfigEditor && this.props.dataSource !== prevProps.dataSource) {\n      this.scopeProps.ctrl.current = cloneDeep(this.props.dataSource);\n\n      this.component?.digest();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.component) {\n      this.component.destroy();\n    }\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div ref={(element) => (this.element = element)}>\n        {plugin.components.ConfigEditor &&\n          React.createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n","import React from 'react';\n\nimport { PluginState } from '@grafana/data';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\n\nexport type Props = {\n  state?: PluginState;\n};\n\nexport function DataSourcePluginState({ state }: Props) {\n  return (\n    <div className=\"gf-form\">\n      <div className=\"gf-form-label width-10\">Plugin state</div>\n      <div className=\"gf-form-label gf-form-label--transparent\">\n        <PluginStateInfo state={state} />\n      </div>\n    </div>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\n\nimport { DataSourceSettings as DataSourceSettingsType, GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { TestingStatus, config } from '@grafana/runtime';\nimport { AlertVariant, Alert, useTheme2, Link } from '@grafana/ui';\n\nimport { contextSrv } from '../../../core/core';\nimport { AccessControlAction } from '../../../types';\nimport { trackCreateDashboardClicked } from '../tracking';\n\nexport type Props = {\n  testingStatus?: TestingStatus;\n  exploreUrl: string;\n  dataSource: DataSourceSettingsType;\n};\n\ninterface AlertMessageProps extends HTMLAttributes<HTMLDivElement> {\n  title: string;\n  severity?: AlertVariant;\n  exploreUrl: string;\n  dataSourceId: string;\n  onDashboardLinkClicked: () => void;\n}\n\nconst getStyles = (theme: GrafanaTheme2, hasTitle: boolean) => {\n  return {\n    content: css`\n      color: ${theme.colors.text.secondary};\n      padding-top: ${hasTitle ? theme.spacing(1) : 0};\n      max-height: 50vh;\n      overflow-y: auto;\n    `,\n    disabled: css`\n      pointer-events: none;\n      color: ${theme.colors.text.secondary};\n    `,\n  };\n};\n\nconst AlertSuccessMessage = ({ title, exploreUrl, dataSourceId, onDashboardLinkClicked }: AlertMessageProps) => {\n  const theme = useTheme2();\n  const hasTitle = Boolean(title);\n  const styles = getStyles(theme, hasTitle);\n  const canExploreDataSources = contextSrv.hasPermission(AccessControlAction.DataSourcesExplore);\n\n  return (\n    <div className={styles.content}>\n      Next, you can start to visualize data by{' '}\n      <Link\n        aria-label={`Create a dashboard`}\n        href={`/dashboard/new-with-ds/${dataSourceId}`}\n        className=\"external-link\"\n        onClick={onDashboardLinkClicked}\n      >\n        building a dashboard\n      </Link>\n      , or by querying data in the{' '}\n      <Link\n        aria-label={`Explore data`}\n        className={cx('external-link', {\n          [`${styles.disabled}`]: !canExploreDataSources,\n          'test-disabled': !canExploreDataSources,\n        })}\n        href={exploreUrl}\n      >\n        Explore view\n      </Link>\n      .\n    </div>\n  );\n};\n\nAlertSuccessMessage.displayName = 'AlertSuccessMessage';\n\nconst alertVariants = new Set<AlertVariant>(['success', 'info', 'warning', 'error']);\nconst isAlertVariant = (str: string): str is AlertVariant => alertVariants.has(str as AlertVariant);\nconst getAlertVariant = (status: string): AlertVariant => {\n  if (status.toLowerCase() === 'ok') {\n    return 'success';\n  }\n  return isAlertVariant(status) ? status : 'info';\n};\n\nexport function DataSourceTestingStatus({ testingStatus, exploreUrl, dataSource }: Props) {\n  const severity = getAlertVariant(testingStatus?.status ?? 'error');\n  const message = testingStatus?.message;\n  const detailsMessage = testingStatus?.details?.message;\n  const detailsVerboseMessage = testingStatus?.details?.verboseMessage;\n  const onDashboardLinkClicked = () => {\n    trackCreateDashboardClicked({\n      grafana_version: config.buildInfo.version,\n      datasource_uid: dataSource.uid,\n      plugin_name: dataSource.typeName,\n      path: location.pathname,\n    });\n  };\n\n  if (message) {\n    return (\n      <div className=\"gf-form-group p-t-2\">\n        <Alert severity={severity} title={message} aria-label={e2eSelectors.pages.DataSource.alert}>\n          {testingStatus?.details && (\n            <>\n              {detailsMessage}\n              {severity === 'success' ? (\n                <AlertSuccessMessage\n                  title={message}\n                  exploreUrl={exploreUrl}\n                  dataSourceId={dataSource.uid}\n                  onDashboardLinkClicked={onDashboardLinkClicked}\n                />\n              ) : null}\n              {detailsVerboseMessage ? (\n                <details style={{ whiteSpace: 'pre-wrap' }}>{String(detailsVerboseMessage)}</details>\n              ) : null}\n            </>\n          )}\n        </Alert>\n      </div>\n    );\n  }\n\n  return null;\n}\n","import { AnyAction } from '@reduxjs/toolkit';\nimport React from 'react';\n\nimport {\n  DataSourcePluginContextProvider,\n  DataSourcePluginMeta,\n  DataSourceSettings as DataSourceSettingsType,\n} from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { DataSourceSettingsState, useDispatch } from 'app/types';\n\nimport {\n  dataSourceLoaded,\n  setDataSourceName,\n  setIsDefault,\n  useDataSource,\n  useDataSourceExploreUrl,\n  useDataSourceMeta,\n  useDataSourceRights,\n  useDataSourceSettings,\n  useDeleteLoadedDataSource,\n  useInitDataSourceSettings,\n  useTestDataSource,\n  useUpdateDatasource,\n} from '../state';\nimport { trackDsConfigClicked, trackDsConfigUpdated } from '../tracking';\nimport { DataSourceRights } from '../types';\n\nimport { BasicSettings } from './BasicSettings';\nimport { ButtonRow } from './ButtonRow';\nimport { CloudInfoBox } from './CloudInfoBox';\nimport { DataSourceLoadError } from './DataSourceLoadError';\nimport { DataSourceMissingRightsMessage } from './DataSourceMissingRightsMessage';\nimport { DataSourcePluginConfigPage } from './DataSourcePluginConfigPage';\nimport { DataSourcePluginSettings } from './DataSourcePluginSettings';\nimport { DataSourcePluginState } from './DataSourcePluginState';\nimport { DataSourceReadOnlyMessage } from './DataSourceReadOnlyMessage';\nimport { DataSourceTestingStatus } from './DataSourceTestingStatus';\n\nexport type Props = {\n  // The ID of the data source\n  uid: string;\n  // The ID of the custom datasource setting page\n  pageId?: string | null;\n};\n\nexport function EditDataSource({ uid, pageId }: Props) {\n  useInitDataSourceSettings(uid);\n\n  const dispatch = useDispatch();\n  const dataSource = useDataSource(uid);\n  const dataSourceMeta = useDataSourceMeta(dataSource.type);\n  const dataSourceSettings = useDataSourceSettings();\n  const dataSourceRights = useDataSourceRights(uid);\n  const exploreUrl = useDataSourceExploreUrl(uid);\n  const onDelete = useDeleteLoadedDataSource();\n  const onTest = useTestDataSource(uid);\n  const onUpdate = useUpdateDatasource();\n  const onDefaultChange = (value: boolean) => dispatch(setIsDefault(value));\n  const onNameChange = (name: string) => dispatch(setDataSourceName(name));\n  const onOptionsChange = (ds: DataSourceSettingsType) => dispatch(dataSourceLoaded(ds));\n\n  return (\n    <EditDataSourceView\n      pageId={pageId}\n      dataSource={dataSource}\n      dataSourceMeta={dataSourceMeta}\n      dataSourceSettings={dataSourceSettings}\n      dataSourceRights={dataSourceRights}\n      exploreUrl={exploreUrl}\n      onDelete={onDelete}\n      onDefaultChange={onDefaultChange}\n      onNameChange={onNameChange}\n      onOptionsChange={onOptionsChange}\n      onTest={onTest}\n      onUpdate={onUpdate}\n    />\n  );\n}\n\nexport type ViewProps = {\n  pageId?: string | null;\n  dataSource: DataSourceSettingsType;\n  dataSourceMeta: DataSourcePluginMeta;\n  dataSourceSettings: DataSourceSettingsState;\n  dataSourceRights: DataSourceRights;\n  exploreUrl: string;\n  onDelete: () => void;\n  onDefaultChange: (isDefault: boolean) => AnyAction;\n  onNameChange: (name: string) => AnyAction;\n  onOptionsChange: (dataSource: DataSourceSettingsType) => AnyAction;\n  onTest: () => void;\n  onUpdate: (dataSource: DataSourceSettingsType) => Promise<DataSourceSettingsType>;\n};\n\nexport function EditDataSourceView({\n  pageId,\n  dataSource,\n  dataSourceMeta,\n  dataSourceSettings,\n  dataSourceRights,\n  exploreUrl,\n  onDelete,\n  onDefaultChange,\n  onNameChange,\n  onOptionsChange,\n  onTest,\n  onUpdate,\n}: ViewProps) {\n  const { plugin, loadError, testingStatus, loading } = dataSourceSettings;\n  const { readOnly, hasWriteRights, hasDeleteRights } = dataSourceRights;\n  const hasDataSource = dataSource.id > 0;\n\n  const dsi = getDataSourceSrv()?.getInstanceSettings(dataSource.uid);\n\n  const hasAlertingEnabled = Boolean(dsi?.meta?.alerting ?? false);\n  const isAlertManagerDatasource = dsi?.type === 'alertmanager';\n  const alertingSupported = hasAlertingEnabled || isAlertManagerDatasource;\n\n  const onSubmit = async (e: React.MouseEvent<HTMLButtonElement> | React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    trackDsConfigClicked('save_and_test');\n\n    try {\n      await onUpdate({ ...dataSource });\n      trackDsConfigUpdated('success');\n    } catch (err) {\n      trackDsConfigUpdated('fail');\n      return;\n    }\n\n    onTest();\n  };\n\n  if (loadError) {\n    return (\n      <DataSourceLoadError\n        dataSourceRights={dataSourceRights}\n        onDelete={() => {\n          trackDsConfigClicked('delete');\n          onDelete();\n        }}\n      />\n    );\n  }\n\n  if (loading) {\n    return <PageLoader />;\n  }\n\n  // TODO - is this needed?\n  if (!hasDataSource || !dsi) {\n    return null;\n  }\n\n  if (pageId) {\n    return (\n      <DataSourcePluginContextProvider instanceSettings={dsi}>\n        <DataSourcePluginConfigPage pageId={pageId} plugin={plugin} />\n      </DataSourcePluginContextProvider>\n    );\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      {!hasWriteRights && <DataSourceMissingRightsMessage />}\n      {readOnly && <DataSourceReadOnlyMessage />}\n      {dataSourceMeta.state && <DataSourcePluginState state={dataSourceMeta.state} />}\n\n      <CloudInfoBox dataSource={dataSource} />\n\n      <BasicSettings\n        dataSourceName={dataSource.name}\n        isDefault={dataSource.isDefault}\n        onDefaultChange={onDefaultChange}\n        onNameChange={onNameChange}\n        alertingSupported={alertingSupported}\n        disabled={readOnly || !hasWriteRights}\n      />\n\n      {plugin && (\n        <DataSourcePluginContextProvider instanceSettings={dsi}>\n          <DataSourcePluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={onOptionsChange}\n          />\n        </DataSourcePluginContextProvider>\n      )}\n\n      <DataSourceTestingStatus testingStatus={testingStatus} exploreUrl={exploreUrl} dataSource={dataSource} />\n\n      <ButtonRow\n        onSubmit={onSubmit}\n        onDelete={() => {\n          trackDsConfigClicked('delete');\n          onDelete();\n        }}\n        onTest={() => {\n          trackDsConfigClicked('test');\n          onTest();\n        }}\n        canDelete={!readOnly && hasDeleteRights}\n        canSave={!readOnly && hasWriteRights}\n      />\n    </form>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { useDataSource } from '../state';\nimport { trackCreateDashboardClicked, trackDsConfigClicked, trackExploreClicked } from '../tracking';\nimport { constructDataSourceExploreUrl } from '../utils';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    button: css({\n      marginLeft: theme.spacing(2),\n    }),\n  };\n};\n\ninterface Props {\n  uid: string;\n}\n\nexport function EditDataSourceActions({ uid }: Props) {\n  const styles = useStyles2(getStyles);\n  const dataSource = useDataSource(uid);\n  const hasExploreRights = contextSrv.hasPermission(AccessControlAction.DataSourcesExplore);\n\n  return (\n    <>\n      <LinkButton\n        icon=\"apps\"\n        fill=\"outline\"\n        variant=\"secondary\"\n        href={`dashboard/new-with-ds/${dataSource.uid}`}\n        onClick={() => {\n          trackDsConfigClicked('build_a_dashboard');\n          trackCreateDashboardClicked({\n            grafana_version: config.buildInfo.version,\n            datasource_uid: dataSource.uid,\n            plugin_name: dataSource.typeName,\n            path: location.pathname,\n          });\n        }}\n      >\n        Build a dashboard\n      </LinkButton>\n\n      {hasExploreRights && (\n        <LinkButton\n          icon=\"compass\"\n          fill=\"outline\"\n          variant=\"secondary\"\n          className={styles.button}\n          href={constructDataSourceExploreUrl(dataSource)}\n          onClick={() => {\n            trackDsConfigClicked('explore');\n            trackExploreClicked({\n              grafana_version: config.buildInfo.version,\n              datasource_uid: dataSource.uid,\n              plugin_name: dataSource.typeName,\n              path: location.pathname,\n            });\n          }}\n        >\n          Explore\n        </LinkButton>\n      )}\n    </>\n  );\n}\n","import React from 'react';\n\nimport { PluginState } from '@grafana/data';\nimport { Badge, BadgeProps } from '@grafana/ui';\n\ninterface Props {\n  state?: PluginState;\n}\n\nexport const PluginStateInfo = (props: Props) => {\n  const display = getFeatureStateInfo(props.state);\n\n  if (!display) {\n    return null;\n  }\n\n  return <Badge color={display.color} title={display.tooltip} text={display.text} icon={display.icon} />;\n};\n\nfunction getFeatureStateInfo(state?: PluginState): BadgeProps | null {\n  switch (state) {\n    case PluginState.deprecated:\n      return {\n        text: 'Deprecated',\n        color: 'red',\n        tooltip: `This feature is deprecated and will be removed in a future release`,\n      };\n    case PluginState.alpha:\n      return {\n        text: 'Alpha',\n        color: 'blue',\n        tooltip: `This feature is experimental and future updates might not be backward compatible`,\n      };\n    case PluginState.beta:\n      return {\n        text: 'Beta',\n        color: 'blue',\n        tooltip: `This feature is close to complete but not fully tested`,\n      };\n    default:\n      return null;\n  }\n}\n"],"names":["BasicSettings","dataSourceName","isDefault","onDefaultChange","onNameChange","alertingSupported","disabled","AlertingEnabled","InlineField","Input","event","selectors","enabled","styles","getStyles","Badge","theme","ButtonRow","canSave","canDelete","onDelete","onSubmit","onTest","Button","LOCAL_STORAGE_KEY","CloudInfoBox","dataSource","mainDS","extraDS","LocalStorageValueProvider","isDismissed","onDismiss","Alert","readOnlyMessage","DataSourceReadOnlyMessage","DataSourceLoadError","dataSourceRights","readOnly","hasDeleteRights","navigateBack","missingRightsMessage","DataSourceMissingRightsMessage","DataSourcePluginConfigPage","plugin","pageId","page","id","DataSourcePluginSettings","props","loader","template","prevProps","element","DataSourcePluginState","state","PluginStateInfo","hasTitle","AlertSuccessMessage","title","exploreUrl","dataSourceId","onDashboardLinkClicked","canExploreDataSources","Link","alertVariants","isAlertVariant","str","getAlertVariant","status","DataSourceTestingStatus","testingStatus","severity","message","detailsMessage","detailsVerboseMessage","EditDataSource","uid","dispatch","dataSourceMeta","dataSourceSettings","onUpdate","value","name","onOptionsChange","ds","EditDataSourceView","loadError","loading","hasWriteRights","hasDataSource","dsi","hasAlertingEnabled","isAlertManagerDatasource","e","PageLoader","DataSourcePluginContextProvider","EditDataSourceActions","hasExploreRights","display","getFeatureStateInfo"],"sourceRoot":""}