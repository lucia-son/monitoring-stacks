{"version":3,"file":"iconPanel.99ffd4402e58974d5c17.js","mappings":"yNA0BO,MAAMA,UAAkB,WAAiB,CAG9C,YAAYC,EAAc,CACxB,MAAMA,CAAK,EAIb,iBAAeA,IACb,KAAK,QAAU,IAAI,IAAaC,EAAA,EAAUD,EAAM,QAAQ,IAAW,EACnE,KAAK,WAAWA,CAAK,EACrB,KAAK,QAAQ,WAAW,KAAK,IAAI,EAC1B,KAAK,SAGd,gBAAcA,GAAiB,CAC7B,KAAM,CAAE,MAAAE,EAAO,OAAAC,CAAO,EAAIH,EAC1B,KAAK,QAAQ,QAAQ,WAAa,CAChC,SAAU,SACV,WAAY,SACd,EACA,KAAK,QAAQ,QAAQ,UAAY,CAC/B,KAAM,EACN,IAAK,EACL,MAAAE,EACA,OAAAC,CACF,CACF,EAEA,UAAyB,CACvB,SAAWC,MAAgC,6BAA0B,KAAK,MAAM,KAAMA,CAAK,EAC3F,SAAWC,MAAgC,6BAA0B,KAAK,MAAM,KAAMA,CAAK,EAC3F,UAAYC,MAAkC,8BAA2B,KAAK,MAAM,KAAMA,CAAM,EAChG,QAAUC,MAA8B,4BAAyB,KAAK,MAAM,KAAMA,CAAI,EACtF,YAAcC,MAAiC,gCAA6B,KAAK,MAAM,KAAMA,CAAG,EAChG,aAAc,IAAM,KAAK,MAAM,IACjC,EA/BE,KAAK,QAAU,KAAK,YAAYR,CAAK,CACvC,CAgCA,sBAAsBS,EAAkB,CACtC,KAAM,CAAE,MAAAP,EAAO,OAAAC,EAAQ,KAAAO,CAAK,EAAI,KAAK,MACrC,IAAIC,EAAU,GAEd,OAAIT,IAAUO,EAAU,OAASN,IAAWM,EAAU,UACpD,KAAK,WAAWA,CAAS,EACzBE,EAAU,IAERD,IAASD,EAAU,OACrB,KAAK,QAAQ,WAAW,KAAK,IAAI,EACjCE,EAAU,IAIR,KAAK,MAAM,SAAS,OAASF,EAAU,SAAS,OAClD,KAAK,YAAYA,CAAS,EAC1BE,EAAU,IAELA,CACT,CAEA,QAAS,CACP,KAAM,CAAE,MAAAT,EAAO,OAAAC,CAAO,EAAI,KAAK,MAC/B,OAAO,gBAAC,OAAI,MAAO,CAAE,MAAAD,EAAO,OAAAC,EAAQ,SAAU,SAAU,SAAU,UAAW,GAAI,KAAK,QAAQ,OAAO,CAAE,CACzG,CACF,C,eC5EO,MAAMS,EAA0B,CACrC,KAAM,CACJ,OAAQ,CACN,KAAM,CACJ,KAAM,WACN,MAAO,gCACT,EACA,KAAM,CACJ,MAAO,OACT,CACF,CACF,CACF,EChBa,EAAS,IAAIC,EAAA,EAAqBd,CAAS,EACrD,aAAa,EACb,eAAe,CACd,gBAAiB,CACf,CAAC,aAA4B,EAAG,CAC9B,SAAU,CACR,KAAM,EACR,CACF,CACF,CACF,CAAC,EACA,gBAAiBe,GAAY,CAC5BA,EAAQ,iBAAmD,CACzD,SAAU,CAAC,MAAM,EACjB,KAAM,OAGN,MAAO,CAACA,EAASC,IAAQ,CACvBd,EAAA,oBAA4Ba,EAASC,CAAG,EAExC,kBAA4BD,EAASC,CAAG,EACxC,cAAwBD,EAASC,CAAG,CACtC,EAEA,aAAcH,EAAe,IAC/B,CAAC,CACH,CAAC,C","sources":["webpack://grafana/./public/app/plugins/panel/icon/IconPanel.tsx","webpack://grafana/./public/app/plugins/panel/icon/models.gen.ts","webpack://grafana/./public/app/plugins/panel/icon/module.tsx"],"sourcesContent":["import React, { Component } from 'react';\n\nimport { PanelProps } from '@grafana/data';\nimport {\n  ColorDimensionConfig,\n  ResourceDimensionConfig,\n  ScalarDimensionConfig,\n  ScaleDimensionConfig,\n  TextDimensionConfig,\n} from '@grafana/schema';\nimport { HorizontalConstraint, VerticalConstraint } from 'app/features/canvas';\nimport { iconItem } from 'app/features/canvas/elements/icon';\nimport { ElementState } from 'app/features/canvas/runtime/element';\nimport {\n  DimensionContext,\n  getColorDimensionFromData,\n  getResourceDimensionFromData,\n  getScalarDimensionFromData,\n  getScaleDimensionFromData,\n  getTextDimensionFromData,\n} from 'app/features/dimensions';\n\nimport { Options } from './models.gen';\n\ninterface Props extends PanelProps<Options> {}\n\nexport class IconPanel extends Component<Props> {\n  private element: ElementState;\n\n  constructor(props: Props) {\n    super(props);\n    this.element = this.initElement(props);\n  }\n\n  initElement = (props: Props) => {\n    this.element = new ElementState(iconItem, props.options.root as any);\n    this.updateSize(props);\n    this.element.updateData(this.dims);\n    return this.element;\n  };\n\n  updateSize = (props: Props) => {\n    const { width, height } = props;\n    this.element.options.constraint = {\n      vertical: VerticalConstraint.Top,\n      horizontal: HorizontalConstraint.Left,\n    };\n    this.element.options.placement = {\n      left: 0,\n      top: 0,\n      width,\n      height,\n    };\n  };\n\n  dims: DimensionContext = {\n    getColor: (color: ColorDimensionConfig) => getColorDimensionFromData(this.props.data, color),\n    getScale: (scale: ScaleDimensionConfig) => getScaleDimensionFromData(this.props.data, scale),\n    getScalar: (scalar: ScalarDimensionConfig) => getScalarDimensionFromData(this.props.data, scalar),\n    getText: (text: TextDimensionConfig) => getTextDimensionFromData(this.props.data, text),\n    getResource: (res: ResourceDimensionConfig) => getResourceDimensionFromData(this.props.data, res),\n    getPanelData: () => this.props.data,\n  };\n\n  shouldComponentUpdate(nextProps: Props) {\n    const { width, height, data } = this.props;\n    let changed = false;\n\n    if (width !== nextProps.width || height !== nextProps.height) {\n      this.updateSize(nextProps);\n      changed = true;\n    }\n    if (data !== nextProps.data) {\n      this.element.updateData(this.dims);\n      changed = true;\n    }\n\n    // Reload the element when options change\n    if (this.props.options?.root !== nextProps.options?.root) {\n      this.initElement(nextProps);\n      changed = true;\n    }\n    return changed;\n  }\n\n  render() {\n    const { width, height } = this.props;\n    return <div style={{ width, height, overflow: 'hidden', position: 'relative' }}>{this.element.render()}</div>;\n  }\n}\n","//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// NOTE: This file will be auto generated from models.cue\n// It is currenty hand written but will serve as the target for cuetsy\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nimport { CanvasElementOptions } from 'app/features/canvas';\nimport { IconConfig } from 'app/features/canvas/elements/icon';\nimport { ResourceDimensionMode } from '@grafana/schema';\n\nexport interface Options {\n  root: Omit<CanvasElementOptions<IconConfig>, 'type' | 'name'>; // type is forced\n}\n\nexport const defaultOptions: Options = {\n  root: {\n    config: {\n      path: {\n        mode: ResourceDimensionMode.Fixed,\n        fixed: 'img/icons/unicons/analysis.svg',\n      },\n      fill: {\n        fixed: 'green'\n      }\n    },\n  },\n};\n","import { FieldConfigProperty, PanelPlugin } from '@grafana/data';\nimport { CanvasElementOptions } from 'app/features/canvas';\nimport { IconConfig, iconItem } from 'app/features/canvas/elements/icon';\n\nimport { optionBuilder } from '../canvas/editor/options';\n\nimport { IconPanel } from './IconPanel';\nimport { defaultOptions, Options } from './models.gen';\n\nexport const plugin = new PanelPlugin<Options>(IconPanel)\n  .setNoPadding() // extend to panel edges\n  .useFieldConfig({\n    standardOptions: {\n      [FieldConfigProperty.Mappings]: {\n        settings: {\n          icon: true,\n        },\n      },\n    },\n  })\n  .setPanelOptions((builder) => {\n    builder.addNestedOptions<CanvasElementOptions<IconConfig>>({\n      category: ['Icon'],\n      path: 'root',\n\n      // Dynamically fill the selected element\n      build: (builder, ctx) => {\n        iconItem.registerOptionsUI!(builder, ctx);\n\n        optionBuilder.addBackground(builder, ctx);\n        optionBuilder.addBorder(builder, ctx);\n      },\n\n      defaultValue: defaultOptions.root as any,\n    });\n  });\n"],"names":["IconPanel","props","icon","width","height","color","scale","scalar","text","res","nextProps","data","changed","defaultOptions","PanelPlugin","builder","ctx"],"sourceRoot":""}