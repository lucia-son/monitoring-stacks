{"version":3,"file":"Connections.c8eb322433488174f3a1.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/core/components/Select/SortPicker.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/CardGrid/CardGrid.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/CategoryHeader/CategoryHeader.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/NoAccessModal/NoAccessModal.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/NoResults/NoResults.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/Search/Search.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/ConnectData.tsx","webpack://grafana/./public/app/features/connections/pages/AddNewConnectionPage.tsx","webpack://grafana/./public/app/features/connections/pages/DataSourceDetailsPage.tsx","webpack://grafana/./public/app/features/connections/pages/DataSourcesListPage.tsx","webpack://grafana/./public/app/features/connections/pages/DataSourceDashboardsPage.tsx","webpack://grafana/./public/app/features/connections/pages/EditDataSourcePage.tsx","webpack://grafana/./public/app/features/connections/pages/NewDataSourcePage.tsx","webpack://grafana/./public/app/features/connections/Connections.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceAddButton.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceDashboards.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesListHeader.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesList.tsx","webpack://grafana/./public/app/features/plugins/components/PluginsErrorsInfo.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCard.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCardList.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceCategories.tsx","webpack://grafana/./public/app/features/datasources/components/NewDataSource.tsx"],"sourcesContent":["import React, { PureComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { LinkButton, FilterInput } from '@grafana/ui';\n\nimport { SortPicker } from '../Select/SortPicker';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n  sortPicker?: {\n    onChange: (sortValue: SelectableValue) => void;\n    value?: string;\n    getSortOptions?: () => Promise<SelectableValue[]>;\n  };\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const {\n      searchQuery,\n      linkButton,\n      setSearchQuery,\n      target,\n      placeholder = 'Search by name or type',\n      sortPicker,\n    } = this.props;\n    const linkProps: typeof LinkButton.defaultProps = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      linkProps.target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <div className=\"gf-form gf-form--grow\">\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </div>\n        {sortPicker && (\n          <SortPicker\n            onChange={sortPicker.onChange}\n            value={sortPicker.value}\n            getSortOptions={sortPicker.getSortOptions}\n          />\n        )}\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Icon, Select } from '@grafana/ui';\nimport { DEFAULT_SORT } from 'app/features/search/constants';\nimport { getGrafanaSearcher } from 'app/features/search/service';\n\nexport interface Props {\n  onChange: (sortValue: SelectableValue) => void;\n  value?: string;\n  placeholder?: string;\n  getSortOptions?: () => Promise<SelectableValue[]>;\n  filter?: string[];\n  isClearable?: boolean;\n}\n\nconst defaultSortOptionsGetter = (): Promise<SelectableValue[]> => {\n  return getGrafanaSearcher().getSortOptions();\n};\n\nexport function SortPicker({ onChange, value, placeholder, filter, getSortOptions, isClearable }: Props) {\n  // Using sync Select and manual options fetching here since we need to find the selected option by value\n  const options = useAsync<() => Promise<SelectableValue[]>>(async () => {\n    const vals = await (getSortOptions ?? defaultSortOptionsGetter)();\n    if (filter) {\n      return vals.filter((v) => filter.includes(v.value));\n    }\n    return vals;\n  }, [getSortOptions, filter]);\n\n  if (options.loading) {\n    return null;\n  }\n\n  const isDesc = Boolean(value?.includes('desc') || value?.startsWith('-')); // bluge syntax starts with \"-\"\n  return (\n    <Select\n      key={value}\n      width={28}\n      onChange={onChange}\n      value={options.value?.find((opt) => opt.value === value) ?? null}\n      options={options.value}\n      aria-label=\"Sort\"\n      placeholder={placeholder ?? `Sort (Default ${DEFAULT_SORT.label})`}\n      prefix={<Icon name={isDesc ? 'sort-amount-down' : 'sort-amount-up'} />}\n      isClearable={isClearable}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Card, useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  sourcesList: css`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    gap: 12px;\n    list-style: none;\n    margin-bottom: 80px;\n  `,\n  card: css`\n    height: 90px;\n    padding: 0px 24px;\n    margin-bottom: 0;\n  `,\n  cardContent: css`\n    display: flex;\n    align-items: center;\n  `,\n  logoWrapper: css`\n    display: flex;\n    justify-content: center;\n    margin-right: 8px;\n    width: 32px;\n    height: 32px;\n    img {\n      max-width: 100%;\n      max-height: 100%;\n      align-self: center;\n    }\n  `,\n  label: css`\n    color: ${theme.colors.text.primary};\n    margin-bottom: 0;\n  `,\n});\n\nexport type CardGridItem = { id: string; name: string; description: string; url: string; logo?: string };\nexport interface CardGridProps {\n  items: CardGridItem[];\n  onClickItem?: (e: React.MouseEvent<HTMLElement>, item: CardGridItem) => void;\n}\n\nexport const CardGrid = ({ items, onClickItem }: CardGridProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <ul className={styles.sourcesList}>\n      {items.map((item) => (\n        <Card\n          key={item.id}\n          className={styles.card}\n          href={item.url}\n          onClick={(e) => {\n            if (onClickItem) {\n              onClickItem(e, item);\n            }\n          }}\n        >\n          <Card.Heading>\n            <div className={styles.cardContent}>\n              {item.logo && (\n                <div className={styles.logoWrapper}>\n                  <img src={item.logo} alt={`logo of ${item.name}`} />\n                </div>\n              )}\n              <h4 className={styles.label}>{item.name}</h4>\n            </div>\n          </Card.Heading>\n        </Card>\n      ))}\n    </ul>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, IconName } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  categoryHeader: css`\n    align-items: center;\n    display: flex;\n    margin-bottom: 24px;\n  `,\n  categoryLabel: css`\n    margin-bottom: 0px;\n    margin-left: 8px;\n  `,\n});\n\ntype Props = { iconName: IconName; label: string };\n\nexport const CategoryHeader = ({ iconName, label }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.categoryHeader}>\n      <Icon name={iconName} size=\"xl\" />\n      <h3 className={styles.categoryLabel}>{label}</h3>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Modal, Icon, Button } from '@grafana/ui';\n\nimport { type CardGridItem } from '../CardGrid';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    width: 500px;\n  `,\n  modalContent: css`\n    overflow: visible;\n    color: ${theme.colors.text.secondary};\n\n    a {\n      color: ${theme.colors.text.link};\n    }\n  `,\n  description: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  bottomSection: css`\n    display: flex;\n    border-top: 1px solid ${theme.colors.border.weak};\n    padding-top: ${theme.spacing(3)};\n    margin-top: ${theme.spacing(3)};\n  `,\n  actionsSection: css`\n    display: flex;\n    justify-content: end;\n    margin-top: ${theme.spacing(3)};\n  `,\n  warningIcon: css`\n    color: ${theme.colors.warning.main};\n    padding-right: ${theme.spacing()};\n    margin-top: ${theme.spacing(0.25)};\n  `,\n  header: css`\n    display: flex;\n    align-items: center;\n  `,\n  headerTitle: css`\n    margin: 0;\n  `,\n  headerLogo: css`\n    margin-right: ${theme.spacing(2)};\n    width: 32px;\n    height: 32px;\n  `,\n});\n\nexport type NoAccessModalProps = {\n  item: CardGridItem;\n  isOpen: boolean;\n  onDismiss: () => void;\n};\n\nexport function NoAccessModal({ item, isOpen, onDismiss }: NoAccessModalProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Modal\n      className={styles.modal}\n      contentClassName={styles.modalContent}\n      title={<NoAccessModalHeader item={item} />}\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n    >\n      <div>\n        <div>\n          {item.description && <div className={styles.description}>{item.description}</div>}\n          <div>\n            Links\n            <br />\n            <a\n              href={`https://grafana.com/grafana/plugins/${item.id}`}\n              title={`${item.name} on Grafana.com`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {item.name}\n            </a>\n          </div>\n        </div>\n        <div className={styles.bottomSection}>\n          <div className={styles.warningIcon}>\n            <Icon name=\"exclamation-triangle\" />\n          </div>\n          <div>\n            <p>\n              Editors cannot add new connections. You may check to see if it is already configured in{' '}\n              <a href=\"/connections/datasources\">Data sources</a>.\n            </p>\n            <p>To add a new connection, contact your Grafana admin.</p>\n          </div>\n        </div>\n        <div className={styles.actionsSection}>\n          <Button onClick={onDismiss}>Okay</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport function NoAccessModalHeader({ item }: { item: CardGridItem }) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <div className={styles.header}>\n        {item.logo && <img className={styles.headerLogo} src={item.logo} alt={`logo of ${item.name}`} />}\n        <h4 className={styles.headerTitle}>{item.name}</h4>\n      </div>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\n\nconst getStyles = () => ({\n  noResults: css`\n    text-align: center;\n    padding: 50px 0;\n    font-style: italic;\n  `,\n});\n\nexport const NoResults = () => {\n  const styles = useStyles2(getStyles);\n\n  return <p className={styles.noResults}>No results matching your query were found.</p>;\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Input, useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchContainer: css`\n    display: flex;\n    margin: 16px 0;\n    justify-content: space-between;\n\n    position: sticky;\n    top: 0;\n    background-color: ${theme.colors.background.primary};\n    z-index: 2;\n    padding: ${theme.spacing(2)};\n    margin: 0 -${theme.spacing(2)};\n  `,\n});\n\nexport const Search: FC<{ onChange: (e: React.FormEvent<HTMLInputElement>) => void }> = ({ onChange }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.searchContainer}>\n      <Input onChange={onChange} prefix={<Icon name=\"search\" />} placeholder=\"Search all\" aria-label=\"Search all\" />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\n\nimport { PluginType } from '@grafana/data';\nimport { useStyles2, LoadingPlaceholder } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { useGetAll } from 'app/features/plugins/admin/state/hooks';\nimport { AccessControlAction } from 'app/types';\n\nimport { ROUTES } from '../../constants';\n\nimport { CardGrid, type CardGridItem } from './CardGrid';\nimport { CategoryHeader } from './CategoryHeader';\nimport { NoAccessModal } from './NoAccessModal';\nimport { NoResults } from './NoResults';\nimport { Search } from './Search';\n\nconst getStyles = () => ({\n  spacer: css`\n    height: 16px;\n  `,\n  modal: css`\n    width: 500px;\n  `,\n  modalContent: css`\n    overflow: visible;\n  `,\n});\n\nexport function AddNewConnection() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isNoAccessModalOpen, setIsNoAccessModalOpen] = useState(false);\n  const [focusedItem, setFocusedItem] = useState<CardGridItem | null>(null);\n  const styles = useStyles2(getStyles);\n  const canCreateDataSources = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n\n  const handleSearchChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setSearchTerm(e.currentTarget.value.toLowerCase());\n  };\n\n  const { isLoading, error, plugins } = useGetAll({\n    keyword: searchTerm,\n    type: PluginType.datasource,\n  });\n\n  const cardGridItems = useMemo(\n    () =>\n      plugins.map((plugin) => ({\n        id: plugin.id,\n        name: plugin.name,\n        description: plugin.description,\n        logo: plugin.info.logos.small,\n        url: ROUTES.DataSourcesDetails.replace(':id', plugin.id),\n      })),\n    [plugins]\n  );\n\n  const onClickCardGridItem = (e: React.MouseEvent<HTMLElement>, item: CardGridItem) => {\n    if (!canCreateDataSources) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      openModal(item);\n    }\n  };\n\n  const openModal = (item: CardGridItem) => {\n    setIsNoAccessModalOpen(true);\n    setFocusedItem(item);\n  };\n\n  const closeModal = () => {\n    setIsNoAccessModalOpen(false);\n    setFocusedItem(null);\n  };\n\n  const showNoResults = useMemo(() => !isLoading && !error && plugins.length < 1, [isLoading, error, plugins]);\n\n  return (\n    <>\n      {focusedItem && <NoAccessModal item={focusedItem} isOpen={isNoAccessModalOpen} onDismiss={closeModal} />}\n      <Search onChange={handleSearchChange} />\n      {/* We need this extra spacing when there are no filters */}\n      <div className={styles.spacer} />\n      <CategoryHeader iconName=\"database\" label=\"Data sources\" />\n      {isLoading ? (\n        <LoadingPlaceholder text=\"Loading...\" />\n      ) : !!error ? (\n        <p>Error: {error.message}</p>\n      ) : (\n        <CardGrid items={cardGridItems} onClickItem={onClickCardGridItem} />\n      )}\n      {showNoResults && <NoResults />}\n    </>\n  );\n}\n","import * as React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { AddNewConnection } from '../tabs/ConnectData';\n\nexport function AddNewConnectionPage() {\n  return (\n    <Page navId={'connections-add-new-connection'}>\n      <Page.Contents>\n        <AddNewConnection />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Alert, Badge } from '@grafana/ui';\nimport { PluginDetailsPage } from 'app/features/plugins/admin/components/PluginDetailsPage';\nimport { StoreState, useSelector, AppNotificationSeverity } from 'app/types';\n\nimport { ROUTES } from '../constants';\n\nexport function DataSourceDetailsPage() {\n  const overrideNavId = 'standalone-plugin-page-/connections/add-new-connection';\n  const { id } = useParams<{ id: string }>();\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const isConnectDataPageOverriden = Boolean(navIndex[overrideNavId]);\n  const navId = isConnectDataPageOverriden ? overrideNavId : 'connections-add-new-connection'; // The nav id changes (gets a prefix) if it is overriden by a plugin\n\n  return (\n    <PluginDetailsPage\n      pluginId={id}\n      navId={navId}\n      notFoundComponent={<NotFoundDatasource />}\n      notFoundNavModel={{\n        text: 'Unknown datasource',\n        subTitle: 'No datasource with this ID could be found.',\n        active: true,\n      }}\n    />\n  );\n}\n\nfunction NotFoundDatasource() {\n  const { id } = useParams<{ id: string }>();\n\n  return (\n    <Alert severity={AppNotificationSeverity.Warning} title=\"\">\n      Maybe you mistyped the URL or the plugin with the id <Badge text={id} color=\"orange\" /> is unavailable.\n      <br />\n      To see a list of available datasources please <a href={ROUTES.AddNewConnection}>click here</a>.\n    </Alert>\n  );\n}\n","import * as React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { DataSourceAddButton } from 'app/features/datasources/components/DataSourceAddButton';\nimport { DataSourcesList } from 'app/features/datasources/components/DataSourcesList';\nimport { getDataSourcesCount } from 'app/features/datasources/state';\nimport { StoreState, useSelector } from 'app/types';\n\nexport function DataSourcesListPage() {\n  const dataSourcesCount = useSelector(({ dataSources }: StoreState) => getDataSourcesCount(dataSources));\n\n  const actions = dataSourcesCount > 0 ? <DataSourceAddButton /> : undefined;\n  return (\n    <Page navId={'connections-datasources'} actions={actions}>\n      <Page.Contents>\n        <DataSourcesList />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { DataSourceDashboards } from 'app/features/datasources/components/DataSourceDashboards';\n\nimport { useDataSourceSettingsNav } from '../hooks/useDataSourceSettingsNav';\n\nexport function DataSourceDashboardsPage() {\n  const { uid } = useParams<{ uid: string }>();\n  const { navId, pageNav } = useDataSourceSettingsNav('dashboards');\n\n  return (\n    <Page navId={navId} pageNav={pageNav}>\n      <Page.Contents>\n        <DataSourceDashboards uid={uid} />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\nimport { useLocation, useParams } from 'react-router-dom';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { EditDataSource } from 'app/features/datasources/components/EditDataSource';\nimport { EditDataSourceActions } from 'app/features/datasources/components/EditDataSourceActions';\n\nimport { useDataSourceSettingsNav } from '../hooks/useDataSourceSettingsNav';\n\nexport function EditDataSourcePage() {\n  const { uid } = useParams<{ uid: string }>();\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const pageId = params.get('page');\n  const { navId, pageNav } = useDataSourceSettingsNav();\n\n  return (\n    <Page navId={navId} pageNav={pageNav} actions={<EditDataSourceActions uid={uid} />}>\n      <Page.Contents>\n        <EditDataSource uid={uid} pageId={pageId} />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { NewDataSource } from 'app/features/datasources/components/NewDataSource';\n\nexport function NewDataSourcePage() {\n  return (\n    <Page\n      navId={'connections-datasources'}\n      pageNav={{ text: 'Add data source', subTitle: 'Choose a data source type', active: true }}\n    >\n      <Page.Contents>\n        <NewDataSource />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import * as React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\n\nimport { DataSourcesRoutesContext } from 'app/features/datasources/state';\nimport { StoreState, useSelector } from 'app/types';\n\nimport { ROUTES } from './constants';\nimport {\n  AddNewConnectionPage,\n  DataSourceDashboardsPage,\n  DataSourceDetailsPage,\n  DataSourcesListPage,\n  EditDataSourcePage,\n  NewDataSourcePage,\n} from './pages';\n\nexport default function Connections() {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const isAddNewConnectionPageOverridden = Boolean(navIndex['standalone-plugin-page-/connections/add-new-connection']);\n\n  return (\n    <DataSourcesRoutesContext.Provider\n      value={{\n        New: ROUTES.DataSourcesNew,\n        List: ROUTES.DataSources,\n        Edit: ROUTES.DataSourcesEdit,\n        Dashboards: ROUTES.DataSourcesDashboards,\n      }}\n    >\n      <Switch>\n        {/* Redirect to \"Add new connection\" by default */}\n        <Route exact sensitive path={ROUTES.Base} component={() => <Redirect to={ROUTES.AddNewConnection} />} />\n        <Route exact sensitive path={ROUTES.DataSources} component={DataSourcesListPage} />\n        <Route exact sensitive path={ROUTES.DataSourcesNew} component={NewDataSourcePage} />\n        <Route exact sensitive path={ROUTES.DataSourcesDetails} component={DataSourceDetailsPage} />\n        <Route exact sensitive path={ROUTES.DataSourcesEdit} component={EditDataSourcePage} />\n        <Route exact sensitive path={ROUTES.DataSourcesDashboards} component={DataSourceDashboardsPage} />\n\n        {/* \"Add new connection\" page - we don't register a route in case a plugin already registers a standalone page for it */}\n        {!isAddNewConnectionPageOverridden && (\n          <Route exact sensitive path={ROUTES.AddNewConnection} component={AddNewConnectionPage} />\n        )}\n\n        {/* Not found */}\n        <Route component={() => <Redirect to=\"/notfound\" />} />\n      </Switch>\n    </DataSourcesRoutesContext.Provider>\n  );\n}\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { useDataSourcesRoutes } from '../state';\n\nexport function DataSourceAddButton(): JSX.Element | null {\n  const canCreateDataSource = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return canCreateDataSource ? (\n    <LinkButton icon=\"plus\" href={config.appSubUrl + dataSourcesRoutes.New}>\n      Add new data source\n    </LinkButton>\n  ) : null;\n}\n","import React, { useEffect } from 'react';\n\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { importDashboard, removeDashboard } from 'app/features/dashboard/state/actions';\nimport { loadPluginDashboards } from 'app/features/plugins/admin/state/actions';\nimport { PluginDashboard, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport DashboardTable from '../components/DashboardsTable';\nimport { useLoadDataSource } from '../state';\n\nexport type Props = {\n  // The UID of the data source\n  uid: string;\n};\n\nexport function DataSourceDashboards({ uid }: Props) {\n  useLoadDataSource(uid);\n\n  const dispatch = useDispatch();\n  const dataSource = useSelector((s: StoreState) => s.dataSources.dataSource);\n  const dashboards = useSelector((s: StoreState) => s.plugins.dashboards);\n  const isLoading = useSelector((s: StoreState) => s.plugins.isLoadingPluginDashboards);\n\n  useEffect(() => {\n    // Load plugin dashboards only when the datasource has loaded\n    if (dataSource.id > 0) {\n      dispatch(loadPluginDashboards());\n    }\n  }, [dispatch, dataSource]);\n\n  const onImportDashboard = (dashboard: PluginDashboard, overwrite: boolean) => {\n    dispatch(\n      importDashboard(\n        {\n          pluginId: dashboard.pluginId,\n          path: dashboard.path,\n          overwrite,\n          inputs: [\n            {\n              name: '*',\n              type: 'datasource',\n              pluginId: dataSource.type,\n              value: dataSource.name,\n            },\n          ],\n        },\n        dashboard.title\n      )\n    );\n  };\n\n  const onRemoveDashboard = ({ uid }: PluginDashboard) => {\n    dispatch(removeDashboard(uid));\n  };\n\n  return (\n    <DataSourceDashboardsView\n      dashboards={dashboards}\n      isLoading={isLoading}\n      onImportDashboard={onImportDashboard}\n      onRemoveDashboard={onRemoveDashboard}\n    />\n  );\n}\n\nexport type ViewProps = {\n  isLoading: boolean;\n  dashboards: PluginDashboard[];\n  onImportDashboard: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemoveDashboard: (dashboard: PluginDashboard) => void;\n};\n\nexport const DataSourceDashboardsView = ({\n  isLoading,\n  dashboards,\n  onImportDashboard,\n  onRemoveDashboard,\n}: ViewProps) => {\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return <DashboardTable dashboards={dashboards} onImport={onImportDashboard} onRemove={onRemoveDashboard} />;\n};\n","import React, { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport { StoreState, useSelector, useDispatch } from 'app/types';\n\nimport { getDataSourcesSearchQuery, getDataSourcesSort, setDataSourcesSearchQuery, setIsSortAscending } from '../state';\n\nconst ascendingSortValue = 'alpha-asc';\nconst descendingSortValue = 'alpha-desc';\n\nconst sortOptions = [\n  // We use this unicode 'en dash' character (U+2013), because it looks nicer\n  // than simple dash in this context. This is also used in the response of\n  // the `sorting` endpoint, which is used in the search dashboard page.\n  { label: 'Sort by A–Z', value: ascendingSortValue },\n  { label: 'Sort by Z–A', value: descendingSortValue },\n];\n\nexport function DataSourcesListHeader() {\n  const dispatch = useDispatch();\n  const setSearchQuery = useCallback((q: string) => dispatch(setDataSourcesSearchQuery(q)), [dispatch]);\n  const searchQuery = useSelector(({ dataSources }: StoreState) => getDataSourcesSearchQuery(dataSources));\n\n  const setSort = useCallback(\n    (sort: SelectableValue) => dispatch(setIsSortAscending(sort.value === ascendingSortValue)),\n    [dispatch]\n  );\n  const isSortAscending = useSelector(({ dataSources }: StoreState) => getDataSourcesSort(dataSources));\n\n  const sortPicker = {\n    onChange: setSort,\n    value: isSortAscending ? ascendingSortValue : descendingSortValue,\n    getSortOptions: () => Promise.resolve(sortOptions),\n  };\n\n  return (\n    <PageActionBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} key=\"action-bar\" sortPicker={sortPicker} />\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { DataSourceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { LinkButton, Card, Tag, useStyles2 } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { contextSrv } from 'app/core/core';\nimport { StoreState, AccessControlAction, useSelector } from 'app/types';\n\nimport { getDataSources, getDataSourcesCount, useDataSourcesRoutes, useLoadDataSources } from '../state';\nimport { trackCreateDashboardClicked, trackExploreClicked, trackDataSourcesListViewed } from '../tracking';\nimport { constructDataSourceExploreUrl } from '../utils';\n\nimport { DataSourcesListHeader } from './DataSourcesListHeader';\n\nexport function DataSourcesList() {\n  const { isLoading } = useLoadDataSources();\n\n  const dataSources = useSelector((state) => getDataSources(state.dataSources));\n  const dataSourcesCount = useSelector(({ dataSources }: StoreState) => getDataSourcesCount(dataSources));\n  const hasCreateRights = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const hasWriteRights = contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n  const hasExploreRights = contextSrv.hasPermission(AccessControlAction.DataSourcesExplore);\n\n  return (\n    <DataSourcesListView\n      dataSources={dataSources}\n      dataSourcesCount={dataSourcesCount}\n      isLoading={isLoading}\n      hasCreateRights={hasCreateRights}\n      hasWriteRights={hasWriteRights}\n      hasExploreRights={hasExploreRights}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  isLoading: boolean;\n  hasCreateRights: boolean;\n  hasWriteRights: boolean;\n  hasExploreRights: boolean;\n};\n\nexport function DataSourcesListView({\n  dataSources,\n  dataSourcesCount,\n  isLoading,\n  hasCreateRights,\n  hasWriteRights,\n  hasExploreRights,\n}: ViewProps) {\n  const styles = useStyles2(getStyles);\n  const dataSourcesRoutes = useDataSourcesRoutes();\n  const location = useLocation();\n\n  useEffect(() => {\n    trackDataSourcesListViewed({\n      grafana_version: config.buildInfo.version,\n      path: location.pathname,\n    });\n  }, [location]);\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  if (dataSourcesCount === 0) {\n    return (\n      <EmptyListCTA\n        buttonDisabled={!hasCreateRights}\n        title=\"No data sources defined\"\n        buttonIcon=\"database\"\n        buttonLink={dataSourcesRoutes.New}\n        buttonTitle=\"Add data source\"\n        proTip=\"You can also define data sources through configuration files.\"\n        proTipLink=\"http://docs.grafana.org/administration/provisioning/?utm_source=grafana_ds_list#data-sources\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n\n  return (\n    <>\n      {/* List Header */}\n      <DataSourcesListHeader />\n\n      {/* List */}\n      <ul className={styles.list}>\n        {dataSources.map((dataSource) => {\n          const dsLink = config.appSubUrl + dataSourcesRoutes.Edit.replace(/:uid/gi, dataSource.uid);\n          return (\n            <li key={dataSource.uid}>\n              <Card href={hasWriteRights ? dsLink : undefined}>\n                <Card.Heading>{dataSource.name}</Card.Heading>\n                <Card.Figure>\n                  <img src={dataSource.typeLogoUrl} alt=\"\" height=\"40px\" width=\"40px\" className={styles.logo} />\n                </Card.Figure>\n                <Card.Meta>\n                  {[\n                    dataSource.typeName,\n                    dataSource.url,\n                    dataSource.isDefault && <Tag key=\"default-tag\" name={'default'} colorIndex={1} />,\n                  ]}\n                </Card.Meta>\n                <Card.Tags>\n                  {/* Build Dashboard */}\n                  <LinkButton\n                    icon=\"apps\"\n                    fill=\"outline\"\n                    variant=\"secondary\"\n                    href={`dashboard/new-with-ds/${dataSource.uid}`}\n                    onClick={() => {\n                      trackCreateDashboardClicked({\n                        grafana_version: config.buildInfo.version,\n                        datasource_uid: dataSource.uid,\n                        plugin_name: dataSource.typeName,\n                        path: location.pathname,\n                      });\n                    }}\n                  >\n                    Build a dashboard\n                  </LinkButton>\n\n                  {/* Explore */}\n                  {hasExploreRights && (\n                    <LinkButton\n                      icon=\"compass\"\n                      fill=\"outline\"\n                      variant=\"secondary\"\n                      className={styles.button}\n                      href={constructDataSourceExploreUrl(dataSource)}\n                      onClick={() => {\n                        trackExploreClicked({\n                          grafana_version: config.buildInfo.version,\n                          datasource_uid: dataSource.uid,\n                          plugin_name: dataSource.typeName,\n                          path: location.pathname,\n                        });\n                      }}\n                    >\n                      Explore\n                    </LinkButton>\n                  )}\n                </Card.Tags>\n              </Card>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    list: css({\n      listStyle: 'none',\n      display: 'grid',\n      // gap: '8px', Add back when legacy support for old Card interface is dropped\n    }),\n    logo: css({\n      objectFit: 'contain',\n    }),\n    button: css({\n      marginLeft: theme.spacing(2),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, PluginErrorCode, PluginSignatureStatus } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { HorizontalGroup, InfoBox, List, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nimport { useGetErrors, useFetchStatus } from '../admin/state/hooks';\n\nexport function PluginsErrorsInfo() {\n  const errors = useGetErrors();\n  const { isLoading } = useFetchStatus();\n  const styles = useStyles2(getStyles);\n\n  if (isLoading || errors.length === 0) {\n    return null;\n  }\n\n  return (\n    <InfoBox\n      aria-label={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n      urlTitle=\"Read more about plugin signing\"\n      url=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n    >\n      <div>\n        <p>\n          Unsigned plugins were found during plugin initialization. Grafana Labs cannot guarantee the integrity of these\n          plugins. We recommend only using signed plugins.\n        </p>\n        The following plugins are disabled and not shown in the list below:\n        <List\n          items={errors}\n          className={styles.list}\n          renderItem={(error) => (\n            <div className={styles.wrapper}>\n              <HorizontalGroup spacing=\"sm\" justify=\"flex-start\" align=\"center\">\n                <strong>{error.pluginId}</strong>\n                <PluginSignatureBadge\n                  status={mapPluginErrorCodeToSignatureStatus(error.errorCode)}\n                  className={styles.badge}\n                />\n              </HorizontalGroup>\n            </div>\n          )}\n        />\n      </div>\n    </InfoBox>\n  );\n}\n\nfunction mapPluginErrorCodeToSignatureStatus(code: PluginErrorCode) {\n  switch (code) {\n    case PluginErrorCode.invalidSignature:\n      return PluginSignatureStatus.invalid;\n    case PluginErrorCode.missingSignature:\n      return PluginSignatureStatus.missing;\n    case PluginErrorCode.modifiedSignature:\n      return PluginSignatureStatus.modified;\n    default:\n      return PluginSignatureStatus.missing;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    list: css({\n      listStyleType: 'circle',\n    }),\n    wrapper: css({\n      marginTop: theme.spacing(1),\n    }),\n    badge: css({\n      marginTop: 0,\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta, GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Card, LinkButton, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nexport type Props = {\n  dataSourcePlugin: DataSourcePluginMeta;\n  onClick: () => void;\n};\n\nexport function DataSourceTypeCard({ onClick, dataSourcePlugin }: Props) {\n  const isPhantom = dataSourcePlugin.module === 'phantom';\n  const isClickable = !isPhantom && !dataSourcePlugin.unlicensed;\n  const learnMoreLink = dataSourcePlugin.info?.links?.length > 0 ? dataSourcePlugin.info.links[0] : null;\n  const learnMoreLinkTarget = learnMoreLink?.target ?? '_blank';\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Card className={cx(styles.card, 'card-parent')} onClick={isClickable ? onClick : () => {}}>\n      {/* Name */}\n      <Card.Heading\n        className={styles.heading}\n        aria-label={e2eSelectors.pages.AddDataSource.dataSourcePluginsV2(dataSourcePlugin.name)}\n      >\n        {dataSourcePlugin.name}\n      </Card.Heading>\n\n      {/* Logo */}\n      <Card.Figure align=\"center\" className={styles.figure}>\n        <img className={styles.logo} src={dataSourcePlugin.info.logos.small} alt=\"\" />\n      </Card.Figure>\n\n      <Card.Description className={styles.description}>{dataSourcePlugin.info.description}</Card.Description>\n\n      {/* Signature */}\n      {!isPhantom && (\n        <Card.Meta className={styles.meta}>\n          <PluginSignatureBadge status={dataSourcePlugin.signature} />\n        </Card.Meta>\n      )}\n\n      {/* Learn more */}\n      <Card.Actions className={styles.actions}>\n        {learnMoreLink && (\n          <LinkButton\n            aria-label={`${dataSourcePlugin.name}, learn more.`}\n            href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n            onClick={(e) => e.stopPropagation()}\n            rel=\"noopener\"\n            target={learnMoreLinkTarget}\n            variant=\"secondary\"\n          >\n            {learnMoreLink.name}\n          </LinkButton>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    heading: css({\n      fontSize: theme.v1.typography.heading.h5,\n      fontWeight: 'inherit',\n    }),\n    figure: css({\n      width: 'inherit',\n      marginRight: '0px',\n      '> img': {\n        width: theme.spacing(7),\n      },\n    }),\n    meta: css({\n      marginTop: '6px',\n      position: 'relative',\n    }),\n    description: css({\n      margin: '0px',\n      fontSize: theme.typography.size.sm,\n    }),\n    actions: css({\n      position: 'relative',\n      alignSelf: 'center',\n      marginTop: '0px',\n      opacity: 0,\n\n      '.card-parent:hover &, .card-parent:focus-within &': {\n        opacity: 1,\n      },\n    }),\n    card: css({\n      gridTemplateAreas: `\n        \"Figure   Heading   Actions\"\n        \"Figure Description Actions\"\n        \"Figure    Meta     Actions\"\n        \"Figure     -       Actions\"`,\n    }),\n    logo: css({\n      marginRight: theme.v1.spacing.lg,\n      marginLeft: theme.v1.spacing.sm,\n      width: theme.spacing(7),\n      maxHeight: theme.spacing(7),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { List } from '@grafana/ui';\n\nimport { DataSourceTypeCard } from './DataSourceTypeCard';\n\nexport type Props = {\n  // The list of data-source plugins to display\n  dataSourcePlugins: DataSourcePluginMeta[];\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceTypeCardList({ dataSourcePlugins, onClickDataSourceType }: Props) {\n  if (!dataSourcePlugins || !dataSourcePlugins.length) {\n    return null;\n  }\n\n  return (\n    <List\n      items={dataSourcePlugins}\n      getItemKey={(item) => item.id.toString()}\n      renderItem={(item) => <DataSourceTypeCard dataSourcePlugin={item} onClick={() => onClickDataSourceType(item)} />}\n      className={css`\n        > li {\n          margin-bottom: 2px;\n        }\n      `}\n    />\n  );\n}\n","import React from 'react';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { LinkButton } from '@grafana/ui';\nimport { DataSourcePluginCategory } from 'app/types';\n\nimport { ROUTES } from '../../connections/constants';\n\nimport { DataSourceTypeCardList } from './DataSourceTypeCardList';\n\nexport type Props = {\n  // The list of data-source plugin categories to display\n  categories: DataSourcePluginCategory[];\n\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceCategories({ categories, onClickDataSourceType }: Props) {\n  const moreDataSourcesLink = config.featureToggles.dataConnectionsConsole\n    ? `${ROUTES.AddNewConnection}?cat=data-source`\n    : '/plugins?filterBy=all&filterByType=datasource&utm_source=grafana_add_ds';\n\n  return (\n    <>\n      {/* Categories */}\n      {categories.map(({ id, title, plugins }) => (\n        <div className=\"add-data-source-category\" key={id}>\n          <div className=\"add-data-source-category__header\" id={id}>\n            {title}\n          </div>\n          <DataSourceTypeCardList dataSourcePlugins={plugins} onClickDataSourceType={onClickDataSourceType} />\n        </div>\n      ))}\n\n      {/* Find more */}\n      <div className=\"add-data-source-more\">\n        <LinkButton variant=\"secondary\" href={moreDataSourcesLink} target=\"_self\" rel=\"noopener\">\n          Find more data source plugins\n        </LinkButton>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport { AnyAction } from 'redux';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { LinkButton, FilterInput } from '@grafana/ui';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { PluginsErrorsInfo } from 'app/features/plugins/components/PluginsErrorsInfo';\nimport { DataSourcePluginCategory, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport { DataSourceCategories } from '../components/DataSourceCategories';\nimport { DataSourceTypeCardList } from '../components/DataSourceTypeCardList';\nimport {\n  useAddDatasource,\n  useLoadDataSourcePlugins,\n  getFilteredDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n  useDataSourcesRoutes,\n} from '../state';\n\nexport function NewDataSource() {\n  useLoadDataSourcePlugins();\n\n  const dispatch = useDispatch();\n  const filteredDataSources = useSelector((s: StoreState) => getFilteredDataSourcePlugins(s.dataSources));\n  const searchQuery = useSelector((s: StoreState) => s.dataSources.dataSourceTypeSearchQuery);\n  const isLoadingDatasourcePlugins = useSelector((s: StoreState) => s.dataSources.isLoadingDataSourcePlugins);\n  const dataSourceCategories = useSelector((s: StoreState) => s.dataSources.categories);\n  const onAddDataSource = useAddDatasource();\n  const onSetSearchQuery = (q: string) => dispatch(setDataSourceTypeSearchQuery(q));\n\n  return (\n    <NewDataSourceView\n      dataSources={filteredDataSources}\n      dataSourceCategories={dataSourceCategories}\n      searchQuery={searchQuery}\n      isLoading={isLoadingDatasourcePlugins}\n      onAddDataSource={onAddDataSource}\n      onSetSearchQuery={onSetSearchQuery}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourcePluginMeta[];\n  dataSourceCategories: DataSourcePluginCategory[];\n  searchQuery: string;\n  isLoading: boolean;\n  onAddDataSource: (dataSource: DataSourcePluginMeta) => void;\n  onSetSearchQuery: (q: string) => AnyAction;\n};\n\nexport function NewDataSourceView({\n  dataSources,\n  dataSourceCategories,\n  searchQuery,\n  isLoading,\n  onAddDataSource,\n  onSetSearchQuery,\n}: ViewProps) {\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return (\n    <>\n      {/* Search */}\n      <div className=\"page-action-bar\">\n        <FilterInput value={searchQuery} onChange={onSetSearchQuery} placeholder=\"Filter by name or type\" />\n        <div className=\"page-action-bar__spacer\" />\n        <LinkButton href={dataSourcesRoutes.List} fill=\"outline\" variant=\"secondary\" icon=\"arrow-left\">\n          Cancel\n        </LinkButton>\n      </div>\n\n      {/* Show any plugin errors while not searching for anything specific */}\n      {!searchQuery && <PluginsErrorsInfo />}\n\n      {/* Search results */}\n      <div>\n        {searchQuery && (\n          <DataSourceTypeCardList dataSourcePlugins={dataSources} onClickDataSourceType={onAddDataSource} />\n        )}\n        {!searchQuery && (\n          <DataSourceCategories categories={dataSourceCategories} onClickDataSourceType={onAddDataSource} />\n        )}\n      </div>\n    </>\n  );\n}\n"],"names":["PageActionBar","searchQuery","linkButton","setSearchQuery","target","placeholder","sortPicker","linkProps","defaultSortOptionsGetter","SortPicker","onChange","value","filter","getSortOptions","isClearable","options","vals","v","isDesc","opt","getStyles","theme","CardGrid","items","onClickItem","styles","item","Card","e","CategoryHeader","iconName","label","Icon","NoAccessModal","isOpen","onDismiss","Modal","NoAccessModalHeader","Button","NoResults","Search","Input","AddNewConnection","searchTerm","setSearchTerm","isNoAccessModalOpen","setIsNoAccessModalOpen","focusedItem","setFocusedItem","canCreateDataSources","handleSearchChange","isLoading","error","plugins","cardGridItems","plugin","onClickCardGridItem","openModal","closeModal","showNoResults","LoadingPlaceholder","AddNewConnectionPage","Page","DataSourceDetailsPage","overrideNavId","id","navIndex","state","navId","PluginDetailsPage","NotFoundDatasource","Alert","Badge","DataSourcesListPage","actions","dataSources","DataSourceAddButton","DataSourcesList","DataSourceDashboardsPage","uid","pageNav","useDataSourceSettingsNav","DataSourceDashboards","EditDataSourcePage","location","pageId","EditDataSourceActions","EditDataSource","NewDataSourcePage","NewDataSource","Connections","isAddNewConnectionPageOverridden","canCreateDataSource","dataSourcesRoutes","dispatch","dataSource","s","dashboards","onImportDashboard","dashboard","overwrite","onRemoveDashboard","DataSourceDashboardsView","ascendingSortValue","descendingSortValue","sortOptions","DataSourcesListHeader","q","setSort","sort","isSortAscending","dataSourcesCount","hasCreateRights","hasWriteRights","hasExploreRights","DataSourcesListView","config","PageLoader","EmptyListCTA","dsLink","Tag","PluginsErrorsInfo","errors","InfoBox","selectors","List","PluginSignatureBadge","mapPluginErrorCodeToSignatureStatus","code","DataSourceTypeCard","onClick","dataSourcePlugin","isPhantom","isClickable","learnMoreLink","learnMoreLinkTarget","DataSourceTypeCardList","dataSourcePlugins","onClickDataSourceType","DataSourceCategories","categories","moreDataSourcesLink","title","filteredDataSources","isLoadingDatasourcePlugins","dataSourceCategories","onAddDataSource","onSetSearchQuery","NewDataSourceView","FilterInput"],"sourceRoot":""}