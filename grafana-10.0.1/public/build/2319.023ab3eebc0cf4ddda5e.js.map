{"version":3,"file":"2319.023ab3eebc0cf4ddda5e.js","mappings":"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","sources":["webpack://grafana/./public/app/features/explore/AddToDashboard/addToDashboard.ts","webpack://grafana/./public/app/features/explore/AddToDashboard/AddToDashboardModal.tsx","webpack://grafana/./public/app/features/explore/AddToDashboard/index.tsx"],"sourcesContent":["import { DataFrame } from '@grafana/data';\nimport { DataQuery, DataSourceRef } from '@grafana/schema';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport {\n  getNewDashboardModelData,\n  setDashboardToFetchFromLocalStorage,\n} from 'app/features/dashboard/state/initDashboard';\nimport { DashboardDTO, ExplorePanelData } from 'app/types';\n\nexport enum AddToDashboardError {\n  FETCH_DASHBOARD = 'fetch-dashboard',\n  SET_DASHBOARD_LS = 'set-dashboard-ls-error',\n}\n\ninterface AddPanelToDashboardOptions {\n  queries: DataQuery[];\n  queryResponse: ExplorePanelData;\n  datasource?: DataSourceRef;\n  dashboardUid?: string;\n}\n\nfunction createDashboard(): DashboardDTO {\n  const dto = getNewDashboardModelData();\n\n  // getNewDashboardModelData adds by default the \"add-panel\" panel. We don't want that.\n  dto.dashboard.panels = [];\n\n  return dto;\n}\n\nexport async function setDashboardInLocalStorage(options: AddPanelToDashboardOptions) {\n  const panelType = getPanelType(options.queries, options.queryResponse);\n  const panel = {\n    targets: options.queries,\n    type: panelType,\n    title: 'New Panel',\n    gridPos: { x: 0, y: 0, w: 12, h: 8 },\n    datasource: options.datasource,\n  };\n\n  let dto: DashboardDTO;\n\n  if (options.dashboardUid) {\n    try {\n      dto = await backendSrv.getDashboardByUid(options.dashboardUid);\n    } catch (e) {\n      throw AddToDashboardError.FETCH_DASHBOARD;\n    }\n  } else {\n    dto = createDashboard();\n  }\n\n  dto.dashboard.panels = [panel, ...(dto.dashboard.panels ?? [])];\n\n  try {\n    setDashboardToFetchFromLocalStorage(dto);\n  } catch {\n    throw AddToDashboardError.SET_DASHBOARD_LS;\n  }\n}\n\nconst isVisible = (query: DataQuery) => !query.hide;\nconst hasRefId = (refId: DataFrame['refId']) => (frame: DataFrame) => frame.refId === refId;\n\nfunction getPanelType(queries: DataQuery[], queryResponse: ExplorePanelData) {\n  for (const { refId } of queries.filter(isVisible)) {\n    const hasQueryRefId = hasRefId(refId);\n    if (queryResponse.flameGraphFrames.some(hasQueryRefId)) {\n      return 'flamegraph';\n    }\n    if (queryResponse.graphFrames.some(hasQueryRefId)) {\n      return 'timeseries';\n    }\n    if (queryResponse.logsFrames.some(hasQueryRefId)) {\n      return 'logs';\n    }\n    if (queryResponse.nodeGraphFrames.some(hasQueryRefId)) {\n      return 'nodeGraph';\n    }\n    if (queryResponse.traceFrames.some(hasQueryRefId)) {\n      return 'traces';\n    }\n  }\n\n  // falling back to table\n  return 'table';\n}\n","import { partial } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { DeepMap, FieldError, useForm } from 'react-hook-form';\n\nimport { locationUtil, SelectableValue } from '@grafana/data';\nimport { config, locationService, reportInteraction } from '@grafana/runtime';\nimport { Alert, Button, Field, InputControl, Modal, RadioButtonGroup } from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { removeDashboardToFetchFromLocalStorage } from 'app/features/dashboard/state/initDashboard';\nimport { ExploreId, AccessControlAction, useSelector } from 'app/types';\n\nimport { getExploreItemSelector } from '../state/selectors';\n\nimport { setDashboardInLocalStorage, AddToDashboardError } from './addToDashboard';\n\nenum SaveTarget {\n  NewDashboard = 'new-dashboard',\n  ExistingDashboard = 'existing-dashboard',\n}\n\ninterface SaveTargetDTO {\n  saveTarget: SaveTarget;\n}\ninterface SaveToNewDashboardDTO extends SaveTargetDTO {\n  saveTarget: SaveTarget.NewDashboard;\n}\n\ninterface SaveToExistingDashboard extends SaveTargetDTO {\n  saveTarget: SaveTarget.ExistingDashboard;\n  dashboardUid: string;\n}\n\ntype FormDTO = SaveToNewDashboardDTO | SaveToExistingDashboard;\n\nfunction assertIsSaveToExistingDashboardError(\n  errors: DeepMap<FormDTO, FieldError>\n): asserts errors is DeepMap<SaveToExistingDashboard, FieldError> {\n  // the shape of the errors object is always compatible with the type above, but we need to\n  // explicitly assert its type so that TS can narrow down FormDTO to SaveToExistingDashboard\n  // when we use it in the form.\n}\n\nfunction getDashboardURL(dashboardUid?: string) {\n  return dashboardUid ? `d/${dashboardUid}` : 'dashboard/new';\n}\n\nenum GenericError {\n  UNKNOWN = 'unknown-error',\n  NAVIGATION = 'navigation-error',\n}\n\ninterface SubmissionError {\n  error: AddToDashboardError | GenericError;\n  message: string;\n}\n\ninterface Props {\n  onClose: () => void;\n  exploreId: ExploreId;\n}\n\nexport const AddToDashboardModal = ({ onClose, exploreId }: Props) => {\n  const exploreItem = useSelector(getExploreItemSelector(exploreId))!;\n  const [submissionError, setSubmissionError] = useState<SubmissionError | undefined>();\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n    watch,\n  } = useForm<FormDTO>({\n    defaultValues: { saveTarget: SaveTarget.NewDashboard },\n  });\n\n  const canCreateDashboard = contextSrv.hasAccess(AccessControlAction.DashboardsCreate, contextSrv.isEditor);\n  const canWriteDashboard = contextSrv.hasAccess(AccessControlAction.DashboardsWrite, contextSrv.isEditor);\n\n  const saveTargets: Array<SelectableValue<SaveTarget>> = [];\n  if (canCreateDashboard) {\n    saveTargets.push({\n      label: 'New dashboard',\n      value: SaveTarget.NewDashboard,\n    });\n  }\n  if (canWriteDashboard) {\n    saveTargets.push({\n      label: 'Existing dashboard',\n      value: SaveTarget.ExistingDashboard,\n    });\n  }\n\n  const saveTarget = saveTargets.length > 1 ? watch('saveTarget') : saveTargets[0].value;\n\n  const modalTitle = `Add panel to ${saveTargets.length > 1 ? 'dashboard' : saveTargets[0].label!.toLowerCase()}`;\n\n  const onSubmit = async (openInNewTab: boolean, data: FormDTO) => {\n    setSubmissionError(undefined);\n    const dashboardUid = data.saveTarget === SaveTarget.ExistingDashboard ? data.dashboardUid : undefined;\n\n    reportInteraction('e_2_d_submit', {\n      newTab: openInNewTab,\n      saveTarget: data.saveTarget,\n      queries: exploreItem.queries.length,\n    });\n\n    try {\n      await setDashboardInLocalStorage({\n        dashboardUid,\n        datasource: exploreItem.datasourceInstance?.getRef(),\n        queries: exploreItem.queries,\n        queryResponse: exploreItem.queryResponse,\n      });\n    } catch (error) {\n      switch (error) {\n        case AddToDashboardError.FETCH_DASHBOARD:\n          setSubmissionError({ error, message: 'Could not fetch dashboard information. Please try again.' });\n          break;\n        case AddToDashboardError.SET_DASHBOARD_LS:\n          setSubmissionError({ error, message: 'Could not add panel to dashboard. Please try again.' });\n          break;\n        default:\n          setSubmissionError({ error: GenericError.UNKNOWN, message: 'Something went wrong. Please try again.' });\n      }\n      return;\n    }\n\n    const dashboardURL = getDashboardURL(dashboardUid);\n    if (!openInNewTab) {\n      onClose();\n      locationService.push(locationUtil.stripBaseFromUrl(dashboardURL));\n      return;\n    }\n\n    const didTabOpen = !!global.open(config.appUrl + dashboardURL, '_blank');\n    if (!didTabOpen) {\n      setSubmissionError({\n        error: GenericError.NAVIGATION,\n        message: 'Could not navigate to the selected dashboard. Please try again.',\n      });\n      removeDashboardToFetchFromLocalStorage();\n      return;\n    }\n    onClose();\n  };\n\n  useEffect(() => {\n    reportInteraction('e_2_d_open');\n  }, []);\n\n  return (\n    <Modal title={modalTitle} onDismiss={onClose} isOpen>\n      <form>\n        {saveTargets.length > 1 && (\n          <InputControl\n            control={control}\n            render={({ field: { ref, ...field } }) => (\n              <Field label=\"Target dashboard\" description=\"Choose where to add the panel.\">\n                <RadioButtonGroup options={saveTargets} {...field} id=\"e2d-save-target\" />\n              </Field>\n            )}\n            name=\"saveTarget\"\n          />\n        )}\n\n        {saveTarget === SaveTarget.ExistingDashboard &&\n          (() => {\n            assertIsSaveToExistingDashboardError(errors);\n            return (\n              <InputControl\n                render={({ field: { ref, value, onChange, ...field } }) => (\n                  <Field\n                    label=\"Dashboard\"\n                    description=\"Select in which dashboard the panel will be created.\"\n                    error={errors.dashboardUid?.message}\n                    invalid={!!errors.dashboardUid}\n                  >\n                    <DashboardPicker\n                      {...field}\n                      inputId=\"e2d-dashboard-picker\"\n                      defaultOptions\n                      onChange={(d) => onChange(d?.uid)}\n                    />\n                  </Field>\n                )}\n                control={control}\n                name=\"dashboardUid\"\n                shouldUnregister\n                rules={{ required: { value: true, message: 'This field is required.' } }}\n              />\n            );\n          })()}\n\n        {submissionError && (\n          <Alert severity=\"error\" title=\"Error adding the panel\">\n            {submissionError.message}\n          </Alert>\n        )}\n\n        <Modal.ButtonRow>\n          <Button type=\"reset\" onClick={onClose} fill=\"outline\" variant=\"secondary\">\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            variant=\"secondary\"\n            onClick={handleSubmit(partial(onSubmit, true))}\n            icon=\"external-link-alt\"\n          >\n            Open in new tab\n          </Button>\n          <Button type=\"submit\" variant=\"primary\" onClick={handleSubmit(partial(onSubmit, false))} icon=\"apps\">\n            Open dashboard\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { ToolbarButton } from '@grafana/ui';\nimport { ExploreId, useSelector } from 'app/types';\n\nimport { getExploreItemSelector } from '../state/selectors';\n\nimport { AddToDashboardModal } from './AddToDashboardModal';\n\ninterface Props {\n  exploreId: ExploreId;\n}\n\nexport const AddToDashboard = ({ exploreId }: Props) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const selectExploreItem = getExploreItemSelector(exploreId);\n  const explorePaneHasQueries = !!useSelector(selectExploreItem)?.queries?.length;\n\n  return (\n    <>\n      <ToolbarButton\n        icon=\"apps\"\n        variant=\"canvas\"\n        onClick={() => setIsOpen(true)}\n        aria-label=\"Add to dashboard\"\n        disabled={!explorePaneHasQueries}\n      >\n        Add to dashboard\n      </ToolbarButton>\n\n      {isOpen && <AddToDashboardModal onClose={() => setIsOpen(false)} exploreId={exploreId} />}\n    </>\n  );\n};\n"],"names":["AddToDashboardError","createDashboard","dto","setDashboardInLocalStorage","options","panelType","getPanelType","panel","isVisible","query","hasRefId","refId","frame","queries","queryResponse","hasQueryRefId","SaveTarget","assertIsSaveToExistingDashboardError","errors","getDashboardURL","dashboardUid","GenericError","AddToDashboardModal","onClose","exploreId","exploreItem","submissionError","setSubmissionError","handleSubmit","control","watch","canCreateDashboard","canWriteDashboard","saveTargets","saveTarget","modalTitle","onSubmit","openInNewTab","data","error","dashboardURL","config","Modal","InputControl","ref","field","Field","RadioButtonGroup","value","onChange","DashboardPicker","d","Alert","Button","AddToDashboard","isOpen","setIsOpen","selectExploreItem","explorePaneHasQueries","ToolbarButton"],"sourceRoot":""}