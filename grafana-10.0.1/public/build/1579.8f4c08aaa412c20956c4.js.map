{"version":3,"file":"1579.8f4c08aaa412c20956c4.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PluginHelp/PluginHelp.tsx","webpack://grafana/./public/app/features/datasources/components/picker/AddNewDataSourceButton.tsx","webpack://grafana/./public/app/features/datasources/hooks.ts","webpack://grafana/./public/app/features/datasources/components/picker/DataSourceCard.tsx","webpack://grafana/./public/app/features/datasources/components/picker/utils.ts","webpack://grafana/./public/app/features/datasources/components/picker/BuiltInDataSourceList.tsx","webpack://grafana/./public/app/features/datasources/components/picker/DataSourceList.tsx","webpack://grafana/./public/app/features/datasources/components/picker/DataSourceModal.tsx","webpack://grafana/./public/app/features/datasources/components/picker/DataSourceLogo.tsx","webpack://grafana/./public/app/features/datasources/components/picker/popperModifiers.ts","webpack://grafana/./public/app/features/datasources/components/picker/DataSourceDropdown.tsx","webpack://grafana/./public/app/features/datasources/components/picker/DataSourcePicker.tsx","webpack://grafana/./public/app/features/query/state/updateQueries.ts","webpack://grafana/./public/app/features/query/components/QueryGroupOptions.tsx","webpack://grafana/./public/app/features/query/components/QueryGroup.tsx","webpack://grafana/./public/app/features/search/hooks/useSearchKeyboardSelection.ts"],"sourcesContent":["import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { renderMarkdown } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { LoadingPlaceholder } from '@grafana/ui';\n\ninterface Props {\n  pluginId: string;\n}\n\nexport function PluginHelp({ pluginId }: Props) {\n  const { value, loading, error } = useAsync(async () => {\n    return getBackendSrv().get(`/api/plugins/${pluginId}/markdown/query_help`);\n  }, []);\n\n  const renderedMarkdown = renderMarkdown(value);\n\n  if (loading) {\n    return <LoadingPlaceholder text=\"Loading help...\" />;\n  }\n\n  if (error) {\n    return <h3>An error occurred when loading help.</h3>;\n  }\n\n  if (value === '') {\n    return <h3>No query help could be found.</h3>;\n  }\n\n  return <div className=\"markdown-html\" dangerouslySetInnerHTML={{ __html: renderedMarkdown }} />;\n}\n","import React from 'react';\n\nimport { LinkButton, ButtonVariant } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { ROUTES as CONNECTIONS_ROUTES } from 'app/features/connections/constants';\nimport { DATASOURCES_ROUTES } from 'app/features/datasources/constants';\nimport { AccessControlAction } from 'app/types';\n\ninterface AddNewDataSourceButtonProps {\n  onClick?: () => void;\n  variant?: ButtonVariant;\n}\n\nexport function AddNewDataSourceButton({ variant, onClick }: AddNewDataSourceButtonProps) {\n  const hasCreateRights = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const newDataSourceURL = config.featureToggles.dataConnectionsConsole\n    ? CONNECTIONS_ROUTES.DataSourcesNew\n    : DATASOURCES_ROUTES.New;\n\n  return (\n    <LinkButton\n      variant={variant || 'primary'}\n      href={newDataSourceURL}\n      disabled={!hasCreateRights}\n      tooltip={!hasCreateRights ? 'You do not have permission to configure new data sources' : undefined}\n      onClick={onClick}\n      target=\"_blank\"\n    >\n      Configure a new data source\n    </LinkButton>\n  );\n}\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { useLocalStorage } from 'react-use';\nimport { Observable } from 'rxjs';\n\nimport { DataSourceInstanceSettings, DataSourceRef } from '@grafana/data';\nimport { GetDataSourceListFilters, getDataSourceSrv } from '@grafana/runtime';\n\nexport const LOCAL_STORAGE_KEY = 'grafana.features.datasources.components.picker.DataSourceDropDown.history';\n\n/**\n * Stores the uid of the last 5 data sources selected by the user. The last UID is the one most recently used.\n */\nexport function useRecentlyUsedDataSources(): [string[], (ds: DataSourceInstanceSettings) => void] {\n  const [value = [], setStorage] = useLocalStorage<string[]>(LOCAL_STORAGE_KEY, []);\n\n  const pushRecentlyUsedDataSource = useCallback(\n    (ds: DataSourceInstanceSettings) => {\n      if (ds.meta.builtIn) {\n        // Prevent storing the built in datasources (-- Grafana --, -- Mixed --,  -- Dashboard --)\n        return;\n      }\n      if (value.includes(ds.uid)) {\n        // Prevent storing multiple copies of the same data source, put it at the front of the array instead.\n        value.splice(\n          value.findIndex((dsUid) => ds.uid === dsUid),\n          1\n        );\n        setStorage([...value, ds.uid]);\n      } else {\n        setStorage([...value, ds.uid].slice(1, 6));\n      }\n    },\n    [value, setStorage]\n  );\n\n  return [value, pushRecentlyUsedDataSource];\n}\n\nexport function useDatasources(filters: GetDataSourceListFilters) {\n  const dataSourceSrv = getDataSourceSrv();\n  const dataSources = dataSourceSrv.getList(filters);\n\n  return dataSources;\n}\n\nexport function useDatasource(dataSource: string | DataSourceRef | DataSourceInstanceSettings | null | undefined) {\n  const dataSourceSrv = getDataSourceSrv();\n\n  if (!dataSource) {\n    return undefined;\n  }\n\n  if (typeof dataSource === 'string') {\n    return dataSourceSrv.getInstanceSettings(dataSource);\n  }\n\n  return dataSourceSrv.getInstanceSettings(dataSource);\n}\n\nexport interface KeybaordNavigatableListProps {\n  keyboardEvents?: Observable<React.KeyboardEvent>;\n  containerRef: React.RefObject<HTMLElement>;\n}\n\n/**\n * Allows navigating lists of elements where the data-role attribute is set to \"keyboardSelectableItem\"\n * @param props\n */\nexport function useKeyboardNavigatableList(props: KeybaordNavigatableListProps): [Record<string, string>, string] {\n  const { keyboardEvents, containerRef } = props;\n  const selectedIndex = useRef<number>(0);\n\n  const attributeName = 'data-role';\n  const roleName = 'keyboardSelectableItem';\n  const navigatableItemProps = { ...{ [attributeName]: roleName } };\n  const querySelectorNavigatableElements = `[${attributeName}=\"${roleName}\"`;\n\n  const selectedAttributeName = 'data-selectedItem';\n  const selectedItemCssSelector = `[${selectedAttributeName}=\"true\"]`;\n\n  const selectItem = useCallback(\n    (index: number) => {\n      const listItems = containerRef?.current?.querySelectorAll<HTMLElement | HTMLButtonElement | HTMLAnchorElement>(\n        querySelectorNavigatableElements\n      );\n      const selectedItem = listItems?.item(index % listItems?.length);\n\n      listItems?.forEach((li) => li.setAttribute(selectedAttributeName, 'false'));\n\n      if (selectedItem) {\n        selectedItem.scrollIntoView({ block: 'center' });\n        selectedItem.setAttribute(selectedAttributeName, 'true');\n      }\n    },\n    [containerRef, querySelectorNavigatableElements]\n  );\n\n  const clickSelectedElement = useCallback(() => {\n    containerRef?.current\n      ?.querySelector<HTMLElement | HTMLButtonElement | HTMLAnchorElement>(selectedItemCssSelector)\n      ?.querySelector<HTMLButtonElement>('button') // This is a bit weird. The main use for this would be to select card items, however the root of the card component does not have the click event handler, instead it's attached to a button inside it.\n      ?.click();\n  }, [containerRef, selectedItemCssSelector]);\n\n  useEffect(() => {\n    if (!keyboardEvents) {\n      return;\n    }\n    const sub = keyboardEvents.subscribe({\n      next: (keyEvent) => {\n        switch (keyEvent?.code) {\n          case 'ArrowDown': {\n            selectItem(++selectedIndex.current);\n            keyEvent.preventDefault();\n            break;\n          }\n          case 'ArrowUp':\n            selectedIndex.current = selectedIndex.current > 0 ? selectedIndex.current - 1 : selectedIndex.current;\n            selectItem(selectedIndex.current);\n            keyEvent.preventDefault();\n            break;\n          case 'Enter':\n            clickSelectedElement();\n            break;\n        }\n      },\n    });\n    return () => sub.unsubscribe();\n  }, [keyboardEvents, selectItem, clickSelectedElement]);\n\n  useEffect(() => {\n    // This observer is used to keep track of the number of items in the list\n    // that can change dinamically (e.g. when filtering a dropdown list)\n    const listObserver = new MutationObserver((mutations) => {\n      const listHasChanged = mutations.some(\n        (mutation) =>\n          (mutation.addedNodes && mutation.addedNodes.length > 0) ||\n          (mutation.removedNodes && mutation.removedNodes.length > 0)\n      );\n\n      listHasChanged && selectItem(0);\n    });\n\n    if (containerRef.current) {\n      listObserver.observe(containerRef.current, {\n        childList: true,\n      });\n    }\n\n    return () => {\n      listObserver.disconnect();\n    };\n  }, [containerRef, querySelectorNavigatableElements, selectItem]);\n\n  return [navigatableItemProps, selectedItemCssSelector];\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Card, TagList, useStyles2 } from '@grafana/ui';\n\ninterface DataSourceCardProps {\n  ds: DataSourceInstanceSettings;\n  onClick: () => void;\n  selected: boolean;\n  description?: string;\n}\n\nexport function DataSourceCard({ ds, onClick, selected, description, ...htmlProps }: DataSourceCardProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Card\n      key={ds.uid}\n      onClick={onClick}\n      className={cx(styles.card, selected ? styles.selected : undefined)}\n      {...htmlProps}\n    >\n      <Card.Heading className={styles.heading}>\n        <div className={styles.headingContent}>\n          <span className={styles.name}>\n            {ds.name} {ds.isDefault ? <TagList tags={['default']} /> : null}\n          </span>\n          <small className={styles.type}>{description || ds.meta.name}</small>\n        </div>\n      </Card.Heading>\n      <Card.Figure className={styles.logo}>\n        <img src={ds.meta.info.logos.small} alt={`${ds.meta.name} Logo`} />\n      </Card.Figure>\n    </Card>\n  );\n}\n\n// Get styles for the component\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    card: css`\n      cursor: pointer;\n      background-color: ${theme.colors.background.primary};\n      border-bottom: 1px solid ${theme.colors.border.weak};\n      // Move to list component\n      margin-bottom: 0;\n      border-radius: 0;\n      padding: ${theme.spacing(1)};\n    `,\n    heading: css`\n      width: 100%;\n      overflow: hidden;\n      // This is needed to enable ellipsis when text overlfows\n      > button {\n        width: 100%;\n      }\n    `,\n    headingContent: css`\n      color: ${theme.colors.text.secondary};\n      width: 100%;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      display: flex;\n      justify-content: space-between;\n    `,\n    logo: css`\n      width: 32px;\n      height: 32px;\n      padding: ${theme.spacing(0, 1)};\n      display: flex;\n      align-items: center;\n\n      > img {\n        max-height: 100%;\n        min-width: 24px;\n      }\n    `,\n    name: css`\n      color: ${theme.colors.text.primary};\n      display: flex;\n      gap: ${theme.spacing(2)};\n    `,\n    type: css`\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      display: flex;\n      align-items: center;\n    `,\n    separator: css`\n      margin: 0 ${theme.spacing(1)};\n      color: ${theme.colors.border.weak};\n    `,\n    selected: css`\n      background-color: ${theme.colors.background.secondary};\n    `,\n    meta: css`\n      display: block;\n      overflow-wrap: unset;\n      white-space: nowrap;\n      width: 100%;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    `,\n  };\n}\n","import { DataSourceInstanceSettings, DataSourceJsonData, DataSourceRef } from '@grafana/data';\n\nexport function isDataSourceMatch(\n  ds: DataSourceInstanceSettings | undefined,\n  current: string | DataSourceInstanceSettings | DataSourceRef | null | undefined\n): boolean {\n  if (!ds) {\n    return false;\n  }\n  if (!current) {\n    return false;\n  }\n  if (typeof current === 'string') {\n    return ds.uid === current;\n  }\n  return ds.uid === current.uid;\n}\n\nexport function dataSourceLabel(\n  dataSource: DataSourceInstanceSettings<DataSourceJsonData> | string | DataSourceRef | null | undefined\n) {\n  if (!dataSource) {\n    return 'Unknown';\n  }\n\n  if (typeof dataSource === 'string') {\n    return `${dataSource} - not found`;\n  }\n\n  if ('name' in dataSource) {\n    return dataSource.name;\n  }\n\n  if (dataSource.uid) {\n    return `${dataSource.uid} - not found`;\n  }\n\n  return 'Unknown';\n}\n\nexport function getDataSourceCompareFn(\n  current: DataSourceRef | DataSourceInstanceSettings | string | null | undefined,\n  recentlyUsedDataSources: string[],\n  dataSourceVariablesIDs: string[]\n) {\n  const cmpDataSources = (a: DataSourceInstanceSettings, b: DataSourceInstanceSettings) => {\n    // Sort the current ds before everything else.\n    if (current && isDataSourceMatch(a, current)) {\n      return -1;\n    } else if (current && isDataSourceMatch(b, current)) {\n      return 1;\n    }\n\n    // Sort recently used data sources by latest used, but after current.\n    const aIndex = recentlyUsedDataSources.indexOf(a.uid);\n    const bIndex = recentlyUsedDataSources.indexOf(b.uid);\n    if (aIndex > -1 && aIndex > bIndex) {\n      return -1;\n    }\n    if (bIndex > -1 && bIndex > aIndex) {\n      return 1;\n    }\n\n    // Sort variables before the rest. Variables sorted alphabetically by name.\n    const aIsVariable = dataSourceVariablesIDs.includes(a.uid);\n    const bIsVariable = dataSourceVariablesIDs.includes(b.uid);\n    if (aIsVariable && !bIsVariable) {\n      return -1;\n    } else if (bIsVariable && !aIsVariable) {\n      return 1;\n    } else if (bIsVariable && aIsVariable) {\n      return a.name < b.name ? -1 : 1;\n    }\n\n    // Sort built in DataSources to the bottom and alphabetically by name.\n    if (a.meta.builtIn && !b.meta.builtIn) {\n      return 1;\n    } else if (b.meta.builtIn && !a.meta.builtIn) {\n      return -1;\n    } else if (a.meta.builtIn && b.meta.builtIn) {\n      return a.name < b.name ? -1 : 1;\n    }\n\n    // Sort the rest alphabetically by name.\n    return a.name < b.name ? -1 : 1;\n  };\n\n  return cmpDataSources;\n}\n\n/**\n * Given a data source and a search term, returns true if the data source matches the search term.\n * Useful to filter data sources by name containing an string.\n * @param ds\n * @param searchTerm\n * @returns\n */\nexport function matchDataSourceWithSearch(ds: DataSourceInstanceSettings, searchTerm = '') {\n  return ds.name.toLowerCase().includes(searchTerm.toLowerCase());\n}\n","import React from 'react';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourceRef } from '@grafana/schema';\n\nimport { useDatasources } from '../../hooks';\n\nimport { DataSourceCard } from './DataSourceCard';\nimport { isDataSourceMatch } from './utils';\n\nconst CUSTOM_DESCRIPTIONS_BY_UID: Record<string, string> = {\n  grafana: 'Discover visualizations using mock data',\n  '-- Mixed --': 'Use multiple data sources',\n  '-- Dashboard --': 'Reuse query results from other visualizations',\n};\n\ninterface BuiltInDataSourceListProps {\n  className?: string;\n  current: DataSourceRef | string | null | undefined;\n  onChange: (ds: DataSourceInstanceSettings) => void;\n}\n\nexport function BuiltInDataSourceList({ className, current, onChange }: BuiltInDataSourceListProps) {\n  const grafanaDataSources = useDatasources({ mixed: true, dashboard: true, filter: (ds) => !!ds.meta.builtIn });\n\n  return (\n    <div className={className}>\n      {grafanaDataSources.map((ds) => {\n        return (\n          <DataSourceCard\n            key={ds.uid}\n            ds={ds}\n            description={CUSTOM_DESCRIPTIONS_BY_UID[ds.uid]}\n            selected={isDataSourceMatch(ds, current)}\n            onClick={() => onChange(ds)}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport React, { useRef } from 'react';\nimport { Observable } from 'rxjs';\n\nimport { DataSourceInstanceSettings, DataSourceRef, GrafanaTheme2 } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { useDatasources, useKeyboardNavigatableList, useRecentlyUsedDataSources } from '../../hooks';\n\nimport { AddNewDataSourceButton } from './AddNewDataSourceButton';\nimport { DataSourceCard } from './DataSourceCard';\nimport { getDataSourceCompareFn, isDataSourceMatch } from './utils';\n\n/**\n * Component props description for the {@link DataSourceList}\n *\n * @internal\n */\nexport interface DataSourceListProps {\n  className?: string;\n  onChange: (ds: DataSourceInstanceSettings) => void;\n  current: DataSourceRef | DataSourceInstanceSettings | string | null | undefined;\n  /** Would be nicer if these parameters were part of a filtering object */\n  tracing?: boolean;\n  mixed?: boolean;\n  dashboard?: boolean;\n  metrics?: boolean;\n  type?: string | string[];\n  annotations?: boolean;\n  variables?: boolean;\n  alerting?: boolean;\n  pluginId?: string;\n  /** If true,we show only DSs with logs; and if true, pluginId shouldnt be passed in */\n  logs?: boolean;\n  width?: number;\n  keyboardEvents?: Observable<React.KeyboardEvent>;\n  inputId?: string;\n  filter?: (dataSource: DataSourceInstanceSettings) => boolean;\n  onClear?: () => void;\n  onClickEmptyStateCTA?: () => void;\n  enableKeyboardNavigation?: boolean;\n}\n\nexport function DataSourceList(props: DataSourceListProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [navigatableProps, selectedItemCssSelector] = useKeyboardNavigatableList({\n    keyboardEvents: props.keyboardEvents,\n    containerRef: containerRef,\n  });\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, selectedItemCssSelector);\n\n  const { className, current, onChange, enableKeyboardNavigation, onClickEmptyStateCTA } = props;\n  const dataSources = useDatasources({\n    alerting: props.alerting,\n    annotations: props.annotations,\n    dashboard: props.dashboard,\n    logs: props.logs,\n    metrics: props.metrics,\n    mixed: props.mixed,\n    pluginId: props.pluginId,\n    tracing: props.tracing,\n    type: props.type,\n    variables: props.variables,\n  });\n\n  const [recentlyUsedDataSources, pushRecentlyUsedDataSource] = useRecentlyUsedDataSources();\n  const filteredDataSources = props.filter ? dataSources.filter(props.filter) : dataSources;\n\n  return (\n    <div ref={containerRef} className={cx(className, styles.container)}>\n      {filteredDataSources.length === 0 && (\n        <EmptyState className={styles.emptyState} onClickCTA={onClickEmptyStateCTA} />\n      )}\n      {filteredDataSources\n        .sort(getDataSourceCompareFn(current, recentlyUsedDataSources, getDataSourceVariableIDs()))\n        .map((ds) => (\n          <DataSourceCard\n            key={ds.uid}\n            ds={ds}\n            onClick={() => {\n              pushRecentlyUsedDataSource(ds);\n              onChange(ds);\n            }}\n            selected={isDataSourceMatch(ds, current)}\n            {...(enableKeyboardNavigation ? navigatableProps : {})}\n          />\n        ))}\n    </div>\n  );\n}\n\nfunction EmptyState({ className, onClickCTA }: { className?: string; onClickCTA?: () => void }) {\n  const styles = useStyles2(getEmptyStateStyles);\n  return (\n    <div className={cx(className, styles.container)}>\n      <p className={styles.message}>No data sources found</p>\n      <AddNewDataSourceButton onClick={onClickCTA} />\n    </div>\n  );\n}\n\nfunction getEmptyStateStyles(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n    `,\n    message: css`\n      margin-bottom: ${theme.spacing(3)};\n    `,\n  };\n}\n\nfunction getDataSourceVariableIDs() {\n  const templateSrv = getTemplateSrv();\n  /** Unforunately there is no easy way to identify data sources that are variables. The uid of the data source will be the name of the variable in a templating syntax $([name]) **/\n  return templateSrv\n    .getVariables()\n    .filter((v) => v.type === 'datasource')\n    .map((v) => `\\${${v.id}}`);\n}\n\nfunction getStyles(theme: GrafanaTheme2, selectedItemCssSelector: string) {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      ${selectedItemCssSelector} {\n        background-color: ${theme.colors.background.secondary};\n      }\n    `,\n    emptyState: css`\n      height: 100%;\n      flex: 1;\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport { once } from 'lodash';\nimport React, { useState } from 'react';\nimport { DropzoneOptions } from 'react-dropzone';\n\nimport { DataSourceInstanceSettings, DataSourceRef, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  Modal,\n  FileDropzone,\n  FileDropzoneDefaultChildren,\n  CustomScrollbar,\n  useStyles2,\n  Input,\n  Icon,\n} from '@grafana/ui';\nimport * as DFImport from 'app/features/dataframe-import';\n\nimport { AddNewDataSourceButton } from './AddNewDataSourceButton';\nimport { BuiltInDataSourceList } from './BuiltInDataSourceList';\nimport { DataSourceList } from './DataSourceList';\nimport { matchDataSourceWithSearch } from './utils';\n\nconst INTERACTION_EVENT_NAME = 'dashboards_dspickermodal_clicked';\nconst INTERACTION_ITEM = {\n  SELECT_DS: 'select_ds',\n  UPLOAD_FILE: 'upload_file',\n  CONFIG_NEW_DS: 'config_new_ds',\n  CONFIG_NEW_DS_EMPTY_STATE: 'config_new_ds_empty_state',\n  SEARCH: 'search',\n  DISMISS: 'dismiss',\n};\n\ninterface DataSourceModalProps {\n  onChange: (ds: DataSourceInstanceSettings) => void;\n  current: DataSourceRef | string | null | undefined;\n  onDismiss: () => void;\n  recentlyUsed?: string[];\n  enableFileUpload?: boolean;\n  fileUploadOptions?: DropzoneOptions;\n  reportedInteractionFrom?: string;\n}\n\nexport function DataSourceModal({\n  enableFileUpload,\n  fileUploadOptions,\n  onChange,\n  current,\n  onDismiss,\n  reportedInteractionFrom,\n}: DataSourceModalProps) {\n  const styles = useStyles2(getDataSourceModalStyles);\n  const [search, setSearch] = useState('');\n  const analyticsInteractionSrc = reportedInteractionFrom || 'modal';\n\n  const onDismissModal = () => {\n    onDismiss();\n    reportInteraction(INTERACTION_EVENT_NAME, { item: INTERACTION_ITEM.DISMISS, src: analyticsInteractionSrc });\n  };\n  const onChangeDataSource = (ds: DataSourceInstanceSettings) => {\n    onChange(ds);\n    reportInteraction(INTERACTION_EVENT_NAME, {\n      item: INTERACTION_ITEM.SELECT_DS,\n      ds_type: ds.type,\n      src: analyticsInteractionSrc,\n    });\n  };\n  // Memoizing to keep once() cached so it avoids reporting multiple times\n  const reportSearchUsageOnce = React.useMemo(\n    () =>\n      once(() => {\n        reportInteraction(INTERACTION_EVENT_NAME, { item: 'search', src: analyticsInteractionSrc });\n      }),\n    [analyticsInteractionSrc]\n  );\n\n  return (\n    <Modal\n      title=\"Select data source\"\n      closeOnEscape={true}\n      closeOnBackdropClick={true}\n      isOpen={true}\n      className={styles.modal}\n      contentClassName={styles.modalContent}\n      onClickBackdrop={onDismissModal}\n      onDismiss={onDismissModal}\n    >\n      <div className={styles.leftColumn}>\n        <Input\n          autoFocus\n          className={styles.searchInput}\n          value={search}\n          prefix={<Icon name=\"search\" />}\n          placeholder=\"Search data source\"\n          onChange={(e) => {\n            setSearch(e.currentTarget.value);\n            reportSearchUsageOnce();\n          }}\n        />\n        <CustomScrollbar>\n          <DataSourceList\n            dashboard={false}\n            mixed={false}\n            variables\n            filter={(ds) => matchDataSourceWithSearch(ds, search) && !ds.meta.builtIn}\n            onChange={onChangeDataSource}\n            current={current}\n            onClickEmptyStateCTA={() =>\n              reportInteraction(INTERACTION_EVENT_NAME, {\n                item: INTERACTION_ITEM.CONFIG_NEW_DS_EMPTY_STATE,\n                src: analyticsInteractionSrc,\n              })\n            }\n          />\n          <BuiltInDataSourceList\n            className={styles.appendBuiltInDataSourcesList}\n            onChange={onChangeDataSource}\n            current={current}\n          />\n        </CustomScrollbar>\n      </div>\n      <div className={styles.rightColumn}>\n        <div className={styles.builtInDataSources}>\n          <CustomScrollbar className={styles.builtInDataSourcesList}>\n            <BuiltInDataSourceList onChange={onChangeDataSource} current={current} />\n          </CustomScrollbar>\n          {enableFileUpload && (\n            <FileDropzone\n              readAs=\"readAsArrayBuffer\"\n              fileListRenderer={() => undefined}\n              options={{\n                maxSize: DFImport.maxFileSize,\n                multiple: false,\n                accept: DFImport.acceptedFiles,\n                ...fileUploadOptions,\n                onDrop: (...args) => {\n                  fileUploadOptions?.onDrop?.(...args);\n                  onDismiss();\n                  reportInteraction(INTERACTION_EVENT_NAME, {\n                    item: INTERACTION_ITEM.UPLOAD_FILE,\n                    src: analyticsInteractionSrc,\n                  });\n                },\n              }}\n            >\n              <FileDropzoneDefaultChildren />\n            </FileDropzone>\n          )}\n        </div>\n        <div className={styles.newDSSection}>\n          <span className={styles.newDSDescription}>Open a new tab and configure a data source</span>\n          <AddNewDataSourceButton\n            variant=\"secondary\"\n            onClick={() => {\n              reportInteraction(INTERACTION_EVENT_NAME, {\n                item: INTERACTION_ITEM.CONFIG_NEW_DS,\n                src: analyticsInteractionSrc,\n              });\n              onDismiss();\n            }}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nfunction getDataSourceModalStyles(theme: GrafanaTheme2) {\n  return {\n    modal: css`\n      width: 80%;\n      height: 80%;\n      max-width: 1200px;\n      max-height: 900px;\n\n      ${theme.breakpoints.down('md')} {\n        width: 100%;\n      }\n    `,\n    modalContent: css`\n      display: flex;\n      flex-direction: row;\n      height: 100%;\n\n      ${theme.breakpoints.down('md')} {\n        flex-direction: column;\n      }\n    `,\n    leftColumn: css`\n      display: flex;\n      flex-direction: column;\n      width: 50%;\n      height: 100%;\n      padding-right: ${theme.spacing(4)};\n      border-right: 1px solid ${theme.colors.border.weak};\n\n      ${theme.breakpoints.down('md')} {\n        width: 100%;\n        border-right: 0;\n        padding-right: 0;\n        flex: 1;\n        overflow-y: auto;\n      }\n    `,\n    rightColumn: css`\n      display: flex;\n      flex-direction: column;\n      width: 50%;\n      height: 100%;\n      justify-items: space-evenly;\n      align-items: stretch;\n      padding-left: ${theme.spacing(4)};\n\n      ${theme.breakpoints.down('md')} {\n        width: 100%;\n        padding-left: 0;\n        flex: 0;\n      }\n    `,\n    builtInDataSources: css`\n      flex: 1 1;\n      margin-bottom: ${theme.spacing(4)};\n\n      ${theme.breakpoints.down('md')} {\n        flex: 0;\n      }\n    `,\n    builtInDataSourcesList: css`\n      ${theme.breakpoints.down('md')} {\n        display: none;\n        margin-bottom: 0;\n      }\n\n      margin-bottom: ${theme.spacing(4)};\n    `,\n    appendBuiltInDataSourcesList: css`\n      ${theme.breakpoints.up('md')} {\n        display: none;\n      }\n    `,\n    newDSSection: css`\n      display: flex;\n      flex-direction: row;\n      width: 100%;\n      justify-content: space-between;\n      align-items: center;\n    `,\n    newDSDescription: css`\n      flex: 1 0;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      color: ${theme.colors.text.secondary};\n    `,\n    searchInput: css`\n      width: 100%;\n      min-height: 32px;\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataSourceInstanceSettings, DataSourceJsonData, GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport interface DataSourceLogoProps {\n  dataSource: DataSourceInstanceSettings<DataSourceJsonData> | undefined;\n}\n\nexport function DataSourceLogo(props: DataSourceLogoProps) {\n  const { dataSource } = props;\n  const styles = useStyles2(getStyles);\n\n  if (!dataSource) {\n    return DataSourceLogoPlaceHolder();\n  }\n\n  return (\n    <img\n      className={styles.pickerDSLogo}\n      alt={`${dataSource.meta.name} logo`}\n      src={dataSource.meta.info.logos.small}\n    ></img>\n  );\n}\n\nexport function DataSourceLogoPlaceHolder() {\n  const styles = useStyles2(getStyles);\n  return <div className={styles.pickerDSLogo}></div>;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    pickerDSLogo: css`\n      height: 20px;\n      width: 20px;\n    `,\n  };\n}\n","import { detectOverflow, Modifier, ModifierArguments } from '@popperjs/core';\n\nconst MODAL_MARGIN = 20;\nconst FLIP_THRESHOLD = 200;\n\nexport const maxSize: Modifier<'maxSize', {}> = {\n  name: 'maxSize',\n  enabled: true,\n  phase: 'main',\n  requires: ['offset', 'preventOverflow', 'flip'],\n  fn({ state, name, options }: ModifierArguments<{}>) {\n    const overflow = detectOverflow(state, options);\n    const { x, y } = state.modifiersData.preventOverflow || { x: 0, y: 0 };\n    const { width, height } = state.rects.popper;\n    const [basePlacement] = state.placement.split('-');\n\n    const widthProp = basePlacement === 'left' ? 'left' : 'right';\n    const heightProp = basePlacement === 'top' ? 'top' : 'bottom';\n\n    state.modifiersData[name] = {\n      width: width - overflow[widthProp] - x,\n      height: height - overflow[heightProp] - y,\n    };\n  },\n};\n\nexport const applyMaxSize: Modifier<'applyMaxSize', {}> = {\n  name: 'applyMaxSize',\n  enabled: true,\n  phase: 'beforeWrite',\n  requires: ['maxSize'],\n  fn({ state }: ModifierArguments<{}>) {\n    const { height, width } = state.modifiersData.maxSize;\n    state.styles.popper.maxHeight = `${height - MODAL_MARGIN}px`;\n    state.styles.popper.minHeight = `${FLIP_THRESHOLD}px`;\n    state.styles.popper.maxWidth = width;\n  },\n};\n","import { css } from '@emotion/css';\nimport { useDialog } from '@react-aria/dialog';\nimport { useOverlay } from '@react-aria/overlays';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { usePopper } from 'react-popper';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { reportInteraction } from '@grafana/runtime';\nimport { DataSourceJsonData } from '@grafana/schema';\nimport { Button, CustomScrollbar, Icon, Input, ModalsController, Portal, useStyles2 } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { useKeyNavigationListener } from 'app/features/search/hooks/useSearchKeyboardSelection';\n\nimport { useDatasource } from '../../hooks';\n\nimport { DataSourceList } from './DataSourceList';\nimport { DataSourceLogo, DataSourceLogoPlaceHolder } from './DataSourceLogo';\nimport { DataSourceModal } from './DataSourceModal';\nimport { applyMaxSize, maxSize } from './popperModifiers';\nimport { PickerContentProps, DataSourceDropdownProps } from './types';\nimport { dataSourceLabel, matchDataSourceWithSearch } from './utils';\n\nconst INTERACTION_EVENT_NAME = 'dashboards_dspicker_clicked';\nconst INTERACTION_ITEM = {\n  OPEN_DROPDOWN: 'open_dspicker',\n  SELECT_DS: 'select_ds',\n  ADD_FILE: 'add_file',\n  OPEN_ADVANCED_DS_PICKER: 'open_advanced_ds_picker',\n  CONFIG_NEW_DS_EMPTY_STATE: 'config_new_ds_empty_state',\n};\n\nexport function DataSourceDropdown(props: DataSourceDropdownProps) {\n  const { current, onChange, hideTextValue, width, ...restProps } = props;\n\n  const [isOpen, setOpen] = useState(false);\n  const [inputHasFocus, setInputHasFocus] = useState(false);\n  const [markerElement, setMarkerElement] = useState<HTMLInputElement | null>();\n  const [selectorElement, setSelectorElement] = useState<HTMLDivElement | null>();\n  const [filterTerm, setFilterTerm] = useState<string>('');\n  const openDropdown = () => {\n    reportInteraction(INTERACTION_EVENT_NAME, { item: INTERACTION_ITEM.OPEN_DROPDOWN });\n    setOpen(true);\n    markerElement?.focus();\n  };\n\n  const { onKeyDown, keyboardEvents } = useKeyNavigationListener();\n\n  useEffect(() => {\n    const sub = keyboardEvents.subscribe({\n      next: (keyEvent) => {\n        switch (keyEvent?.code) {\n          case 'ArrowDown': {\n            openDropdown();\n            keyEvent.preventDefault();\n            break;\n          }\n          case 'ArrowUp':\n            openDropdown();\n            keyEvent.preventDefault();\n            break;\n          case 'Escape':\n            onClose();\n            markerElement?.focus();\n            keyEvent.preventDefault();\n        }\n      },\n    });\n    return () => sub.unsubscribe();\n  });\n\n  const currentDataSourceInstanceSettings = useDatasource(current);\n\n  const popper = usePopper(markerElement, selectorElement, {\n    placement: 'bottom-start',\n    modifiers: [\n      {\n        name: 'offset',\n        options: {\n          offset: [0, 4],\n        },\n      },\n      maxSize,\n      applyMaxSize,\n    ],\n  });\n\n  const onClose = useCallback(() => {\n    setFilterTerm('');\n    setOpen(false);\n  }, [setOpen]);\n\n  const ref = useRef<HTMLDivElement>(null);\n  const { overlayProps, underlayProps } = useOverlay(\n    {\n      onClose: onClose,\n      isDismissable: true,\n      isOpen,\n      shouldCloseOnInteractOutside: (element) => {\n        return markerElement ? !markerElement.isSameNode(element) : false;\n      },\n    },\n    ref\n  );\n  const { dialogProps } = useDialog({}, ref);\n\n  const styles = useStyles2(getStylesDropdown);\n\n  return (\n    <div className={styles.container} data-testid={selectors.components.DataSourcePicker.container} style={{ width }}>\n      {/* This clickable div is just extending the clickable area on the input element to include the prefix and suffix. */}\n      {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */}\n      <div className={styles.trigger} onClick={openDropdown}>\n        <Input\n          className={inputHasFocus ? undefined : styles.input}\n          data-testid={selectors.components.DataSourcePicker.inputV2}\n          prefix={\n            filterTerm && isOpen ? (\n              <DataSourceLogoPlaceHolder />\n            ) : (\n              <DataSourceLogo dataSource={currentDataSourceInstanceSettings} />\n            )\n          }\n          suffix={<Icon name={isOpen ? 'search' : 'angle-down'} />}\n          placeholder={hideTextValue ? '' : dataSourceLabel(currentDataSourceInstanceSettings)}\n          onClick={openDropdown}\n          onFocus={() => {\n            setInputHasFocus(true);\n          }}\n          onBlur={() => {\n            setInputHasFocus(false);\n            onClose();\n          }}\n          onKeyDown={onKeyDown}\n          value={filterTerm}\n          onChange={(e) => {\n            openDropdown();\n            setFilterTerm(e.currentTarget.value);\n          }}\n          ref={setMarkerElement}\n        ></Input>\n      </div>\n      {isOpen ? (\n        <Portal>\n          <div {...underlayProps} />\n          <div\n            ref={ref}\n            {...overlayProps}\n            {...dialogProps}\n            onMouseDown={(e) => {\n              e.preventDefault(); /** Need to prevent default here to stop onMouseDown to trigger onBlur of the input element */\n            }}\n          >\n            <PickerContent\n              keyboardEvents={keyboardEvents}\n              filterTerm={filterTerm}\n              onChange={(ds: DataSourceInstanceSettings<DataSourceJsonData>) => {\n                onClose();\n                onChange(ds);\n              }}\n              onClose={onClose}\n              current={currentDataSourceInstanceSettings}\n              style={popper.styles.popper}\n              ref={setSelectorElement}\n              {...restProps}\n              onDismiss={onClose}\n              {...popper.attributes.popper}\n            />\n          </div>\n        </Portal>\n      ) : null}\n    </div>\n  );\n}\n\nfunction getStylesDropdown(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      position: relative;\n    `,\n    trigger: css`\n      cursor: pointer;\n    `,\n    input: css`\n      input {\n        cursor: pointer;\n      }\n      input::placeholder {\n        color: ${theme.colors.text.primary};\n      }\n    `,\n  };\n}\n\nconst PickerContent = React.forwardRef<HTMLDivElement, PickerContentProps>((props, ref) => {\n  const { filterTerm, onChange, onClose, onClickAddCSV, current } = props;\n  const changeCallback = useCallback(\n    (ds: DataSourceInstanceSettings<DataSourceJsonData>) => {\n      onChange(ds);\n      reportInteraction(INTERACTION_EVENT_NAME, { item: INTERACTION_ITEM.SELECT_DS, ds_type: ds.type });\n    },\n    [onChange]\n  );\n\n  const clickAddCSVCallback = useCallback(() => {\n    onClickAddCSV?.();\n    onClose();\n    reportInteraction(INTERACTION_EVENT_NAME, { item: INTERACTION_ITEM.ADD_FILE });\n  }, [onClickAddCSV, onClose]);\n\n  const styles = useStyles2(getStylesPickerContent);\n\n  return (\n    <div style={props.style} ref={ref} className={styles.container}>\n      <CustomScrollbar>\n        <DataSourceList\n          {...props}\n          enableKeyboardNavigation\n          className={styles.dataSourceList}\n          current={current}\n          onChange={changeCallback}\n          filter={(ds) => matchDataSourceWithSearch(ds, filterTerm)}\n          onClickEmptyStateCTA={() =>\n            reportInteraction(INTERACTION_EVENT_NAME, {\n              item: INTERACTION_ITEM.CONFIG_NEW_DS_EMPTY_STATE,\n            })\n          }\n        ></DataSourceList>\n      </CustomScrollbar>\n      <div className={styles.footer}>\n        <ModalsController>\n          {({ showModal, hideModal }) => (\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              fill=\"text\"\n              onClick={() => {\n                onClose();\n                showModal(DataSourceModal, {\n                  enableFileUpload: props.enableFileUpload,\n                  fileUploadOptions: props.fileUploadOptions,\n                  reportedInteractionFrom: 'ds_picker',\n                  current,\n                  onDismiss: hideModal,\n                  onChange: (ds) => {\n                    onChange(ds);\n                    hideModal();\n                  },\n                });\n                reportInteraction(INTERACTION_EVENT_NAME, { item: INTERACTION_ITEM.OPEN_ADVANCED_DS_PICKER });\n              }}\n            >\n              Open advanced data source picker\n              <Icon name=\"arrow-right\" />\n            </Button>\n          )}\n        </ModalsController>\n        {onClickAddCSV && config.featureToggles.editPanelCSVDragAndDrop && (\n          <Button variant=\"secondary\" size=\"sm\" onClick={clickAddCSVCallback}>\n            Add csv or spreadsheet\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n});\nPickerContent.displayName = 'PickerContent';\n\nfunction getStylesPickerContent(theme: GrafanaTheme2) {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      max-width: 480px;\n      background: ${theme.colors.background.primary};\n      box-shadow: ${theme.shadows.z3};\n    `,\n    picker: css`\n      background: ${theme.colors.background.secondary};\n    `,\n    dataSourceList: css`\n      flex: 1;\n    `,\n    footer: css`\n      flex: 0;\n      display: flex;\n      flex-direction: row-reverse;\n      justify-content: space-between;\n      padding: ${theme.spacing(1.5)};\n      border-top: 1px solid ${theme.colors.border.weak};\n      background-color: ${theme.colors.background.secondary};\n    `,\n  };\n}\n","import React from 'react';\n\nimport {\n  DataSourcePicker as DeprecatedDataSourcePicker,\n  DataSourcePickerProps as DeprecatedDataSourcePickerProps,\n} from '@grafana/runtime';\nimport { config } from 'app/core/config';\n\nimport { DataSourceDropdown } from './DataSourceDropdown';\nimport { DataSourceDropdownProps } from './types';\n\ntype DataSourcePickerProps = DeprecatedDataSourcePickerProps | DataSourceDropdownProps;\n\n/**\n * DataSourcePicker is a wrapper around the old DataSourcePicker and the new one.\n * Depending on the feature toggle, it will render the old or the new one.\n * Feature toggle: advancedDataSourcePicker\n */\nexport function DataSourcePicker(props: DataSourcePickerProps) {\n  return !config.featureToggles.advancedDataSourcePicker ? (\n    <DeprecatedDataSourcePicker {...props} />\n  ) : (\n    <DataSourceDropdown {...props} />\n  );\n}\n","import { CoreApp, DataQuery, DataSourceApi, hasQueryExportSupport, hasQueryImportSupport } from '@grafana/data';\nimport { isExpressionReference } from '@grafana/runtime/src/utils/DataSourceWithBackend';\n\nexport async function updateQueries(\n  nextDS: DataSourceApi,\n  nextDSUidOrVariableExpression: string,\n  queries: DataQuery[],\n  currentDS?: DataSourceApi\n): Promise<DataQuery[]> {\n  let nextQueries = queries;\n  const datasource = { type: nextDS.type, uid: nextDSUidOrVariableExpression };\n  const DEFAULT_QUERY = { ...nextDS?.getDefaultQuery?.(CoreApp.PanelEditor), datasource, refId: 'A' };\n\n  // we are changing data source type\n  if (currentDS?.meta.id !== nextDS.meta.id) {\n    // If changing to mixed do nothing\n    if (nextDS.meta.mixed) {\n      return queries;\n    }\n    // when both data sources support abstract queries\n    else if (hasQueryExportSupport(currentDS) && hasQueryImportSupport(nextDS)) {\n      const abstractQueries = await currentDS.exportToAbstractQueries(queries);\n      nextQueries = await nextDS.importFromAbstractQueries(abstractQueries);\n    }\n    // when datasource supports query import\n    else if (currentDS && nextDS.importQueries) {\n      nextQueries = await nextDS.importQueries(queries, currentDS);\n    }\n    // Otherwise clear queries\n    else {\n      return [DEFAULT_QUERY];\n    }\n  }\n\n  if (nextQueries.length === 0) {\n    return [DEFAULT_QUERY];\n  }\n\n  // Set data source on all queries except expression queries\n  return nextQueries.map((query) => {\n    if (!isExpressionReference(query.datasource) && !nextDS.meta.mixed) {\n      query.datasource = datasource;\n    }\n    return query;\n  });\n}\n","import { css } from '@emotion/css';\nimport React, { PureComponent, ChangeEvent, FocusEvent } from 'react';\n\nimport { rangeUtil, PanelData, DataSourceApi } from '@grafana/data';\nimport { Switch, Input, InlineField, InlineFormLabel, stylesFactory } from '@grafana/ui';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { config } from 'app/core/config';\nimport { QueryGroupOptions } from 'app/types';\n\ninterface Props {\n  options: QueryGroupOptions;\n  dataSource: DataSourceApi;\n  data: PanelData;\n  onChange: (options: QueryGroupOptions) => void;\n}\n\ninterface State {\n  timeRangeFrom: string;\n  timeRangeShift: string;\n  timeRangeHide: boolean;\n  isOpen: boolean;\n  relativeTimeIsValid: boolean;\n  timeShiftIsValid: boolean;\n}\n\nexport class QueryGroupOptionsEditor extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    const { options } = props;\n\n    this.state = {\n      timeRangeFrom: options.timeRange?.from || '',\n      timeRangeShift: options.timeRange?.shift || '',\n      timeRangeHide: options.timeRange?.hide ?? false,\n      isOpen: false,\n      relativeTimeIsValid: true,\n      timeShiftIsValid: true,\n    };\n  }\n\n  onRelativeTimeChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      timeRangeFrom: event.target.value,\n    });\n  };\n\n  onTimeShiftChange = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      timeRangeShift: event.target.value,\n    });\n  };\n\n  onOverrideTime = (event: FocusEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    const newValue = emptyToNull(event.target.value);\n    const isValid = timeRangeValidation(newValue);\n\n    if (isValid && options.timeRange?.from !== newValue) {\n      onChange({\n        ...options,\n        timeRange: {\n          ...(options.timeRange ?? {}),\n          from: newValue,\n        },\n      });\n    }\n\n    this.setState({ relativeTimeIsValid: isValid });\n  };\n\n  onTimeShift = (event: FocusEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    const newValue = emptyToNull(event.target.value);\n    const isValid = timeRangeValidation(newValue);\n\n    if (isValid && options.timeRange?.shift !== newValue) {\n      onChange({\n        ...options,\n        timeRange: {\n          ...(options.timeRange ?? {}),\n          shift: newValue,\n        },\n      });\n    }\n\n    this.setState({ timeShiftIsValid: isValid });\n  };\n\n  onToggleTimeOverride = () => {\n    const { onChange, options } = this.props;\n\n    this.setState({ timeRangeHide: !this.state.timeRangeHide }, () => {\n      onChange({\n        ...options,\n        timeRange: {\n          ...(options.timeRange ?? {}),\n          hide: this.state.timeRangeHide,\n        },\n      });\n    });\n  };\n\n  onCacheTimeoutBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n    onChange({\n      ...options,\n      cacheTimeout: emptyToNull(event.target.value),\n    });\n  };\n\n  onQueryCachingTTLBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    let ttl: number | null = parseInt(event.target.value, 10);\n\n    if (isNaN(ttl) || ttl === 0) {\n      ttl = null;\n    }\n\n    onChange({\n      ...options,\n      queryCachingTTL: ttl,\n    });\n  };\n\n  onMaxDataPointsBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n\n    let maxDataPoints: number | null = parseInt(event.target.value as string, 10);\n\n    if (isNaN(maxDataPoints) || maxDataPoints === 0) {\n      maxDataPoints = null;\n    }\n\n    if (maxDataPoints !== options.maxDataPoints) {\n      onChange({\n        ...options,\n        maxDataPoints,\n      });\n    }\n  };\n\n  onMinIntervalBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const { options, onChange } = this.props;\n    const minInterval = emptyToNull(event.target.value);\n    if (minInterval !== options.minInterval) {\n      onChange({\n        ...options,\n        minInterval,\n      });\n    }\n  };\n\n  renderCacheTimeoutOption() {\n    const { dataSource, options } = this.props;\n\n    const tooltip = `If your time series store has a query cache this option can override the default cache timeout. Specify a\n    numeric value in seconds.`;\n\n    if (!dataSource.meta.queryOptions?.cacheTimeout) {\n      return null;\n    }\n\n    return (\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form\">\n          <InlineFormLabel width={9} tooltip={tooltip}>\n            Cache timeout\n          </InlineFormLabel>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"60\"\n            spellCheck={false}\n            onBlur={this.onCacheTimeoutBlur}\n            defaultValue={options.cacheTimeout ?? ''}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  renderQueryCachingTTLOption() {\n    const { dataSource, options } = this.props;\n\n    const tooltip = `Cache time-to-live: How long results from this queries in this panel will be cached, in milliseconds. Defaults to the TTL in the caching configuration for this datasource.`;\n\n    if (!dataSource.cachingConfig?.enabled) {\n      return null;\n    }\n\n    return (\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form\">\n          <InlineFormLabel width={9} tooltip={tooltip}>\n            Cache TTL\n          </InlineFormLabel>\n          <Input\n            type=\"number\"\n            className=\"width-6\"\n            placeholder={`${dataSource.cachingConfig.TTLMs}`}\n            spellCheck={false}\n            onBlur={this.onQueryCachingTTLBlur}\n            defaultValue={options.queryCachingTTL ?? undefined}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  renderMaxDataPointsOption() {\n    const { data, options } = this.props;\n    const realMd = data.request?.maxDataPoints;\n    const value = options.maxDataPoints ?? '';\n    const isAuto = value === '';\n\n    return (\n      <div className=\"gf-form-inline\">\n        <div className=\"gf-form\">\n          <InlineFormLabel\n            width={9}\n            tooltip={\n              <>\n                The maximum data points per series. Used directly by some data sources and used in calculation of auto\n                interval. With streaming data this value is used for the rolling buffer.\n              </>\n            }\n          >\n            Max data points\n          </InlineFormLabel>\n          <Input\n            type=\"number\"\n            className=\"width-6\"\n            placeholder={`${realMd}`}\n            spellCheck={false}\n            onBlur={this.onMaxDataPointsBlur}\n            defaultValue={value}\n          />\n          {isAuto && (\n            <>\n              <div className=\"gf-form-label query-segment-operator\">=</div>\n              <div className=\"gf-form-label\">Width of panel</div>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  renderIntervalOption() {\n    const { data, dataSource, options } = this.props;\n    const realInterval = data.request?.interval;\n    const minIntervalOnDs = dataSource.interval ?? 'No limit';\n\n    return (\n      <>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              width={9}\n              tooltip={\n                <>\n                  A lower limit for the interval. Recommended to be set to write frequency, for example <code>1m</code>{' '}\n                  if your data is written every minute. Default value can be set in data source settings for most data\n                  sources.\n                </>\n              }\n            >\n              Min interval\n            </InlineFormLabel>\n            <Input\n              type=\"text\"\n              className=\"width-6\"\n              placeholder={`${minIntervalOnDs}`}\n              spellCheck={false}\n              onBlur={this.onMinIntervalBlur}\n              defaultValue={options.minInterval ?? ''}\n            />\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel\n              width={9}\n              tooltip={\n                <>\n                  The evaluated interval that is sent to data source and is used in <code>$__interval</code> and{' '}\n                  <code>$__interval_ms</code>\n                </>\n              }\n            >\n              Interval\n            </InlineFormLabel>\n            <InlineFormLabel width={6}>{realInterval}</InlineFormLabel>\n            <div className=\"gf-form-label query-segment-operator\">=</div>\n            <div className=\"gf-form-label\">Time range / max data points</div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  onOpenOptions = () => {\n    this.setState({ isOpen: true });\n  };\n\n  onCloseOptions = () => {\n    this.setState({ isOpen: false });\n  };\n\n  renderCollapsedText(styles: StylesType): React.ReactNode | undefined {\n    const { data, options } = this.props;\n    const { isOpen } = this.state;\n\n    if (isOpen) {\n      return undefined;\n    }\n\n    let mdDesc = options.maxDataPoints ?? '';\n    if (mdDesc === '' && data.request) {\n      mdDesc = `auto = ${data.request.maxDataPoints}`;\n    }\n\n    let intervalDesc = options.minInterval;\n    if (data.request) {\n      intervalDesc = `${data.request.interval}`;\n    }\n\n    return (\n      <>\n        {<div className={styles.collapsedText}>MD = {mdDesc}</div>}\n        {<div className={styles.collapsedText}>Interval = {intervalDesc}</div>}\n      </>\n    );\n  }\n\n  render() {\n    const { timeRangeHide: hideTimeOverride, relativeTimeIsValid, timeShiftIsValid } = this.state;\n    const { timeRangeFrom: relativeTime, timeRangeShift: timeShift, isOpen } = this.state;\n    const styles = getStyles();\n\n    return (\n      <QueryOperationRow\n        id=\"Query options\"\n        index={0}\n        title=\"Query options\"\n        headerElement={this.renderCollapsedText(styles)}\n        isOpen={isOpen}\n        onOpen={this.onOpenOptions}\n        onClose={this.onCloseOptions}\n      >\n        {this.renderMaxDataPointsOption()}\n        {this.renderIntervalOption()}\n        {this.renderCacheTimeoutOption()}\n        {this.renderQueryCachingTTLOption()}\n\n        <div className=\"gf-form\">\n          <InlineFormLabel width={9}>Relative time</InlineFormLabel>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"1h\"\n            onChange={this.onRelativeTimeChange}\n            onBlur={this.onOverrideTime}\n            invalid={!relativeTimeIsValid}\n            value={relativeTime}\n          />\n        </div>\n\n        <div className=\"gf-form\">\n          <span className=\"gf-form-label width-9\">Time shift</span>\n          <Input\n            type=\"text\"\n            className=\"width-6\"\n            placeholder=\"1h\"\n            onChange={this.onTimeShiftChange}\n            onBlur={this.onTimeShift}\n            invalid={!timeShiftIsValid}\n            value={timeShift}\n          />\n        </div>\n        {(timeShift || relativeTime) && (\n          <div className=\"gf-form-inline\">\n            <InlineField label=\"Hide time info\" labelWidth={18}>\n              <Switch value={hideTimeOverride} onChange={this.onToggleTimeOverride} />\n            </InlineField>\n          </div>\n        )}\n      </QueryOperationRow>\n    );\n  }\n}\n\nconst timeRangeValidation = (value: string | null) => {\n  if (!value) {\n    return true;\n  }\n\n  return rangeUtil.isValidTimeSpan(value);\n};\n\nconst emptyToNull = (value: string) => {\n  return value === '' ? null : value;\n};\n\nconst getStyles = stylesFactory(() => {\n  const { theme } = config;\n\n  return {\n    collapsedText: css`\n      margin-left: ${theme.spacing.md};\n      font-size: ${theme.typography.size.sm};\n      color: ${theme.colors.textWeak};\n    `,\n  };\n});\n\ntype StylesType = ReturnType<typeof getStyles>;\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { DropEvent, FileRejection } from 'react-dropzone';\nimport { Unsubscribable } from 'rxjs';\n\nimport {\n  CoreApp,\n  DataFrameJSON,\n  dataFrameToJSON,\n  DataQuery,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getDataSourceSrv, locationService } from '@grafana/runtime';\nimport { Button, CustomScrollbar, HorizontalGroup, InlineFormLabel, Modal, stylesFactory } from '@grafana/ui';\nimport { PluginHelp } from 'app/core/components/PluginHelp/PluginHelp';\nimport config from 'app/core/config';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { addQuery, queryIsEmpty } from 'app/core/utils/query';\nimport * as DFImport from 'app/features/dataframe-import';\nimport { DataSourceModal } from 'app/features/datasources/components/picker/DataSourceModal';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\nimport { dataSource as expressionDatasource } from 'app/features/expressions/ExpressionDatasource';\nimport { DashboardQueryEditor, isSharedDashboardQuery } from 'app/plugins/datasource/dashboard';\nimport { GrafanaQuery, GrafanaQueryType } from 'app/plugins/datasource/grafana/types';\nimport { QueryGroupOptions } from 'app/types';\n\nimport { PanelQueryRunner } from '../state/PanelQueryRunner';\nimport { updateQueries } from '../state/updateQueries';\n\nimport { GroupActionComponents } from './QueryActionComponent';\nimport { QueryEditorRows } from './QueryEditorRows';\nimport { QueryGroupOptionsEditor } from './QueryGroupOptions';\n\nexport interface Props {\n  queryRunner: PanelQueryRunner;\n  options: QueryGroupOptions;\n  onOpenQueryInspector?: () => void;\n  onRunQueries: () => void;\n  onOptionsChange: (options: QueryGroupOptions) => void;\n}\n\ninterface State {\n  dataSource?: DataSourceApi;\n  dsSettings?: DataSourceInstanceSettings;\n  queries: DataQuery[];\n  helpContent: React.ReactNode;\n  isLoadingHelp: boolean;\n  isPickerOpen: boolean;\n  isAddingMixed: boolean;\n  isDataSourceModalOpen: boolean;\n  data: PanelData;\n  isHelpOpen: boolean;\n  defaultDataSource?: DataSourceApi;\n  scrollElement?: HTMLDivElement;\n}\n\nexport class QueryGroup extends PureComponent<Props, State> {\n  backendSrv = backendSrv;\n  dataSourceSrv = getDataSourceSrv();\n  querySubscription: Unsubscribable | null = null;\n\n  state: State = {\n    isDataSourceModalOpen: !!locationService.getSearchObject().firstPanel,\n    isLoadingHelp: false,\n    helpContent: null,\n    isPickerOpen: false,\n    isAddingMixed: false,\n    isHelpOpen: false,\n    queries: [],\n    data: {\n      state: LoadingState.NotStarted,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n    },\n  };\n\n  async componentDidMount() {\n    const { options, queryRunner } = this.props;\n\n    this.querySubscription = queryRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n      next: (data: PanelData) => this.onPanelDataUpdate(data),\n    });\n\n    this.setNewQueriesAndDatasource(options);\n\n    // Clean up the first panel flag since the modal is now open\n    if (!!locationService.getSearchObject().firstPanel) {\n      locationService.partial({ firstPanel: null }, true);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.querySubscription) {\n      this.querySubscription.unsubscribe();\n      this.querySubscription = null;\n    }\n  }\n\n  async componentDidUpdate() {\n    const { options } = this.props;\n\n    const currentDS = await getDataSourceSrv().get(options.dataSource);\n    if (this.state.dataSource && currentDS.uid !== this.state.dataSource?.uid) {\n      this.setNewQueriesAndDatasource(options);\n    }\n  }\n\n  async setNewQueriesAndDatasource(options: QueryGroupOptions) {\n    try {\n      const ds = await this.dataSourceSrv.get(options.dataSource);\n      const dsSettings = this.dataSourceSrv.getInstanceSettings(options.dataSource);\n\n      const defaultDataSource = await this.dataSourceSrv.get();\n      const datasource = ds.getRef();\n      const queries = options.queries.map((q) => ({\n        ...(queryIsEmpty(q) && ds?.getDefaultQuery?.(CoreApp.PanelEditor)),\n        datasource,\n        ...q,\n      }));\n\n      this.setState({\n        queries,\n        dataSource: ds,\n        dsSettings,\n        defaultDataSource,\n      });\n    } catch (error) {\n      console.log('failed to load data source', error);\n    }\n  }\n\n  onPanelDataUpdate(data: PanelData) {\n    this.setState({ data });\n  }\n\n  onChangeDataSource = async (newSettings: DataSourceInstanceSettings) => {\n    const { dsSettings } = this.state;\n    const currentDS = dsSettings ? await getDataSourceSrv().get(dsSettings.uid) : undefined;\n    const nextDS = await getDataSourceSrv().get(newSettings.uid);\n\n    // We need to pass in newSettings.uid as well here as that can be a variable expression and we want to store that in the query model not the current ds variable value\n    const queries = await updateQueries(nextDS, newSettings.uid, this.state.queries, currentDS);\n\n    const dataSource = await this.dataSourceSrv.get(newSettings.name);\n    this.onChange({\n      queries,\n      dataSource: {\n        name: newSettings.name,\n        uid: newSettings.uid,\n        type: newSettings.meta.id,\n        default: newSettings.isDefault,\n      },\n    });\n\n    this.setState({\n      queries,\n      dataSource: dataSource,\n      dsSettings: newSettings,\n    });\n  };\n\n  onAddQueryClick = () => {\n    const { queries } = this.state;\n    this.onQueriesChange(addQuery(queries, this.newQuery()));\n    this.onScrollBottom();\n  };\n\n  newQuery(): Partial<DataQuery> {\n    const { dsSettings, defaultDataSource } = this.state;\n\n    const ds = !dsSettings?.meta.mixed ? dsSettings : defaultDataSource;\n\n    return {\n      ...this.state.dataSource?.getDefaultQuery?.(CoreApp.PanelEditor),\n      datasource: { uid: ds?.uid, type: ds?.type },\n    };\n  }\n\n  onChange(changedProps: Partial<QueryGroupOptions>) {\n    this.props.onOptionsChange({\n      ...this.props.options,\n      ...changedProps,\n    });\n  }\n\n  onAddExpressionClick = () => {\n    this.onQueriesChange(addQuery(this.state.queries, expressionDatasource.newQuery()));\n    this.onScrollBottom();\n  };\n\n  onScrollBottom = () => {\n    setTimeout(() => {\n      if (this.state.scrollElement) {\n        this.state.scrollElement.scrollTo({ top: 10000 });\n      }\n    }, 20);\n  };\n\n  onUpdateAndRun = (options: QueryGroupOptions) => {\n    this.props.onOptionsChange(options);\n    this.props.onRunQueries();\n  };\n\n  renderTopSection(styles: QueriesTabStyles) {\n    const { onOpenQueryInspector, options } = this.props;\n    const { dataSource, data } = this.state;\n\n    return (\n      <div>\n        <div className={styles.dataSourceRow}>\n          <InlineFormLabel htmlFor=\"data-source-picker\" width={'auto'}>\n            Data source\n          </InlineFormLabel>\n          <div className={styles.dataSourceRowItem}>{this.renderDataSourcePickerWithPrompt()}</div>\n          {dataSource && (\n            <>\n              <div className={styles.dataSourceRowItem}>\n                <Button\n                  variant=\"secondary\"\n                  icon=\"question-circle\"\n                  title=\"Open data source help\"\n                  onClick={this.onOpenHelp}\n                  data-testid=\"query-tab-help-button\"\n                />\n              </div>\n              <div className={styles.dataSourceRowItemOptions}>\n                <QueryGroupOptionsEditor\n                  options={options}\n                  dataSource={dataSource}\n                  data={data}\n                  onChange={this.onUpdateAndRun}\n                />\n              </div>\n              {onOpenQueryInspector && (\n                <div className={styles.dataSourceRowItem}>\n                  <Button\n                    variant=\"secondary\"\n                    onClick={onOpenQueryInspector}\n                    aria-label={selectors.components.QueryTab.queryInspectorButton}\n                  >\n                    Query inspector\n                  </Button>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  onOpenHelp = () => {\n    this.setState({ isHelpOpen: true });\n  };\n\n  onCloseHelp = () => {\n    this.setState({ isHelpOpen: false });\n  };\n\n  onCloseDataSourceModal = () => {\n    this.setState({ isDataSourceModalOpen: false });\n  };\n\n  renderMixedPicker = () => {\n    return (\n      <DataSourcePicker\n        mixed={false}\n        onChange={this.onAddMixedQuery}\n        current={null}\n        autoFocus={true}\n        variables={true}\n        onBlur={this.onMixedPickerBlur}\n        openMenuOnFocus={true}\n      />\n    );\n  };\n\n  renderDataSourcePickerWithPrompt = () => {\n    const { isDataSourceModalOpen } = this.state;\n\n    const commonProps = {\n      enableFileUpload: config.featureToggles.editPanelCSVDragAndDrop,\n      fileUploadOptions: {\n        onDrop: this.onFileDrop,\n        maxSize: DFImport.maxFileSize,\n        multiple: false,\n        accept: DFImport.acceptedFiles,\n      },\n      current: this.props.options.dataSource,\n      onChange: (ds: DataSourceInstanceSettings) => {\n        this.onChangeDataSource(ds);\n        this.onCloseDataSourceModal();\n      },\n    };\n\n    return (\n      <>\n        {isDataSourceModalOpen && config.featureToggles.advancedDataSourcePicker && (\n          <DataSourceModal {...commonProps} onDismiss={this.onCloseDataSourceModal}></DataSourceModal>\n        )}\n        <DataSourcePicker\n          {...commonProps}\n          metrics={true}\n          mixed={true}\n          dashboard={true}\n          variables={true}\n          onClickAddCSV={this.onClickAddCSV}\n        />\n      </>\n    );\n  };\n\n  onAddMixedQuery = (datasource: any) => {\n    this.onAddQuery({ datasource: datasource.name });\n    this.setState({ isAddingMixed: false });\n  };\n\n  onMixedPickerBlur = () => {\n    this.setState({ isAddingMixed: false });\n  };\n\n  onAddQuery = (query: Partial<DataQuery>) => {\n    const { dsSettings, queries } = this.state;\n    this.onQueriesChange(addQuery(queries, query, { type: dsSettings?.type, uid: dsSettings?.uid }));\n    this.onScrollBottom();\n  };\n\n  onClickAddCSV = async () => {\n    const ds = getDataSourceSrv().getInstanceSettings('-- Grafana --');\n    await this.onChangeDataSource(ds!);\n\n    this.onQueriesChange([\n      {\n        refId: 'A',\n        datasource: {\n          type: 'grafana',\n          uid: 'grafana',\n        },\n        queryType: GrafanaQueryType.Snapshot,\n        snapshot: [],\n      },\n    ]);\n    this.props.onRunQueries();\n  };\n\n  onFileDrop = (acceptedFiles: File[], fileRejections: FileRejection[], event: DropEvent) => {\n    DFImport.filesToDataframes(acceptedFiles).subscribe(async (next) => {\n      const snapshot: DataFrameJSON[] = [];\n      next.dataFrames.forEach((df) => {\n        const dataframeJson = dataFrameToJSON(df);\n        snapshot.push(dataframeJson);\n      });\n      const ds = getDataSourceSrv().getInstanceSettings('-- Grafana --');\n      await this.onChangeDataSource(ds!);\n      this.onQueriesChange([\n        {\n          refId: 'A',\n          datasource: {\n            type: 'grafana',\n            uid: 'grafana',\n          },\n          queryType: GrafanaQueryType.Snapshot,\n          snapshot: snapshot,\n          file: next.file,\n        },\n      ]);\n      this.props.onRunQueries();\n    });\n  };\n\n  onQueriesChange = (queries: DataQuery[] | GrafanaQuery[]) => {\n    this.onChange({ queries });\n    this.setState({ queries });\n  };\n\n  renderQueries(dsSettings: DataSourceInstanceSettings) {\n    const { onRunQueries } = this.props;\n    const { data, queries } = this.state;\n    if (isSharedDashboardQuery(dsSettings.name)) {\n      return (\n        <DashboardQueryEditor\n          queries={queries}\n          panelData={data}\n          onChange={this.onQueriesChange}\n          onRunQueries={onRunQueries}\n        />\n      );\n    }\n\n    return (\n      <div aria-label={selectors.components.QueryTab.content}>\n        <QueryEditorRows\n          queries={queries}\n          dsSettings={dsSettings}\n          onQueriesChange={this.onQueriesChange}\n          onAddQuery={this.onAddQuery}\n          onRunQueries={onRunQueries}\n          data={data}\n        />\n      </div>\n    );\n  }\n\n  isExpressionsSupported(dsSettings: DataSourceInstanceSettings): boolean {\n    return (dsSettings.meta.alerting || dsSettings.meta.mixed) === true;\n  }\n\n  renderExtraActions() {\n    return GroupActionComponents.getAllExtraRenderAction()\n      .map((action, index) =>\n        action({\n          onAddQuery: this.onAddQuery,\n          onChangeDataSource: this.onChangeDataSource,\n          key: index,\n        })\n      )\n      .filter(Boolean);\n  }\n\n  renderAddQueryRow(dsSettings: DataSourceInstanceSettings, styles: QueriesTabStyles) {\n    const { isAddingMixed } = this.state;\n    const showAddButton = !(isAddingMixed || isSharedDashboardQuery(dsSettings.name));\n\n    return (\n      <HorizontalGroup spacing=\"md\" align=\"flex-start\">\n        {showAddButton && (\n          <Button\n            icon=\"plus\"\n            onClick={this.onAddQueryClick}\n            variant=\"secondary\"\n            aria-label={selectors.components.QueryTab.addQuery}\n            data-testid=\"query-tab-add-query\"\n          >\n            Query\n          </Button>\n        )}\n        {config.expressionsEnabled && this.isExpressionsSupported(dsSettings) && (\n          <Button\n            icon=\"plus\"\n            onClick={this.onAddExpressionClick}\n            variant=\"secondary\"\n            className={styles.expressionButton}\n            data-testid=\"query-tab-add-expression\"\n          >\n            <span>Expression&nbsp;</span>\n          </Button>\n        )}\n        {this.renderExtraActions()}\n      </HorizontalGroup>\n    );\n  }\n\n  setScrollRef = (scrollElement: HTMLDivElement): void => {\n    this.setState({ scrollElement });\n  };\n\n  render() {\n    const { isHelpOpen, dsSettings } = this.state;\n    const styles = getStyles();\n\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\" scrollRefCallback={this.setScrollRef}>\n        <div className={styles.innerWrapper}>\n          {this.renderTopSection(styles)}\n          {dsSettings && (\n            <>\n              <div className={styles.queriesWrapper}>{this.renderQueries(dsSettings)}</div>\n              {this.renderAddQueryRow(dsSettings, styles)}\n              {isHelpOpen && (\n                <Modal title=\"Data source help\" isOpen={true} onDismiss={this.onCloseHelp}>\n                  <PluginHelp pluginId={dsSettings.meta.id} />\n                </Modal>\n              )}\n            </>\n          )}\n        </div>\n      </CustomScrollbar>\n    );\n  }\n}\n\nconst getStyles = stylesFactory(() => {\n  const { theme } = config;\n\n  return {\n    innerWrapper: css`\n      display: flex;\n      flex-direction: column;\n      padding: ${theme.spacing.md};\n    `,\n    dataSourceRow: css`\n      display: flex;\n      margin-bottom: ${theme.spacing.md};\n    `,\n    dataSourceRowItem: css`\n      margin-right: ${theme.spacing.inlineFormMargin};\n    `,\n    dataSourceRowItemOptions: css`\n      flex-grow: 1;\n      margin-right: ${theme.spacing.inlineFormMargin};\n    `,\n    queriesWrapper: css`\n      padding-bottom: 16px;\n    `,\n    expressionWrapper: css``,\n    expressionButton: css`\n      margin-right: ${theme.spacing.sm};\n    `,\n  };\n});\n\ntype QueriesTabStyles = ReturnType<typeof getStyles>;\n","import { useEffect, useRef, useState } from 'react';\nimport { Observable, Subject } from 'rxjs';\n\nimport { Field, locationUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\n\nimport { QueryResponse } from '../service';\n\nexport function useKeyNavigationListener() {\n  const eventsRef = useRef(new Subject<React.KeyboardEvent>());\n  return {\n    keyboardEvents: eventsRef.current,\n    onKeyDown: (e: React.KeyboardEvent<HTMLInputElement>) => {\n      switch (e.code) {\n        case 'ArrowDown':\n        case 'ArrowUp':\n        case 'ArrowLeft':\n        case 'ArrowRight':\n        case 'Enter':\n          eventsRef.current.next(e);\n        default:\n        // ignore\n      }\n    },\n  };\n}\n\ninterface ItemSelection {\n  x: number;\n  y: number;\n}\n\nexport function useSearchKeyboardNavigation(\n  keyboardEvents: Observable<React.KeyboardEvent>,\n  numColumns: number,\n  response: QueryResponse\n): ItemSelection {\n  const highlightIndexRef = useRef<ItemSelection>({ x: 0, y: -1 });\n  const [highlightIndex, setHighlightIndex] = useState<ItemSelection>({ x: 0, y: -1 });\n  const urlsRef = useRef<Field>();\n\n  // Clear selection when the search results change\n  useEffect(() => {\n    urlsRef.current = response.view.fields.url;\n    highlightIndexRef.current.x = 0;\n    highlightIndexRef.current.y = -1;\n    setHighlightIndex({ ...highlightIndexRef.current });\n  }, [response]);\n\n  useEffect(() => {\n    const sub = keyboardEvents.subscribe({\n      next: (keyEvent) => {\n        switch (keyEvent?.code) {\n          case 'ArrowDown': {\n            highlightIndexRef.current.y++;\n            setHighlightIndex({ ...highlightIndexRef.current });\n            break;\n          }\n          case 'ArrowUp':\n            highlightIndexRef.current.y = Math.max(0, highlightIndexRef.current.y - 1);\n            setHighlightIndex({ ...highlightIndexRef.current });\n            break;\n          case 'ArrowRight': {\n            if (numColumns > 0) {\n              highlightIndexRef.current.x = Math.min(numColumns, highlightIndexRef.current.x + 1);\n              setHighlightIndex({ ...highlightIndexRef.current });\n            }\n            break;\n          }\n          case 'ArrowLeft': {\n            if (numColumns > 0) {\n              highlightIndexRef.current.x = Math.max(0, highlightIndexRef.current.x - 1);\n              setHighlightIndex({ ...highlightIndexRef.current });\n            }\n            break;\n          }\n          case 'Enter':\n            if (!urlsRef.current) {\n              break;\n            }\n            const idx = highlightIndexRef.current.x * numColumns + highlightIndexRef.current.y;\n            if (idx < 0) {\n              highlightIndexRef.current.x = 0;\n              highlightIndexRef.current.y = 0;\n              setHighlightIndex({ ...highlightIndexRef.current });\n              break;\n            }\n            const url = urlsRef.current.values?.[idx] as string;\n            if (url) {\n              locationService.push(locationUtil.stripBaseFromUrl(url));\n            }\n        }\n      },\n    });\n\n    return () => sub.unsubscribe();\n  }, [keyboardEvents, numColumns]);\n\n  return highlightIndex;\n}\n"],"names":["PluginHelp","pluginId","value","loading","error","useAsync","renderedMarkdown","LoadingPlaceholder","AddNewDataSourceButton","variant","onClick","hasCreateRights","newDataSourceURL","config","LOCAL_STORAGE_KEY","useRecentlyUsedDataSources","setStorage","useLocalStorage","pushRecentlyUsedDataSource","ds","dsUid","useDatasources","filters","useDatasource","dataSource","dataSourceSrv","useKeyboardNavigatableList","props","keyboardEvents","containerRef","selectedIndex","attributeName","roleName","navigatableItemProps","querySelectorNavigatableElements","selectedAttributeName","selectedItemCssSelector","selectItem","index","listItems","selectedItem","li","clickSelectedElement","sub","keyEvent","listObserver","mutations","mutation","DataSourceCard","selected","description","htmlProps","styles","getStyles","Card","TagList","theme","isDataSourceMatch","current","dataSourceLabel","getDataSourceCompareFn","recentlyUsedDataSources","dataSourceVariablesIDs","a","b","aIndex","bIndex","aIsVariable","bIsVariable","matchDataSourceWithSearch","searchTerm","CUSTOM_DESCRIPTIONS_BY_UID","BuiltInDataSourceList","className","onChange","grafanaDataSources","DataSourceList","navigatableProps","enableKeyboardNavigation","onClickEmptyStateCTA","dataSources","filteredDataSources","EmptyState","getDataSourceVariableIDs","onClickCTA","getEmptyStateStyles","v","INTERACTION_EVENT_NAME","INTERACTION_ITEM","DataSourceModal","enableFileUpload","fileUploadOptions","onDismiss","reportedInteractionFrom","getDataSourceModalStyles","search","setSearch","analyticsInteractionSrc","onDismissModal","onChangeDataSource","reportSearchUsageOnce","Modal","Input","Icon","e","CustomScrollbar","FileDropzone","args","DataSourceLogo","DataSourceLogoPlaceHolder","MODAL_MARGIN","FLIP_THRESHOLD","maxSize","state","name","options","overflow","detectOverflow","x","y","width","height","basePlacement","widthProp","heightProp","applyMaxSize","DataSourceDropdown","hideTextValue","restProps","isOpen","setOpen","inputHasFocus","setInputHasFocus","markerElement","setMarkerElement","selectorElement","setSelectorElement","filterTerm","setFilterTerm","openDropdown","onKeyDown","onClose","currentDataSourceInstanceSettings","popper","usePopper","ref","overlayProps","underlayProps","element","dialogProps","getStylesDropdown","selectors","Portal","PickerContent","onClickAddCSV","changeCallback","clickAddCSVCallback","getStylesPickerContent","showModal","hideModal","Button","updateQueries","nextDS","nextDSUidOrVariableExpression","queries","currentDS","nextQueries","datasource","DEFAULT_QUERY","abstractQueries","query","QueryGroupOptionsEditor","event","newValue","emptyToNull","isValid","timeRangeValidation","ttl","maxDataPoints","minInterval","tooltip","data","realMd","isAuto","realInterval","minIntervalOnDs","mdDesc","intervalDesc","hideTimeOverride","relativeTimeIsValid","timeShiftIsValid","relativeTime","timeShift","QueryOperationRow","InlineField","Switch","stylesFactory","QueryGroup","newSettings","dsSettings","isDataSourceModalOpen","commonProps","acceptedFiles","fileRejections","next","snapshot","df","dataframeJson","scrollElement","queryRunner","defaultDataSource","q","changedProps","onOpenQueryInspector","onRunQueries","QueryEditorRows","action","isAddingMixed","showAddButton","isHelpOpen","useKeyNavigationListener","eventsRef","useSearchKeyboardNavigation","numColumns","response","highlightIndexRef","highlightIndex","setHighlightIndex","urlsRef","idx","url"],"sourceRoot":""}