{"version":3,"file":"8366.c2486504d3ae1732be24.js","mappings":"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","sources":["webpack://grafana/./public/app/core/utils/CancelablePromise.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PrometheusMetricsBrowser.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryFieldLazy.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/monaco-query-field/MonacoQueryFieldWrapper.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/AnnotationQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/metric_find_query.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/query_hints.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/tracking.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/migrations/variableMigration.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/variables.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/datasource.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderExplained.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryCodeEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/RawQuery.tsx","webpack://grafana/./public/app/features/live/data/amendTimeSeries.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querycache/QueryCache.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/result_transformer.ts","webpack://grafana/../../opt/drone/yarncache/semver-npm-7.3.8-25a996cb4f-ba9c7cbbf2.zip/node_modules/semver/preload.js"],"sourcesContent":["// https://github.com/facebook/react/issues/5465\n\nexport interface CancelablePromise<T> {\n  promise: Promise<T>;\n  cancel: () => void;\n}\n\nexport interface CancelablePromiseRejection {\n  isCanceled: boolean;\n}\n\nexport function isCancelablePromiseRejection(promise: unknown): promise is CancelablePromiseRejection {\n  return typeof promise === 'object' && promise !== null && 'isCanceled' in promise;\n}\n\nexport const makePromiseCancelable = <T>(promise: Promise<T>): CancelablePromise<T> => {\n  let hasCanceled_ = false;\n\n  const wrappedPromise = new Promise<T>((resolve, reject) => {\n    const canceledPromiseRejection: CancelablePromiseRejection = { isCanceled: true };\n    promise.then((val) => (hasCanceled_ ? reject(canceledPromiseRejection) : resolve(val)));\n    promise.catch((error) => (hasCanceled_ ? reject(canceledPromiseRejection) : reject(error)));\n  });\n\n  return {\n    promise: wrappedPromise,\n    cancel() {\n      hasCanceled_ = true;\n    },\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React, { ChangeEvent } from 'react';\nimport { FixedSizeList } from 'react-window';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  HorizontalGroup,\n  Input,\n  Label,\n  LoadingPlaceholder,\n  stylesFactory,\n  BrowserLabel as PromLabel,\n  withTheme2,\n} from '@grafana/ui';\n\nimport PromQlLanguageProvider from '../language_provider';\nimport { escapeLabelValueInExactSelector, escapeLabelValueInRegexSelector } from '../language_utils';\n\n// Hard limit on labels to render\nconst EMPTY_SELECTOR = '{}';\nconst METRIC_LABEL = '__name__';\nconst LIST_ITEM_SIZE = 25;\n\nexport interface BrowserProps {\n  languageProvider: PromQlLanguageProvider;\n  onChange: (selector: string) => void;\n  theme: GrafanaTheme2;\n  autoSelect?: number;\n  hide?: () => void;\n  lastUsedLabels: string[];\n  storeLastUsedLabels: (labels: string[]) => void;\n  deleteLastUsedLabels: () => void;\n}\n\ninterface BrowserState {\n  labels: SelectableLabel[];\n  labelSearchTerm: string;\n  metricSearchTerm: string;\n  status: string;\n  error: string;\n  validationStatus: string;\n  valueSearchTerm: string;\n}\n\ninterface FacettableValue {\n  name: string;\n  selected?: boolean;\n  details?: string;\n}\n\nexport interface SelectableLabel {\n  name: string;\n  selected?: boolean;\n  loading?: boolean;\n  values?: FacettableValue[];\n  hidden?: boolean;\n  facets?: number;\n}\n\nexport function buildSelector(labels: SelectableLabel[]): string {\n  let singleMetric = '';\n  const selectedLabels = [];\n  for (const label of labels) {\n    if ((label.name === METRIC_LABEL || label.selected) && label.values && label.values.length > 0) {\n      const selectedValues = label.values.filter((value) => value.selected).map((value) => value.name);\n      if (selectedValues.length > 1) {\n        selectedLabels.push(`${label.name}=~\"${selectedValues.map(escapeLabelValueInRegexSelector).join('|')}\"`);\n      } else if (selectedValues.length === 1) {\n        if (label.name === METRIC_LABEL) {\n          singleMetric = selectedValues[0];\n        } else {\n          selectedLabels.push(`${label.name}=\"${escapeLabelValueInExactSelector(selectedValues[0])}\"`);\n        }\n      }\n    }\n  }\n  return [singleMetric, '{', selectedLabels.join(','), '}'].join('');\n}\n\nexport function facetLabels(\n  labels: SelectableLabel[],\n  possibleLabels: Record<string, string[]>,\n  lastFacetted?: string\n): SelectableLabel[] {\n  return labels.map((label) => {\n    const possibleValues = possibleLabels[label.name];\n    if (possibleValues) {\n      let existingValues: FacettableValue[];\n      if (label.name === lastFacetted && label.values) {\n        // Facetting this label, show all values\n        existingValues = label.values;\n      } else {\n        // Keep selection in other facets\n        const selectedValues: Set<string> = new Set(\n          label.values?.filter((value) => value.selected).map((value) => value.name) || []\n        );\n        // Values for this label have not been requested yet, let's use the facetted ones as the initial values\n        existingValues = possibleValues.map((value) => ({ name: value, selected: selectedValues.has(value) }));\n      }\n      return {\n        ...label,\n        loading: false,\n        values: existingValues,\n        hidden: !possibleValues,\n        facets: existingValues.length,\n      };\n    }\n\n    // Label is facetted out, hide all values\n    return { ...label, loading: false, hidden: !possibleValues, values: undefined, facets: 0 };\n  });\n}\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => ({\n  wrapper: css`\n    background-color: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(1)};\n    width: 100%;\n  `,\n  list: css`\n    margin-top: ${theme.spacing(1)};\n    display: flex;\n    flex-wrap: wrap;\n    max-height: 200px;\n    overflow: auto;\n    align-content: flex-start;\n  `,\n  section: css`\n    & + & {\n      margin: ${theme.spacing(2)} 0;\n    }\n    position: relative;\n  `,\n  selector: css`\n    font-family: ${theme.typography.fontFamilyMonospace};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  status: css`\n    padding: ${theme.spacing(0.5)};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    /* using absolute positioning because flex interferes with ellipsis */\n    position: absolute;\n    width: 50%;\n    right: 0;\n    text-align: right;\n    transition: opacity 100ms linear;\n    opacity: 0;\n  `,\n  statusShowing: css`\n    opacity: 1;\n  `,\n  error: css`\n    color: ${theme.colors.error.main};\n  `,\n  valueList: css`\n    margin-right: ${theme.spacing(1)};\n    resize: horizontal;\n  `,\n  valueListWrapper: css`\n    border-left: 1px solid ${theme.colors.border.medium};\n    margin: ${theme.spacing(1)} 0;\n    padding: ${theme.spacing(1)} 0 ${theme.spacing(1)} ${theme.spacing(1)};\n  `,\n  valueListArea: css`\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: ${theme.spacing(1)};\n  `,\n  valueTitle: css`\n    margin-left: -${theme.spacing(0.5)};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  validationStatus: css`\n    padding: ${theme.spacing(0.5)};\n    margin-bottom: ${theme.spacing(1)};\n    color: ${theme.colors.text.maxContrast};\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  `,\n}));\n\n/**\n * TODO #33976: Remove duplicated code. The component is very similar to LokiLabelBrowser.tsx. Check if it's possible\n *              to create a single, generic component.\n */\nexport class UnthemedPrometheusMetricsBrowser extends React.Component<BrowserProps, BrowserState> {\n  valueListsRef = React.createRef<HTMLDivElement>();\n  state: BrowserState = {\n    labels: [],\n    labelSearchTerm: '',\n    metricSearchTerm: '',\n    status: 'Ready',\n    error: '',\n    validationStatus: '',\n    valueSearchTerm: '',\n  };\n\n  onChangeLabelSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ labelSearchTerm: event.target.value });\n  };\n\n  onChangeMetricSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ metricSearchTerm: event.target.value });\n  };\n\n  onChangeValueSearch = (event: ChangeEvent<HTMLInputElement>) => {\n    this.setState({ valueSearchTerm: event.target.value });\n  };\n\n  onClickRunQuery = () => {\n    const selector = buildSelector(this.state.labels);\n    this.props.onChange(selector);\n  };\n\n  onClickRunRateQuery = () => {\n    const selector = buildSelector(this.state.labels);\n    const query = `rate(${selector}[$__rate_interval])`;\n    this.props.onChange(query);\n  };\n\n  onClickClear = () => {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => ({\n        ...label,\n        values: undefined,\n        selected: false,\n        loading: false,\n        hidden: false,\n        facets: undefined,\n      }));\n      return {\n        labels,\n        labelSearchTerm: '',\n        metricSearchTerm: '',\n        status: '',\n        error: '',\n        validationStatus: '',\n        valueSearchTerm: '',\n      };\n    });\n    this.props.deleteLastUsedLabels();\n    // Get metrics\n    this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR);\n  };\n\n  onClickLabel = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    // Toggle selected state\n    const selected = !label.selected;\n    let nextValue: Partial<SelectableLabel> = { selected };\n    if (label.values && !selected) {\n      // Deselect all values if label was deselected\n      const values = label.values.map((value) => ({ ...value, selected: false }));\n      nextValue = { ...nextValue, facets: 0, values };\n    }\n    // Resetting search to prevent empty results\n    this.setState({ labelSearchTerm: '' });\n    this.updateLabelState(name, nextValue, '', () => this.doFacettingForLabel(name));\n  };\n\n  onClickValue = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ labelSearchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({ ...v, selected: v.name === value ? !v.selected : v.selected }));\n    this.updateLabelState(name, { values }, '', () => this.doFacetting(name));\n  };\n\n  onClickMetric = (name: string, value: string | undefined, event: React.MouseEvent<HTMLElement>) => {\n    // Finding special metric label\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label || !label.values) {\n      return;\n    }\n    // Resetting search to prevent empty results\n    this.setState({ metricSearchTerm: '' });\n    // Toggling value for selected label, leaving other values intact\n    const values = label.values.map((v) => ({\n      ...v,\n      selected: v.name === value || v.selected ? !v.selected : v.selected,\n    }));\n    // Toggle selected state of special metrics label\n    const selected = values.some((v) => v.selected);\n    this.updateLabelState(name, { selected, values }, '', () => this.doFacetting(name));\n  };\n\n  onClickValidate = () => {\n    const selector = buildSelector(this.state.labels);\n    this.validateSelector(selector);\n  };\n\n  updateLabelState(name: string, updatedFields: Partial<SelectableLabel>, status = '', cb?: () => void) {\n    this.setState((state) => {\n      const labels: SelectableLabel[] = state.labels.map((label) => {\n        if (label.name === name) {\n          return { ...label, ...updatedFields };\n        }\n        return label;\n      });\n      // New status overrides errors\n      const error = status ? '' : state.error;\n      return { labels, status, error, validationStatus: '' };\n    }, cb);\n  }\n\n  componentDidMount() {\n    const { languageProvider, lastUsedLabels } = this.props;\n    if (languageProvider) {\n      const selectedLabels: string[] = lastUsedLabels;\n      languageProvider.start().then(() => {\n        let rawLabels: string[] = languageProvider.getLabelKeys();\n        // Get metrics\n        this.fetchValues(METRIC_LABEL, EMPTY_SELECTOR);\n        // Auto-select previously selected labels\n        const labels: SelectableLabel[] = rawLabels.map((label, i, arr) => ({\n          name: label,\n          selected: selectedLabels.includes(label),\n          loading: false,\n        }));\n        // Pre-fetch values for selected labels\n        this.setState({ labels }, () => {\n          this.state.labels.forEach((label) => {\n            if (label.selected) {\n              this.fetchValues(label.name, EMPTY_SELECTOR);\n            }\n          });\n        });\n      });\n    }\n  }\n\n  doFacettingForLabel(name: string) {\n    const label = this.state.labels.find((l) => l.name === name);\n    if (!label) {\n      return;\n    }\n    const selectedLabels = this.state.labels.filter((label) => label.selected).map((label) => label.name);\n    this.props.storeLastUsedLabels(selectedLabels);\n    if (label.selected) {\n      // Refetch values for newly selected label...\n      if (!label.values) {\n        this.fetchValues(name, buildSelector(this.state.labels));\n      }\n    } else {\n      // Only need to facet when deselecting labels\n      this.doFacetting();\n    }\n  }\n\n  doFacetting = (lastFacetted?: string) => {\n    const selector = buildSelector(this.state.labels);\n    if (selector === EMPTY_SELECTOR) {\n      // Clear up facetting\n      const labels: SelectableLabel[] = this.state.labels.map((label) => {\n        return { ...label, facets: 0, values: undefined, hidden: false };\n      });\n      this.setState({ labels }, () => {\n        // Get fresh set of values\n        this.state.labels.forEach(\n          (label) => (label.selected || label.name === METRIC_LABEL) && this.fetchValues(label.name, selector)\n        );\n      });\n    } else {\n      // Do facetting\n      this.fetchSeries(selector, lastFacetted);\n    }\n  };\n\n  async fetchValues(name: string, selector: string) {\n    const { languageProvider } = this.props;\n    this.updateLabelState(name, { loading: true }, `Fetching values for ${name}`);\n    try {\n      let rawValues = await languageProvider.getLabelValues(name);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        this.updateLabelState(name, { loading: false });\n        return;\n      }\n      const values: FacettableValue[] = [];\n      const { metricsMetadata } = languageProvider;\n      for (const labelValue of rawValues) {\n        const value: FacettableValue = { name: labelValue };\n        // Adding type/help text to metrics\n        if (name === METRIC_LABEL && metricsMetadata) {\n          const meta = metricsMetadata[labelValue];\n          if (meta) {\n            value.details = `(${meta.type}) ${meta.help}`;\n          }\n        }\n        values.push(value);\n      }\n      this.updateLabelState(name, { values, loading: false });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async fetchSeries(selector: string, lastFacetted?: string) {\n    const { languageProvider } = this.props;\n    if (lastFacetted) {\n      this.updateLabelState(lastFacetted, { loading: true }, `Facetting labels for ${selector}`);\n    }\n    try {\n      const possibleLabels = await languageProvider.fetchSeriesLabels(selector, true);\n      // If selector changed, clear loading state and discard result by returning early\n      if (selector !== buildSelector(this.state.labels)) {\n        if (lastFacetted) {\n          this.updateLabelState(lastFacetted, { loading: false });\n        }\n        return;\n      }\n      if (Object.keys(possibleLabels).length === 0) {\n        this.setState({ error: `Empty results, no matching label for ${selector}` });\n        return;\n      }\n      const labels: SelectableLabel[] = facetLabels(this.state.labels, possibleLabels, lastFacetted);\n      this.setState({ labels, error: '' });\n      if (lastFacetted) {\n        this.updateLabelState(lastFacetted, { loading: false });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  async validateSelector(selector: string) {\n    const { languageProvider } = this.props;\n    this.setState({ validationStatus: `Validating selector ${selector}`, error: '' });\n    const streams = await languageProvider.fetchSeries(selector);\n    this.setState({ validationStatus: `Selector is valid (${streams.length} series found)` });\n  }\n\n  render() {\n    const { theme } = this.props;\n    const { labels, labelSearchTerm, metricSearchTerm, status, error, validationStatus, valueSearchTerm } = this.state;\n    const styles = getStyles(theme);\n    if (labels.length === 0) {\n      return (\n        <div className={styles.wrapper}>\n          <LoadingPlaceholder text=\"Loading labels...\" />\n        </div>\n      );\n    }\n\n    // Filter metrics\n    let metrics = labels.find((label) => label.name === METRIC_LABEL);\n    if (metrics && metricSearchTerm) {\n      metrics = {\n        ...metrics,\n        values: metrics.values?.filter((value) => value.selected || value.name.includes(metricSearchTerm)),\n      };\n    }\n\n    // Filter labels\n    let nonMetricLabels = labels.filter((label) => !label.hidden && label.name !== METRIC_LABEL);\n    if (labelSearchTerm) {\n      nonMetricLabels = nonMetricLabels.filter((label) => label.selected || label.name.includes(labelSearchTerm));\n    }\n\n    // Filter non-metric label values\n    let selectedLabels = nonMetricLabels.filter((label) => label.selected && label.values);\n    if (valueSearchTerm) {\n      selectedLabels = selectedLabels.map((label) => ({\n        ...label,\n        values: label.values?.filter((value) => value.selected || value.name.includes(valueSearchTerm)),\n      }));\n    }\n    const selector = buildSelector(this.state.labels);\n    const empty = selector === EMPTY_SELECTOR;\n    const metricCount = metrics?.values?.length || 0;\n\n    return (\n      <div className={styles.wrapper}>\n        <HorizontalGroup align=\"flex-start\" spacing=\"lg\">\n          <div>\n            <div className={styles.section}>\n              <Label description=\"Once a metric is selected only possible labels are shown.\">1. Select a metric</Label>\n              <div>\n                <Input\n                  onChange={this.onChangeMetricSearch}\n                  aria-label=\"Filter expression for metric\"\n                  value={metricSearchTerm}\n                />\n              </div>\n              <div role=\"list\" className={styles.valueListWrapper}>\n                <FixedSizeList\n                  height={Math.min(450, metricCount * LIST_ITEM_SIZE)}\n                  itemCount={metricCount}\n                  itemSize={LIST_ITEM_SIZE}\n                  itemKey={(i) => (metrics!.values as FacettableValue[])[i].name}\n                  width={300}\n                  className={styles.valueList}\n                >\n                  {({ index, style }) => {\n                    const value = metrics?.values?.[index];\n                    if (!value) {\n                      return null;\n                    }\n                    return (\n                      <div style={style}>\n                        <PromLabel\n                          name={metrics!.name}\n                          value={value?.name}\n                          title={value.details}\n                          active={value?.selected}\n                          onClick={this.onClickMetric}\n                          searchTerm={metricSearchTerm}\n                        />\n                      </div>\n                    );\n                  }}\n                </FixedSizeList>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <div className={styles.section}>\n              <Label description=\"Once label values are selected, only possible label combinations are shown.\">\n                2. Select labels to search in\n              </Label>\n              <div>\n                <Input\n                  onChange={this.onChangeLabelSearch}\n                  aria-label=\"Filter expression for label\"\n                  value={labelSearchTerm}\n                />\n              </div>\n              {/* Using fixed height here to prevent jumpy layout */}\n              <div className={styles.list} style={{ height: 120 }}>\n                {nonMetricLabels.map((label) => (\n                  <PromLabel\n                    key={label.name}\n                    name={label.name}\n                    loading={label.loading}\n                    active={label.selected}\n                    hidden={label.hidden}\n                    facets={label.facets}\n                    onClick={this.onClickLabel}\n                    searchTerm={labelSearchTerm}\n                  />\n                ))}\n              </div>\n            </div>\n            <div className={styles.section}>\n              <Label description=\"Use the search field to find values across selected labels.\">\n                3. Select (multiple) values for your labels\n              </Label>\n              <div>\n                <Input\n                  onChange={this.onChangeValueSearch}\n                  aria-label=\"Filter expression for label values\"\n                  value={valueSearchTerm}\n                />\n              </div>\n              <div className={styles.valueListArea} ref={this.valueListsRef}>\n                {selectedLabels.map((label) => (\n                  <div\n                    role=\"list\"\n                    key={label.name}\n                    aria-label={`Values for ${label.name}`}\n                    className={styles.valueListWrapper}\n                  >\n                    <div className={styles.valueTitle}>\n                      <PromLabel\n                        name={label.name}\n                        loading={label.loading}\n                        active={label.selected}\n                        hidden={label.hidden}\n                        //If no facets, we want to show number of all label values\n                        facets={label.facets || label.values?.length}\n                        onClick={this.onClickLabel}\n                      />\n                    </div>\n                    <FixedSizeList\n                      height={Math.min(200, LIST_ITEM_SIZE * (label.values?.length || 0))}\n                      itemCount={label.values?.length || 0}\n                      itemSize={28}\n                      itemKey={(i) => (label.values as FacettableValue[])[i].name}\n                      width={200}\n                      className={styles.valueList}\n                    >\n                      {({ index, style }) => {\n                        const value = label.values?.[index];\n                        if (!value) {\n                          return null;\n                        }\n                        return (\n                          <div style={style}>\n                            <PromLabel\n                              name={label.name}\n                              value={value?.name}\n                              active={value?.selected}\n                              onClick={this.onClickValue}\n                              searchTerm={valueSearchTerm}\n                            />\n                          </div>\n                        );\n                      }}\n                    </FixedSizeList>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </HorizontalGroup>\n\n        <div className={styles.section}>\n          <Label>4. Resulting selector</Label>\n          <div aria-label=\"selector\" className={styles.selector}>\n            {selector}\n          </div>\n          {validationStatus && <div className={styles.validationStatus}>{validationStatus}</div>}\n          <HorizontalGroup>\n            <Button aria-label=\"Use selector for query button\" disabled={empty} onClick={this.onClickRunQuery}>\n              Use query\n            </Button>\n            <Button\n              aria-label=\"Use selector as metrics button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickRunRateQuery}\n            >\n              Use as rate query\n            </Button>\n            <Button\n              aria-label=\"Validate submit button\"\n              variant=\"secondary\"\n              disabled={empty}\n              onClick={this.onClickValidate}\n            >\n              Validate selector\n            </Button>\n            <Button aria-label=\"Selector clear button\" variant=\"secondary\" onClick={this.onClickClear}>\n              Clear\n            </Button>\n            <div className={cx(styles.status, (status || error) && styles.statusShowing)}>\n              <span className={error ? styles.error : ''}>{error || status}</span>\n            </div>\n          </HorizontalGroup>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const PrometheusMetricsBrowser = withTheme2(UnthemedPrometheusMetricsBrowser);\n","import React, { Suspense } from 'react';\n\nimport { Props } from './MonacoQueryFieldProps';\n\nconst Field = React.lazy(() => import(/* webpackChunkName: \"prom-query-field\" */ './MonacoQueryField'));\n\nexport const MonacoQueryFieldLazy = (props: Props) => {\n  return (\n    <Suspense fallback={null}>\n      <Field {...props} />\n    </Suspense>\n  );\n};\n","import React, { useRef } from 'react';\n\nimport { MonacoQueryFieldLazy } from './MonacoQueryFieldLazy';\nimport { Props as MonacoProps } from './MonacoQueryFieldProps';\n\ntype Props = Omit<MonacoProps, 'onRunQuery' | 'onBlur'> & {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n};\n\nexport const MonacoQueryFieldWrapper = (props: Props) => {\n  const lastRunValueRef = useRef<string | null>(null);\n  const { onRunQuery, onChange, ...rest } = props;\n\n  const handleRunQuery = (value: string) => {\n    lastRunValueRef.current = value;\n    onChange(value);\n    onRunQuery();\n  };\n\n  const handleBlur = (value: string) => {\n    onChange(value);\n  };\n\n  /**\n   * Handles changes without running any queries\n   * @param value\n   */\n  const handleChange = (value: string) => {\n    onChange(value);\n  };\n\n  return <MonacoQueryFieldLazy onChange={handleChange} onRunQuery={handleRunQuery} onBlur={handleBlur} {...rest} />;\n};\n","import { cx } from '@emotion/css';\nimport { LanguageMap, languages as prismLanguages } from 'prismjs';\nimport React, { ReactNode } from 'react';\nimport { Plugin } from 'slate';\nimport { Editor } from 'slate-react';\n\nimport { isDataFrame, QueryEditorProps, QueryHint, TimeRange, toLegacyResponseData } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime/src';\nimport {\n  BracesPlugin,\n  DOMUtil,\n  Icon,\n  SlatePrism,\n  SuggestionsState,\n  TypeaheadInput,\n  TypeaheadOutput,\n  Themeable2,\n  withTheme2,\n  clearButtonStyles,\n} from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport {\n  CancelablePromise,\n  isCancelablePromiseRejection,\n  makePromiseCancelable,\n} from 'app/core/utils/CancelablePromise';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { roundMsToMin } from '../language_utils';\nimport { PromOptions, PromQuery } from '../types';\n\nimport { PrometheusMetricsBrowser } from './PrometheusMetricsBrowser';\nimport { MonacoQueryFieldWrapper } from './monaco-query-field/MonacoQueryFieldWrapper';\n\nexport const RECORDING_RULES_GROUP = '__recording_rules__';\nconst LAST_USED_LABELS_KEY = 'grafana.datasources.prometheus.browser.labels';\n\nfunction getChooserText(metricsLookupDisabled: boolean, hasSyntax: boolean, hasMetrics: boolean) {\n  if (metricsLookupDisabled) {\n    return '(Disabled)';\n  }\n\n  if (!hasSyntax) {\n    return 'Loading metrics...';\n  }\n\n  if (!hasMetrics) {\n    return '(No metrics found)';\n  }\n\n  return 'Metrics browser';\n}\n\nexport function willApplySuggestion(suggestion: string, { typeaheadContext, typeaheadText }: SuggestionsState): string {\n  // Modify suggestion based on context\n  switch (typeaheadContext) {\n    case 'context-labels': {\n      const nextChar = DOMUtil.getNextCharacter();\n      if (!nextChar || nextChar === '}' || nextChar === ',') {\n        suggestion += '=';\n      }\n      break;\n    }\n\n    case 'context-label-values': {\n      // Always add quotes and remove existing ones instead\n      if (!typeaheadText.match(/^(!?=~?\"|\")/)) {\n        suggestion = `\"${suggestion}`;\n      }\n      if (DOMUtil.getNextCharacter() !== '\"') {\n        suggestion = `${suggestion}\"`;\n      }\n      break;\n    }\n\n    default:\n  }\n  return suggestion;\n}\n\ninterface PromQueryFieldProps extends QueryEditorProps<PrometheusDatasource, PromQuery, PromOptions>, Themeable2 {\n  ExtraFieldElement?: ReactNode;\n  'data-testid'?: string;\n}\n\ninterface PromQueryFieldState {\n  labelBrowserVisible: boolean;\n  syntaxLoaded: boolean;\n  hint: QueryHint | null;\n}\n\nclass PromQueryField extends React.PureComponent<PromQueryFieldProps, PromQueryFieldState> {\n  plugins: Array<Plugin<Editor>>;\n  declare languageProviderInitializationPromise: CancelablePromise<any>;\n\n  constructor(props: PromQueryFieldProps, context: React.Context<any>) {\n    super(props, context);\n\n    this.plugins = [\n      BracesPlugin(),\n      SlatePrism(\n        {\n          onlyIn: (node: any) => node.type === 'code_block',\n          getSyntax: (node: any) => 'promql',\n        },\n        { ...(prismLanguages as LanguageMap), promql: this.props.datasource.languageProvider.syntax }\n      ),\n    ];\n\n    this.state = {\n      labelBrowserVisible: false,\n      syntaxLoaded: false,\n      hint: null,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.datasource.languageProvider) {\n      this.refreshMetrics();\n    }\n    this.refreshHint();\n  }\n\n  componentWillUnmount() {\n    if (this.languageProviderInitializationPromise) {\n      this.languageProviderInitializationPromise.cancel();\n    }\n  }\n\n  componentDidUpdate(prevProps: PromQueryFieldProps) {\n    const {\n      data,\n      datasource: { languageProvider },\n      range,\n    } = this.props;\n\n    if (languageProvider !== prevProps.datasource.languageProvider) {\n      // We reset this only on DS change so we do not flesh loading state on every rangeChange which happens on every\n      // query run if using relative range.\n      this.setState({\n        syntaxLoaded: false,\n      });\n    }\n\n    const changedRangeToRefresh = this.rangeChangedToRefresh(range, prevProps.range);\n    // We want to refresh metrics when language provider changes and/or when range changes (we round up intervals to a minute)\n    if (languageProvider !== prevProps.datasource.languageProvider || changedRangeToRefresh) {\n      this.refreshMetrics();\n    }\n\n    if (data && prevProps.data && prevProps.data.series !== data.series) {\n      this.refreshHint();\n    }\n  }\n\n  refreshHint = () => {\n    const { datasource, query, data } = this.props;\n    const initHints = datasource.getInitHints();\n    const initHint = initHints.length > 0 ? initHints[0] : null;\n\n    if (!data || data.series.length === 0) {\n      this.setState({\n        hint: initHint,\n      });\n      return;\n    }\n\n    const result = isDataFrame(data.series[0]) ? data.series.map(toLegacyResponseData) : data.series;\n    const queryHints = datasource.getQueryHints(query, result);\n    let queryHint = queryHints.length > 0 ? queryHints[0] : null;\n\n    this.setState({ hint: queryHint ?? initHint });\n  };\n\n  refreshMetrics = async () => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n\n    this.languageProviderInitializationPromise = makePromiseCancelable(languageProvider.start());\n\n    try {\n      const remainingTasks = await this.languageProviderInitializationPromise.promise;\n      await Promise.all(remainingTasks);\n      this.onUpdateLanguage();\n    } catch (err) {\n      if (isCancelablePromiseRejection(err) && err.isCanceled) {\n        // do nothing, promise was canceled\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  rangeChangedToRefresh(range?: TimeRange, prevRange?: TimeRange): boolean {\n    if (range && prevRange) {\n      const sameMinuteFrom = roundMsToMin(range.from.valueOf()) === roundMsToMin(prevRange.from.valueOf());\n      const sameMinuteTo = roundMsToMin(range.to.valueOf()) === roundMsToMin(prevRange.to.valueOf());\n      // If both are same, don't need to refresh.\n      return !(sameMinuteFrom && sameMinuteTo);\n    }\n    return false;\n  }\n\n  /**\n   * TODO #33976: Remove this, add histogram group (query = `histogram_quantile(0.95, sum(rate(${metric}[5m])) by (le))`;)\n   */\n  onChangeLabelBrowser = (selector: string) => {\n    this.onChangeQuery(selector, true);\n    this.setState({ labelBrowserVisible: false });\n  };\n\n  onChangeQuery = (value: string, override?: boolean) => {\n    // Send text change to parent\n    const { query, onChange, onRunQuery } = this.props;\n    if (onChange) {\n      const nextQuery: PromQuery = { ...query, expr: value };\n      onChange(nextQuery);\n\n      if (override && onRunQuery) {\n        onRunQuery();\n      }\n    }\n  };\n\n  onClickChooserButton = () => {\n    this.setState((state) => ({ labelBrowserVisible: !state.labelBrowserVisible }));\n\n    reportInteraction('user_grafana_prometheus_metrics_browser_clicked', {\n      editorMode: this.state.labelBrowserVisible ? 'metricViewClosed' : 'metricViewOpen',\n      app: this.props?.app ?? '',\n    });\n  };\n\n  onClickHintFix = () => {\n    const { datasource, query, onChange, onRunQuery } = this.props;\n    const { hint } = this.state;\n    if (hint?.fix?.action) {\n      onChange(datasource.modifyQuery(query, hint.fix.action));\n    }\n    onRunQuery();\n  };\n\n  onUpdateLanguage = () => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n    const { metrics } = languageProvider;\n\n    if (!metrics) {\n      return;\n    }\n\n    this.setState({ syntaxLoaded: true });\n  };\n\n  onTypeahead = async (typeahead: TypeaheadInput): Promise<TypeaheadOutput> => {\n    const {\n      datasource: { languageProvider },\n    } = this.props;\n\n    if (!languageProvider) {\n      return { suggestions: [] };\n    }\n\n    const { history } = this.props;\n    const { prefix, text, value, wrapperClasses, labelKey } = typeahead;\n\n    const result = await languageProvider.provideCompletionItems(\n      { text, value, prefix, wrapperClasses, labelKey },\n      { history }\n    );\n\n    return result;\n  };\n\n  render() {\n    const {\n      datasource,\n      datasource: { languageProvider },\n      query,\n      ExtraFieldElement,\n      history = [],\n      theme,\n    } = this.props;\n\n    const { labelBrowserVisible, syntaxLoaded, hint } = this.state;\n    const hasMetrics = languageProvider.metrics.length > 0;\n    const chooserText = getChooserText(datasource.lookupsDisabled, syntaxLoaded, hasMetrics);\n    const buttonDisabled = !(syntaxLoaded && hasMetrics);\n\n    return (\n      <LocalStorageValueProvider<string[]> storageKey={LAST_USED_LABELS_KEY} defaultValue={[]}>\n        {(lastUsedLabels, onLastUsedLabelsSave, onLastUsedLabelsDelete) => {\n          return (\n            <>\n              <div\n                className=\"gf-form-inline gf-form-inline--xs-view-flex-column flex-grow-1\"\n                data-testid={this.props['data-testid']}\n              >\n                <button\n                  className=\"gf-form-label query-keyword pointer\"\n                  onClick={this.onClickChooserButton}\n                  disabled={buttonDisabled}\n                  type=\"button\"\n                >\n                  {chooserText}\n                  <Icon name={labelBrowserVisible ? 'angle-down' : 'angle-right'} />\n                </button>\n\n                <div className=\"gf-form gf-form--grow flex-shrink-1 min-width-15\">\n                  <MonacoQueryFieldWrapper\n                    languageProvider={languageProvider}\n                    history={history}\n                    onChange={this.onChangeQuery}\n                    onRunQuery={this.props.onRunQuery}\n                    initialValue={query.expr ?? ''}\n                    placeholder=\"Enter a PromQL query…\"\n                  />\n                </div>\n              </div>\n              {labelBrowserVisible && (\n                <div className=\"gf-form\">\n                  <PrometheusMetricsBrowser\n                    languageProvider={languageProvider}\n                    onChange={this.onChangeLabelBrowser}\n                    lastUsedLabels={lastUsedLabels || []}\n                    storeLastUsedLabels={onLastUsedLabelsSave}\n                    deleteLastUsedLabels={onLastUsedLabelsDelete}\n                  />\n                </div>\n              )}\n\n              {ExtraFieldElement}\n              {hint ? (\n                <div className=\"query-row-break\">\n                  <div className=\"prom-query-field-info text-warning\">\n                    {hint.label}{' '}\n                    {hint.fix ? (\n                      <button\n                        type=\"button\"\n                        className={cx(clearButtonStyles(theme), 'text-link', 'muted')}\n                        onClick={this.onClickHintFix}\n                      >\n                        {hint.fix.label}\n                      </button>\n                    ) : null}\n                  </div>\n                </div>\n              ) : null}\n            </>\n          );\n        }}\n      </LocalStorageValueProvider>\n    );\n  }\n}\n\nexport default withTheme2(PromQueryField);\n","import React from 'react';\n\nimport { AnnotationQuery } from '@grafana/data';\nimport { EditorField, EditorRow, EditorRows, EditorSwitch, Space } from '@grafana/experimental';\nimport { AutoSizeInput, Input } from '@grafana/ui';\n\nimport { PromQueryCodeEditor } from '../querybuilder/components/PromQueryCodeEditor';\nimport { PromQuery } from '../types';\n\nimport { PromQueryEditorProps } from './types';\n\ntype Props = PromQueryEditorProps & {\n  annotation?: AnnotationQuery<PromQuery>;\n  onAnnotationChange?: (annotation: AnnotationQuery<PromQuery>) => void;\n};\n\nexport function AnnotationQueryEditor(props: Props) {\n  // This is because of problematic typing. See AnnotationQueryEditorProps in grafana-data/annotations.ts.\n  const annotation = props.annotation!;\n  const onAnnotationChange = props.onAnnotationChange!;\n  const query = { expr: annotation.expr, refId: annotation.name, interval: annotation.step };\n\n  return (\n    <>\n      <EditorRows>\n        <PromQueryCodeEditor\n          {...props}\n          query={query}\n          showExplain={false}\n          onChange={(query) => {\n            onAnnotationChange({\n              ...annotation,\n              expr: query.expr,\n            });\n          }}\n        />\n        <EditorRow>\n          <EditorField\n            label=\"Min step\"\n            tooltip={\n              <>\n                An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n                <code>$__interval</code> and <code>$__rate_interval</code> variables.\n              </>\n            }\n          >\n            <AutoSizeInput\n              type=\"text\"\n              aria-label=\"Set lower limit for the step parameter\"\n              placeholder={'auto'}\n              minWidth={10}\n              onCommitChange={(ev) => {\n                onAnnotationChange({\n                  ...annotation,\n                  step: ev.currentTarget.value,\n                });\n              }}\n              defaultValue={query.interval}\n            />\n          </EditorField>\n        </EditorRow>\n      </EditorRows>\n      <Space v={0.5} />\n      <EditorRow>\n        <EditorField\n          label=\"Title\"\n          tooltip={\n            'Use either the name or a pattern. For example, {{instance}} is replaced with label value for the label instance.'\n          }\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"{{alertname}}\"\n            value={annotation.titleFormat}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                titleFormat: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField label=\"Tags\">\n          <Input\n            type=\"text\"\n            placeholder=\"label1,label2\"\n            value={annotation.tagKeys}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                tagKeys: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField\n          label=\"Text\"\n          tooltip={\n            'Use either the name or a pattern. For example, {{instance}} is replaced with label value for the label instance.'\n          }\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"{{instance}}\"\n            value={annotation.textFormat}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                textFormat: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n        <EditorField\n          label=\"Series value as timestamp\"\n          tooltip={\n            'The unit of timestamp is milliseconds. If the unit of the series value is seconds, multiply its range vector by 1000.'\n          }\n        >\n          <EditorSwitch\n            value={annotation.useValueForTime}\n            onChange={(event) => {\n              onAnnotationChange({\n                ...annotation,\n                useValueForTime: event.currentTarget.value,\n              });\n            }}\n          />\n        </EditorField>\n      </EditorRow>\n    </>\n  );\n}\n","import { chain, map as _map, uniq } from 'lodash';\nimport { lastValueFrom } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { MetricFindValue, TimeRange } from '@grafana/data';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport { PrometheusDatasource } from './datasource';\nimport { getPrometheusTime } from './language_utils';\nimport { PromQueryRequest } from './types';\n\nexport default class PrometheusMetricFindQuery {\n  range: TimeRange;\n\n  constructor(private datasource: PrometheusDatasource, private query: string) {\n    this.datasource = datasource;\n    this.query = query;\n    this.range = getTimeSrv().timeRange();\n  }\n\n  process(): Promise<MetricFindValue[]> {\n    const labelNamesRegex = /^label_names\\(\\)\\s*$/;\n    const labelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/;\n    const metricNamesRegex = /^metrics\\((.+)\\)\\s*$/;\n    const queryResultRegex = /^query_result\\((.+)\\)\\s*$/;\n    const labelNamesQuery = this.query.match(labelNamesRegex);\n    if (labelNamesQuery) {\n      return this.datasource.getTagKeys();\n    }\n\n    const labelValuesQuery = this.query.match(labelValuesRegex);\n    if (labelValuesQuery) {\n      if (labelValuesQuery[1]) {\n        return this.labelValuesQuery(labelValuesQuery[2], labelValuesQuery[1]);\n      } else {\n        return this.labelValuesQuery(labelValuesQuery[2]);\n      }\n    }\n\n    const metricNamesQuery = this.query.match(metricNamesRegex);\n    if (metricNamesQuery) {\n      return this.metricNameQuery(metricNamesQuery[1]);\n    }\n\n    const queryResultQuery = this.query.match(queryResultRegex);\n    if (queryResultQuery) {\n      return lastValueFrom(this.queryResultQuery(queryResultQuery[1]));\n    }\n\n    // if query contains full metric name, return metric name and label list\n    const expressions = ['label_values()', 'metrics()', 'query_result()'];\n    if (!expressions.includes(this.query)) {\n      return this.metricNameAndLabelsQuery(this.query);\n    }\n\n    return Promise.resolve([]);\n  }\n\n  labelValuesQuery(label: string, metric?: string) {\n    const start = getPrometheusTime(this.range.from, false);\n    const end = getPrometheusTime(this.range.to, true);\n    const params = { ...(metric && { 'match[]': metric }), start: start.toString(), end: end.toString() };\n\n    if (!metric || this.datasource.hasLabelsMatchAPISupport()) {\n      const url = `/api/v1/label/${label}/values`;\n\n      return this.datasource.metadataRequest(url, params).then((result: any) => {\n        return _map(result.data.data, (value) => {\n          return { text: value };\n        });\n      });\n    } else {\n      const url = `/api/v1/series`;\n\n      return this.datasource.metadataRequest(url, params).then((result: any) => {\n        const _labels = _map(result.data.data, (metric) => {\n          return metric[label] || '';\n        }).filter((label) => {\n          return label !== '';\n        });\n\n        return uniq(_labels).map((metric) => {\n          return {\n            text: metric,\n            expandable: true,\n          };\n        });\n      });\n    }\n  }\n\n  metricNameQuery(metricFilterPattern: string) {\n    const start = getPrometheusTime(this.range.from, false);\n    const end = getPrometheusTime(this.range.to, true);\n    const params = {\n      start: start.toString(),\n      end: end.toString(),\n    };\n    const url = `/api/v1/label/__name__/values`;\n\n    return this.datasource.metadataRequest(url, params).then((result: any) => {\n      return chain(result.data.data)\n        .filter((metricName) => {\n          const r = new RegExp(metricFilterPattern);\n          return r.test(metricName);\n        })\n        .map((matchedMetricName) => {\n          return {\n            text: matchedMetricName,\n            expandable: true,\n          };\n        })\n        .value();\n    });\n  }\n\n  queryResultQuery(query: string) {\n    const end = getPrometheusTime(this.range.to, true);\n    const instantQuery: PromQueryRequest = { expr: query } as PromQueryRequest;\n    return this.datasource.performInstantQuery(instantQuery, end).pipe(\n      map((result) => {\n        switch (result.data.data.resultType) {\n          case 'scalar': // [ <unix_time>, \"<scalar_value>\" ]\n          case 'string': // [ <unix_time>, \"<string_value>\" ]\n            return [\n              {\n                text: result.data.data.result[1] || '',\n                expandable: false,\n              },\n            ];\n          case 'vector':\n            return _map(result.data.data.result, (metricData) => {\n              let text = metricData.metric.__name__ || '';\n              delete metricData.metric.__name__;\n              text +=\n                '{' +\n                _map(metricData.metric, (v, k) => {\n                  return k + '=\"' + v + '\"';\n                }).join(',') +\n                '}';\n              text += ' ' + metricData.value[1] + ' ' + metricData.value[0] * 1000;\n\n              return {\n                text: text,\n                expandable: true,\n              };\n            });\n          default:\n            throw Error(`Unknown/Unhandled result type: [${result.data.data.resultType}]`);\n        }\n      })\n    );\n  }\n\n  metricNameAndLabelsQuery(query: string): Promise<MetricFindValue[]> {\n    const start = getPrometheusTime(this.range.from, false);\n    const end = getPrometheusTime(this.range.to, true);\n    const params = {\n      'match[]': query,\n      start: start.toString(),\n      end: end.toString(),\n    };\n\n    const url = `/api/v1/series`;\n    const self = this;\n\n    return this.datasource.metadataRequest(url, params).then((result: any) => {\n      return _map(result.data.data, (metric: { [key: string]: string }) => {\n        return {\n          text: self.datasource.getOriginalMetricName(metric),\n          expandable: true,\n        };\n      });\n    });\n  }\n}\n","import { size } from 'lodash';\n\nimport { QueryHint, QueryFix } from '@grafana/data';\n\nimport { PrometheusDatasource } from './datasource';\n\n/**\n * Number of time series results needed before starting to suggest sum aggregation hints\n */\nexport const SUM_HINT_THRESHOLD_COUNT = 20;\n\nexport function getQueryHints(query: string, series?: any[], datasource?: PrometheusDatasource): QueryHint[] {\n  const hints = [];\n\n  // ..._bucket metric needs a histogram_quantile()\n  const histogramMetric = query.trim().match(/^\\w+_bucket$|^\\w+_bucket{.*}$/);\n  if (histogramMetric) {\n    const label = 'Selected metric has buckets.';\n    hints.push({\n      type: 'HISTOGRAM_QUANTILE',\n      label,\n      fix: {\n        label: 'Consider calculating aggregated quantile by adding histogram_quantile().',\n        action: {\n          type: 'ADD_HISTOGRAM_QUANTILE',\n          query,\n        },\n      } as QueryFix,\n    });\n  }\n\n  // Check for need of rate()\n  if (query.indexOf('rate(') === -1 && query.indexOf('increase(') === -1) {\n    // Use metric metadata for exact types\n    const nameMatch = query.match(/\\b(\\w+_(total|sum|count))\\b/);\n    let counterNameMetric = nameMatch ? nameMatch[1] : '';\n    const metricsMetadata = datasource?.languageProvider?.metricsMetadata;\n    let certain = false;\n\n    if (metricsMetadata) {\n      // Tokenize the query into its identifiers (see https://prometheus.io/docs/concepts/data_model/#metric-names-and-labels)\n      const queryTokens = Array.from(query.matchAll(/\\$?[a-zA-Z_:][a-zA-Z0-9_:]*/g))\n        .map(([match]) => match)\n        // Exclude variable identifiers\n        .filter((token) => !token.startsWith('$'))\n        // Split composite keys to match the tokens returned by the language provider\n        .flatMap((token) => token.split(':'));\n      // Determine whether any of the query identifier tokens refers to a counter metric\n      counterNameMetric =\n        queryTokens.find((metricName) => {\n          // Only considering first type information, could be non-deterministic\n          const metadata = metricsMetadata[metricName];\n          if (metadata && metadata.type.toLowerCase() === 'counter') {\n            certain = true;\n            return true;\n          } else {\n            return false;\n          }\n        }) ?? '';\n    }\n\n    if (counterNameMetric) {\n      // FixableQuery consists of metric name and optionally label-value pairs. We are not offering fix for complex queries yet.\n      const fixableQuery = query.trim().match(/^\\w+$|^\\w+{.*}$/);\n      const verb = certain ? 'is' : 'looks like';\n      let label = `Selected metric ${verb} a counter.`;\n      let fix: QueryFix | undefined;\n\n      if (fixableQuery) {\n        fix = {\n          label: 'Consider calculating rate of counter by adding rate().',\n          action: {\n            type: 'ADD_RATE',\n            query,\n          },\n        };\n      } else {\n        label = `${label} Consider calculating rate of counter by adding rate().`;\n      }\n\n      hints.push({\n        type: 'APPLY_RATE',\n        label,\n        fix,\n      });\n    }\n  }\n\n  // Check for recording rules expansion\n  if (datasource && datasource.ruleMappings) {\n    const mapping = datasource.ruleMappings;\n    const mappingForQuery = Object.keys(mapping).reduce((acc, ruleName) => {\n      if (query.search(ruleName) > -1) {\n        return {\n          ...acc,\n          [ruleName]: mapping[ruleName],\n        };\n      }\n      return acc;\n    }, {});\n    if (size(mappingForQuery) > 0) {\n      const label = 'Query contains recording rules.';\n      hints.push({\n        type: 'EXPAND_RULES',\n        label,\n        fix: {\n          label: 'Expand rules',\n          action: {\n            type: 'EXPAND_RULES',\n            query,\n            options: mappingForQuery,\n          },\n        } as unknown as QueryFix,\n      });\n    }\n  }\n\n  if (series && series.length >= SUM_HINT_THRESHOLD_COUNT) {\n    const simpleMetric = query.trim().match(/^\\w+$/);\n    if (simpleMetric) {\n      hints.push({\n        type: 'ADD_SUM',\n        label: 'Many time series results returned.',\n        fix: {\n          label: 'Consider aggregating with sum().',\n          action: {\n            type: 'ADD_SUM',\n            query: query,\n            preventSubmit: true,\n          },\n        } as QueryFix,\n      });\n    }\n  }\n\n  return hints;\n}\n\nexport function getInitHints(datasource: PrometheusDatasource): QueryHint[] {\n  const hints = [];\n  // Hint if using Loki as Prometheus data source\n  if (datasource.directUrl.includes('/loki') && !datasource.languageProvider.metrics.length) {\n    hints.push({\n      label: `Using Loki as a Prometheus data source is no longer supported. You must use the Loki data source for your Loki instance.`,\n      type: 'INFO',\n    });\n  }\n\n  // Hint for big disabled lookups\n  if (datasource.lookupsDisabled) {\n    hints.push({\n      label: `Labels and metrics lookup was disabled in data source settings.`,\n      type: 'INFO',\n    });\n  }\n\n  return hints;\n}\n","import { CoreApp, DataQueryRequest, DataQueryResponse } from '@grafana/data';\nimport { reportInteraction, config } from '@grafana/runtime';\n\nimport { PromQuery } from './types';\n\nexport function trackQuery(\n  response: DataQueryResponse,\n  request: DataQueryRequest<PromQuery> & { targets: PromQuery[] },\n  startTime: Date\n): void {\n  const { app, targets: queries } = request;\n  // We do want to track panel-editor and explore\n  // We do not want to track queries from the dashboard or viewing a panel\n  // also included in the tracking is cloud-alerting, unified-alerting, and unknown\n  if (app === CoreApp.Dashboard || app === CoreApp.PanelViewer) {\n    return;\n  }\n\n  for (const query of queries) {\n    reportInteraction('grafana_prometheus_query_executed', {\n      app,\n      grafana_version: config.buildInfo.version,\n      has_data: response.data.some((frame) => frame.length > 0),\n      has_error: response.error !== undefined,\n      expr: query.expr,\n      format: query.format,\n      instant: query.instant,\n      range: query.range,\n      exemplar: query.exemplar,\n      hinting: query.hinting,\n      interval: query.interval,\n      intervalFactor: query.intervalFactor,\n      utcOffsetSec: query.utcOffsetSec,\n      legend: query.legendFormat,\n      valueWithRefId: query.valueWithRefId,\n      requestId: request.requestId,\n      showingGraph: query.showingGraph,\n      showingTable: query.showingTable,\n      editor_mode: query.editorMode,\n      simultaneously_sent_query_count: queries.length,\n      time_range_from: request?.range?.from?.toISOString(),\n      time_range_to: request?.range?.to?.toISOString(),\n      time_taken: Date.now() - startTime.getTime(),\n    });\n  }\n}\n","import { PromVariableQuery, PromVariableQueryType as QueryType } from '../types';\n\nconst labelNamesRegex = /^label_names\\(\\)\\s*$/;\nconst labelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/;\nconst metricNamesRegex = /^metrics\\((.+)\\)\\s*$/;\nconst queryResultRegex = /^query_result\\((.+)\\)\\s*$/;\n\nexport function migrateVariableQueryToEditor(rawQuery: string | PromVariableQuery): PromVariableQuery {\n  // If not string, we assume PromVariableQuery\n  if (typeof rawQuery !== 'string') {\n    return rawQuery;\n  }\n\n  const queryBase = {\n    refId: 'PrometheusDatasource-VariableQuery',\n    qryType: QueryType.LabelNames,\n  };\n\n  const labelNames = rawQuery.match(labelNamesRegex);\n  if (labelNames) {\n    return {\n      ...queryBase,\n      qryType: QueryType.LabelNames,\n    };\n  }\n\n  const labelValues = rawQuery.match(labelValuesRegex);\n\n  if (labelValues) {\n    const label = labelValues[2];\n    const metric = labelValues[1];\n    if (metric) {\n      return {\n        ...queryBase,\n        qryType: QueryType.LabelValues,\n        label,\n        metric,\n      };\n    } else {\n      return {\n        ...queryBase,\n        qryType: QueryType.LabelValues,\n        label,\n      };\n    }\n  }\n\n  const metricNames = rawQuery.match(metricNamesRegex);\n  if (metricNames) {\n    return {\n      ...queryBase,\n      qryType: QueryType.MetricNames,\n      metric: metricNames[1],\n    };\n  }\n\n  const queryResult = rawQuery.match(queryResultRegex);\n  if (queryResult) {\n    return {\n      ...queryBase,\n      qryType: QueryType.VarQueryResult,\n      varQuery: queryResult[1],\n    };\n  }\n\n  // seriesQuery does not have a function and no regex above\n  if (!labelNames && !labelValues && !metricNames && !queryResult) {\n    return {\n      ...queryBase,\n      qryType: QueryType.SeriesQuery,\n      seriesQuery: rawQuery,\n    };\n  }\n\n  return queryBase;\n}\n\n// migrate it back to a string with the correct varialbes in place\nexport function migrateVariableEditorBackToVariableSupport(QueryVariable: PromVariableQuery): string {\n  switch (QueryVariable.qryType) {\n    case QueryType.LabelNames:\n      return 'label_names()';\n    case QueryType.LabelValues:\n      if (QueryVariable.metric) {\n        return `label_values(${QueryVariable.metric},${QueryVariable.label})`;\n      } else {\n        return `label_values(${QueryVariable.label})`;\n      }\n    case QueryType.MetricNames:\n      return `metrics(${QueryVariable.metric})`;\n    case QueryType.VarQueryResult:\n      const varQuery = removeLineBreaks(QueryVariable.varQuery);\n      return `query_result(${varQuery})`;\n    case QueryType.SeriesQuery:\n      return '' + QueryVariable.seriesQuery;\n  }\n\n  return '';\n}\n\n// allow line breaks in query result textarea\nfunction removeLineBreaks(input?: string) {\n  return input ? input.replace(/[\\r\\n]+/gm, '') : '';\n}\n","import React, { FormEvent, useEffect, useState } from 'react';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input, Select, TextArea } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport {\n  migrateVariableEditorBackToVariableSupport,\n  migrateVariableQueryToEditor,\n} from '../migrations/variableMigration';\nimport {\n  PromOptions,\n  PromQuery,\n  PromVariableQuery,\n  PromVariableQueryType as QueryType,\n  StandardPromVariableQuery,\n} from '../types';\n\nexport const variableOptions = [\n  { label: 'Label names', value: QueryType.LabelNames },\n  { label: 'Label values', value: QueryType.LabelValues },\n  { label: 'Metrics', value: QueryType.MetricNames },\n  { label: 'Query result', value: QueryType.VarQueryResult },\n  { label: 'Series query', value: QueryType.SeriesQuery },\n];\n\nexport type Props = QueryEditorProps<PrometheusDatasource, PromQuery, PromOptions, PromVariableQuery>;\n\nconst refId = 'PrometheusVariableQueryEditor-VariableQuery';\n\nexport const PromVariableQueryEditor = ({ onChange, query, datasource }: Props) => {\n  // to select the query type, i.e. label_names, label_values, etc.\n  const [qryType, setQryType] = useState<number | undefined>(undefined);\n\n  // list of variables for each function\n  const [label, setLabel] = useState('');\n  // metric is used for both label_values() and metric()\n  // label_values() metric requires a whole/complete metric\n  // metric() is expected to be a part of a metric string\n  const [metric, setMetric] = useState('');\n  // varQuery is a whole query, can include math/rates/etc\n  const [varQuery, setVarQuery] = useState('');\n  // seriesQuery is only a whole\n  const [seriesQuery, setSeriesQuery] = useState('');\n\n  // list of label names for label_values(), /api/v1/labels, contains the same results as label_names() function\n  const [labelOptions, setLabelOptions] = useState<Array<SelectableValue<string>>>([]);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    // 1. Changing from standard to custom variable editor changes the string attr from expr to query\n    // 2. jsonnet grafana as code passes a variable as a string\n    const variableQuery = variableMigration(query);\n\n    setQryType(variableQuery.qryType);\n    setLabel(variableQuery.label ?? '');\n    setMetric(variableQuery.metric ?? '');\n    setVarQuery(variableQuery.varQuery ?? '');\n    setSeriesQuery(variableQuery.seriesQuery ?? '');\n\n    // set the migrated label in the label options\n    if (variableQuery.label) {\n      setLabelOptions([{ label: variableQuery.label, value: variableQuery.label }]);\n    }\n  }, [query]);\n\n  // set the label names options for the label values var query\n  useEffect(() => {\n    if (qryType !== QueryType.LabelValues) {\n      return;\n    }\n\n    datasource.getTagKeys().then((labelNames: Array<{ text: string }>) => {\n      setLabelOptions(labelNames.map(({ text }) => ({ label: text, value: text })));\n    });\n  }, [datasource, qryType]);\n\n  const onChangeWithVariableString = (qryType: QueryType) => {\n    const queryVar = {\n      qryType: qryType,\n      label,\n      metric,\n      varQuery,\n      seriesQuery,\n      refId: 'PrometheusVariableQueryEditor-VariableQuery',\n    };\n\n    const queryString = migrateVariableEditorBackToVariableSupport(queryVar);\n\n    onChange({\n      query: queryString,\n      refId,\n    });\n  };\n\n  const onQueryTypeChange = (newType: SelectableValue<QueryType>) => {\n    setQryType(newType.value);\n    if (newType.value === QueryType.LabelNames) {\n      onChangeWithVariableString(newType.value);\n    }\n  };\n\n  const onLabelChange = (newLabel: SelectableValue<string>) => {\n    setLabel(newLabel.value ?? '');\n  };\n\n  const onMetricChange = (e: FormEvent<HTMLInputElement>) => {\n    setMetric(e.currentTarget.value);\n  };\n\n  const onVarQueryChange = (e: FormEvent<HTMLTextAreaElement>) => {\n    setVarQuery(e.currentTarget.value);\n  };\n\n  const onSeriesQueryChange = (e: FormEvent<HTMLInputElement>) => {\n    setSeriesQuery(e.currentTarget.value);\n  };\n\n  const handleBlur = () => {\n    if (qryType === QueryType.LabelNames) {\n      onChangeWithVariableString(qryType);\n    } else if (qryType === QueryType.LabelValues && label) {\n      onChangeWithVariableString(qryType);\n    } else if (qryType === QueryType.MetricNames && metric) {\n      onChangeWithVariableString(qryType);\n    } else if (qryType === QueryType.VarQueryResult && varQuery) {\n      onChangeWithVariableString(qryType);\n    } else if (qryType === QueryType.SeriesQuery && seriesQuery) {\n      onChangeWithVariableString(qryType);\n    }\n  };\n\n  return (\n    <InlineFieldRow>\n      <InlineField\n        label=\"Query Type\"\n        labelWidth={20}\n        tooltip={\n          <div>The Prometheus data source plugin provides the following query types for template variables.</div>\n        }\n      >\n        <Select\n          placeholder=\"Select query type\"\n          aria-label=\"Query type\"\n          onChange={onQueryTypeChange}\n          onBlur={handleBlur}\n          value={qryType}\n          options={variableOptions}\n          width={25}\n        />\n      </InlineField>\n      {qryType === QueryType.LabelValues && (\n        <>\n          <InlineField\n            label=\"Label\"\n            labelWidth={20}\n            required\n            tooltip={\n              <div>\n                Returns a list of label values for the label name in all metrics unless the metric is specified.\n              </div>\n            }\n          >\n            <Select\n              aria-label=\"label-select\"\n              onChange={onLabelChange}\n              onBlur={handleBlur}\n              value={label}\n              options={labelOptions}\n              width={25}\n              allowCustomValue\n            />\n          </InlineField>\n          <InlineField\n            label=\"Metric\"\n            labelWidth={20}\n            tooltip={<div>Optional: returns a list of label values for the label name in the specified metric.</div>}\n          >\n            <Input\n              type=\"text\"\n              aria-label=\"Metric selector\"\n              placeholder=\"Optional metric selector\"\n              value={metric}\n              onChange={onMetricChange}\n              onBlur={handleBlur}\n              width={25}\n            />\n          </InlineField>\n        </>\n      )}\n      {qryType === QueryType.MetricNames && (\n        <>\n          <InlineField\n            label=\"Metric Regex\"\n            labelWidth={20}\n            tooltip={<div>Returns a list of metrics matching the specified metric regex.</div>}\n          >\n            <Input\n              type=\"text\"\n              aria-label=\"Metric selector\"\n              placeholder=\"Metric Regex\"\n              value={metric}\n              onChange={onMetricChange}\n              onBlur={handleBlur}\n              width={25}\n            />\n          </InlineField>\n        </>\n      )}\n      {qryType === QueryType.VarQueryResult && (\n        <>\n          <InlineField\n            label=\"Query\"\n            labelWidth={20}\n            tooltip={\n              <div>\n                Returns a list of Prometheus query results for the query. This can include Prometheus functions, i.e.\n                sum(go_goroutines).\n              </div>\n            }\n          >\n            <TextArea\n              type=\"text\"\n              aria-label=\"Prometheus Query\"\n              placeholder=\"Prometheus Query\"\n              value={varQuery}\n              onChange={onVarQueryChange}\n              onBlur={handleBlur}\n              cols={100}\n            />\n          </InlineField>\n        </>\n      )}\n      {qryType === QueryType.SeriesQuery && (\n        <>\n          <InlineField\n            label=\"Series Query\"\n            labelWidth={20}\n            tooltip={\n              <div>\n                Enter enter a metric with labels, only a metric or only labels, i.e.\n                go_goroutines&#123;instance=&quot;localhost:9090&quot;&#125;, go_goroutines, or\n                &#123;instance=&quot;localhost:9090&quot;&#125;. Returns a list of time series associated with the\n                entered data.\n              </div>\n            }\n          >\n            <Input\n              type=\"text\"\n              aria-label=\"Series Query\"\n              placeholder=\"Series Query\"\n              value={seriesQuery}\n              onChange={onSeriesQueryChange}\n              onBlur={handleBlur}\n              width={100}\n            />\n          </InlineField>\n        </>\n      )}\n    </InlineFieldRow>\n  );\n};\n\nexport function variableMigration(query: string | PromVariableQuery | StandardPromVariableQuery): PromVariableQuery {\n  if (typeof query === 'string') {\n    return migrateVariableQueryToEditor(query);\n  } else if (query.query) {\n    return migrateVariableQueryToEditor(query.query);\n  } else {\n    return query;\n  }\n}\n","import { from, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse, rangeUtil } from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { getTimeSrv, TimeSrv } from '../../../features/dashboard/services/TimeSrv';\n\nimport { PromVariableQueryEditor } from './components/VariableQueryEditor';\nimport { PrometheusDatasource } from './datasource';\nimport PrometheusMetricFindQuery from './metric_find_query';\nimport { PromVariableQuery } from './types';\n\nexport class PrometheusVariableSupport extends CustomVariableSupport<PrometheusDatasource> {\n  constructor(\n    private readonly datasource: PrometheusDatasource,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super();\n    this.query = this.query.bind(this);\n  }\n\n  editor = PromVariableQueryEditor;\n\n  query(request: DataQueryRequest<PromVariableQuery>): Observable<DataQueryResponse> {\n    // Handling grafana as code from jsonnet variable queries which are strings and not objects\n    // Previously, when using StandardVariableSupport\n    // the variable query string was changed to be on the expr attribute\n    // Now, using CustomVariableSupport,\n    // the variable query is changed to the query attribute.\n    // So, without standard variable support changing the query string to the expr attribute,\n    // the variable query string is coming in as it is written in jsonnet,\n    // where it is just a string. Here is where we handle that.\n    let query: string | undefined;\n    if (typeof request.targets[0] === 'string') {\n      query = request.targets[0];\n    } else {\n      query = request.targets[0].query;\n    }\n\n    if (!query) {\n      return of({ data: [] });\n    }\n\n    const scopedVars = {\n      ...request.scopedVars,\n      __interval: { text: this.datasource.interval, value: this.datasource.interval },\n      __interval_ms: {\n        text: rangeUtil.intervalToMs(this.datasource.interval),\n        value: rangeUtil.intervalToMs(this.datasource.interval),\n      },\n      ...this.datasource.getRangeScopedVars(this.timeSrv.timeRange()),\n    };\n\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.datasource.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this.datasource, interpolated);\n    const metricFindStream = from(metricFindQuery.process());\n\n    return metricFindStream.pipe(map((results) => ({ data: results })));\n  }\n}\n","import { cloneDeep, defaults } from 'lodash';\nimport LRU from 'lru-cache';\nimport React from 'react';\nimport { forkJoin, lastValueFrom, merge, Observable, of, OperatorFunction, pipe, throwError } from 'rxjs';\nimport { catchError, filter, map, tap } from 'rxjs/operators';\nimport semver from 'semver/preload';\n\nimport {\n  AbstractQuery,\n  AnnotationEvent,\n  AnnotationQueryRequest,\n  CoreApp,\n  DataFrame,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceWithQueryExportSupport,\n  DataSourceWithQueryImportSupport,\n  dateTime,\n  LoadingState,\n  QueryFixAction,\n  rangeUtil,\n  ScopedVars,\n  TimeRange,\n} from '@grafana/data';\nimport {\n  BackendDataSourceResponse,\n  BackendSrvRequest,\n  DataSourceWithBackend,\n  FetchError,\n  FetchResponse,\n  getBackendSrv,\n  isFetchError,\n  toDataQueryResponse,\n} from '@grafana/runtime';\nimport { Badge, BadgeColor, Tooltip } from '@grafana/ui';\nimport { safeStringifyValue } from 'app/core/utils/explore';\nimport { discoverDataSourceFeatures } from 'app/features/alerting/unified/api/buildInfo';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { PromApiFeatures, PromApplication } from 'app/types/unified-alerting-dto';\n\nimport config from '../../../core/config';\n\nimport { addLabelToQuery } from './add_label_to_query';\nimport { AnnotationQueryEditor } from './components/AnnotationQueryEditor';\nimport PrometheusLanguageProvider from './language_provider';\nimport {\n  expandRecordingRules,\n  getClientCacheDurationInMinutes,\n  getPrometheusTime,\n  getRangeSnapInterval,\n} from './language_utils';\nimport { renderLegendFormat } from './legend';\nimport PrometheusMetricFindQuery from './metric_find_query';\nimport { getInitHints, getQueryHints } from './query_hints';\nimport { QueryEditorMode } from './querybuilder/shared/types';\nimport { CacheRequestInfo, defaultPrometheusQueryOverlapWindow, QueryCache } from './querycache/QueryCache';\nimport { getOriginalMetricName, transform, transformV2 } from './result_transformer';\nimport { trackQuery } from './tracking';\nimport {\n  ExemplarTraceIdDestination,\n  PromDataErrorResponse,\n  PromDataSuccessResponse,\n  PrometheusCacheLevel,\n  PromExemplarData,\n  PromMatrixData,\n  PromOptions,\n  PromQuery,\n  PromQueryRequest,\n  PromScalarData,\n  PromVectorData,\n} from './types';\nimport { PrometheusVariableSupport } from './variables';\n\nconst ANNOTATION_QUERY_STEP_DEFAULT = '60s';\nconst GET_AND_POST_METADATA_ENDPOINTS = ['api/v1/query', 'api/v1/query_range', 'api/v1/series', 'api/v1/labels'];\n\nexport const InstantQueryRefIdIndex = '-Instant';\n\nexport class PrometheusDatasource\n  extends DataSourceWithBackend<PromQuery, PromOptions>\n  implements DataSourceWithQueryImportSupport<PromQuery>, DataSourceWithQueryExportSupport<PromQuery>\n{\n  type: string;\n  ruleMappings: { [index: string]: string };\n  hasIncrementalQuery: boolean;\n  url: string;\n  id: number;\n  directUrl: string;\n  access: 'direct' | 'proxy';\n  basicAuth: any;\n  withCredentials: any;\n  metricsNameCache = new LRU<string, string[]>({ max: 10 });\n  interval: string;\n  queryTimeout: string | undefined;\n  httpMethod: string;\n  languageProvider: PrometheusLanguageProvider;\n  exemplarTraceIdDestinations: ExemplarTraceIdDestination[] | undefined;\n  lookupsDisabled: boolean;\n  customQueryParameters: any;\n  datasourceConfigurationPrometheusFlavor?: PromApplication;\n  datasourceConfigurationPrometheusVersion?: string;\n  defaultEditor?: QueryEditorMode;\n  exemplarsAvailable: boolean;\n  subType: PromApplication;\n  rulerEnabled: boolean;\n  cacheLevel: PrometheusCacheLevel;\n  cache: QueryCache;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<PromOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv(),\n    languageProvider?: PrometheusLanguageProvider\n  ) {\n    super(instanceSettings);\n\n    this.type = 'prometheus';\n    this.subType = PromApplication.Prometheus;\n    this.rulerEnabled = false;\n    this.id = instanceSettings.id;\n    this.url = instanceSettings.url!;\n    this.access = instanceSettings.access;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.interval = instanceSettings.jsonData.timeInterval || '15s';\n    this.queryTimeout = instanceSettings.jsonData.queryTimeout;\n    this.httpMethod = instanceSettings.jsonData.httpMethod || 'GET';\n    // `directUrl` is never undefined, we set it at https://github.com/grafana/grafana/blob/main/pkg/api/frontendsettings.go#L108\n    // here we \"fall back\" to this.url to make typescript happy, but it should never happen\n    this.directUrl = instanceSettings.jsonData.directUrl ?? this.url;\n    this.exemplarTraceIdDestinations = instanceSettings.jsonData.exemplarTraceIdDestinations;\n    this.hasIncrementalQuery = instanceSettings.jsonData.incrementalQuerying ?? false;\n    this.ruleMappings = {};\n    this.languageProvider = languageProvider ?? new PrometheusLanguageProvider(this);\n    this.lookupsDisabled = instanceSettings.jsonData.disableMetricsLookup ?? false;\n    this.customQueryParameters = new URLSearchParams(instanceSettings.jsonData.customQueryParameters);\n    this.datasourceConfigurationPrometheusFlavor = instanceSettings.jsonData.prometheusType;\n    this.datasourceConfigurationPrometheusVersion = instanceSettings.jsonData.prometheusVersion;\n    this.defaultEditor = instanceSettings.jsonData.defaultEditor;\n    this.variables = new PrometheusVariableSupport(this, this.templateSrv, this.timeSrv);\n    this.exemplarsAvailable = true;\n    this.cacheLevel = instanceSettings.jsonData.cacheLevel ?? PrometheusCacheLevel.Low;\n    this.cache = new QueryCache(\n      instanceSettings.jsonData.incrementalQueryOverlapWindow ?? defaultPrometheusQueryOverlapWindow\n    );\n\n    // This needs to be here and cannot be static because of how annotations typing affects casting of data source\n    // objects to DataSourceApi types.\n    // We don't use the default processing for prometheus.\n    // See standardAnnotationSupport.ts/[shouldUseMappingUI|shouldUseLegacyRunner]\n    this.annotations = {\n      QueryEditor: AnnotationQueryEditor,\n    };\n  }\n\n  init = async () => {\n    this.loadRules();\n    this.exemplarsAvailable = await this.areExemplarsAvailable();\n  };\n\n  getQueryDisplayText(query: PromQuery) {\n    return query.expr;\n  }\n\n  hasLabelsMatchAPISupport(): boolean {\n    return (\n      // https://github.com/prometheus/prometheus/releases/tag/v2.24.0\n      this._isDatasourceVersionGreaterOrEqualTo('2.24.0', PromApplication.Prometheus) ||\n      // All versions of Mimir support matchers for labels API\n      this._isDatasourceVersionGreaterOrEqualTo('2.0.0', PromApplication.Mimir) ||\n      // https://github.com/cortexproject/cortex/discussions/4542\n      this._isDatasourceVersionGreaterOrEqualTo('1.11.0', PromApplication.Cortex) ||\n      // https://github.com/thanos-io/thanos/pull/3566\n      //https://github.com/thanos-io/thanos/releases/tag/v0.18.0\n      this._isDatasourceVersionGreaterOrEqualTo('0.18.0', PromApplication.Thanos)\n    );\n  }\n\n  _isDatasourceVersionGreaterOrEqualTo(targetVersion: string, targetFlavor: PromApplication): boolean {\n    // User hasn't configured flavor/version yet, default behavior is to not support features that require version configuration when not provided\n    if (!this.datasourceConfigurationPrometheusVersion || !this.datasourceConfigurationPrometheusFlavor) {\n      return false;\n    }\n\n    if (targetFlavor !== this.datasourceConfigurationPrometheusFlavor) {\n      return false;\n    }\n\n    return semver.gte(this.datasourceConfigurationPrometheusVersion, targetVersion);\n  }\n\n  _addTracingHeaders(httpOptions: PromQueryRequest, options: DataQueryRequest<PromQuery>) {\n    httpOptions.headers = {};\n    if (this.access === 'proxy') {\n      httpOptions.headers['X-Dashboard-UID'] = options.dashboardUID;\n      httpOptions.headers['X-Panel-Id'] = options.panelId;\n    }\n  }\n\n  /**\n   * Any request done from this data source should go through here as it contains some common processing for the\n   * request. Any processing done here needs to be also copied on the backend as this goes through data source proxy\n   * but not through the same code as alerting.\n   */\n  _request<T = any>(\n    url: string,\n    data: Record<string, string> | null,\n    overrides: Partial<BackendSrvRequest> = {}\n  ): Observable<FetchResponse<T>> {\n    if (this.access === 'direct') {\n      const error = new Error(\n        'Browser access mode in the Prometheus datasource is no longer available. Switch to server access mode.'\n      );\n      return throwError(() => error);\n    }\n\n    data = data || {};\n    for (const [key, value] of this.customQueryParameters) {\n      if (data[key] == null) {\n        data[key] = value;\n      }\n    }\n\n    let queryUrl = this.url + url;\n    if (url.startsWith(`/api/datasources/uid/${this.uid}`)) {\n      // This url is meant to be a replacement for the whole URL. Replace the entire URL\n      queryUrl = url;\n    }\n\n    const options: BackendSrvRequest = defaults(overrides, {\n      url: queryUrl,\n      method: this.httpMethod,\n      headers: {},\n    });\n\n    if (options.method === 'GET') {\n      if (data && Object.keys(data).length) {\n        options.url =\n          options.url +\n          (options.url.search(/\\?/) >= 0 ? '&' : '?') +\n          Object.entries(data)\n            .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n            .join('&');\n      }\n    } else {\n      options.headers!['Content-Type'] = 'application/x-www-form-urlencoded';\n      options.data = data;\n    }\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n\n    if (this.basicAuth) {\n      options.headers!.Authorization = this.basicAuth;\n    }\n\n    return getBackendSrv().fetch<T>(options);\n  }\n\n  async importFromAbstractQueries(abstractQueries: AbstractQuery[]): Promise<PromQuery[]> {\n    return abstractQueries.map((abstractQuery) => this.languageProvider.importFromAbstractQuery(abstractQuery));\n  }\n\n  async exportToAbstractQueries(queries: PromQuery[]): Promise<AbstractQuery[]> {\n    return queries.map((query) => this.languageProvider.exportToAbstractQuery(query));\n  }\n\n  // Use this for tab completion features, wont publish response to other components\n  async metadataRequest<T = any>(url: string, params = {}, options?: Partial<BackendSrvRequest>) {\n    // If URL includes endpoint that supports POST and GET method, try to use configured method. This might fail as POST is supported only in v2.10+.\n    if (GET_AND_POST_METADATA_ENDPOINTS.some((endpoint) => url.includes(endpoint))) {\n      try {\n        return await lastValueFrom(\n          this._request<T>(`/api/datasources/uid/${this.uid}/resources${url}`, params, {\n            method: this.httpMethod,\n            hideFromInspector: true,\n            showErrorAlert: false,\n            ...options,\n          })\n        );\n      } catch (err) {\n        // If status code of error is Method Not Allowed (405) and HTTP method is POST, retry with GET\n        if (this.httpMethod === 'POST' && isFetchError(err) && (err.status === 405 || err.status === 400)) {\n          console.warn(`Couldn't use configured POST HTTP method for this request. Trying to use GET method instead.`);\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    return await lastValueFrom(\n      this._request<T>(`/api/datasources/uid/${this.uid}/resources${url}`, params, {\n        method: 'GET',\n        hideFromInspector: true,\n        ...options,\n      })\n    ); // toPromise until we change getTagValues, getLabelNames to Observable\n  }\n\n  interpolateQueryExpr(value: string | string[] = [], variable: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return prometheusRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return prometheusSpecialRegexEscape(value);\n    }\n\n    const escapedValues = value.map((val) => prometheusSpecialRegexEscape(val));\n\n    if (escapedValues.length === 1) {\n      return escapedValues[0];\n    }\n\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  targetContainsTemplate(target: PromQuery) {\n    return this.templateSrv.containsTemplate(target.expr);\n  }\n\n  prepareTargets = (options: DataQueryRequest<PromQuery>, start: number, end: number) => {\n    const queries: PromQueryRequest[] = [];\n    const activeTargets: PromQuery[] = [];\n    const clonedTargets = cloneDeep(options.targets);\n\n    for (const target of clonedTargets) {\n      if (!target.expr || target.hide) {\n        continue;\n      }\n\n      const metricName = this.languageProvider.histogramMetrics.find((m) => target.expr.includes(m));\n\n      // In Explore, we run both (instant and range) queries if both are true (selected) or both are undefined (legacy Explore queries)\n      if (options.app === CoreApp.Explore && target.range === target.instant) {\n        // Create instant target\n        const instantTarget: any = cloneDeep(target);\n        instantTarget.format = 'table';\n        instantTarget.instant = true;\n        instantTarget.range = false;\n        instantTarget.valueWithRefId = true;\n        delete instantTarget.maxDataPoints;\n\n        // Create range target\n        const rangeTarget: any = cloneDeep(target);\n        rangeTarget.format = 'time_series';\n        rangeTarget.instant = false;\n        instantTarget.range = true;\n\n        // Create exemplar query\n        if (target.exemplar) {\n          // Only create exemplar target for different metric names\n          if (\n            !metricName ||\n            (metricName && !activeTargets.some((activeTarget) => activeTarget.expr.includes(metricName)))\n          ) {\n            const exemplarTarget = cloneDeep(target);\n            exemplarTarget.instant = false;\n            queries.push(this.createQuery(exemplarTarget, options, start, end));\n            activeTargets.push(exemplarTarget);\n          }\n          instantTarget.exemplar = false;\n          rangeTarget.exemplar = false;\n        }\n\n        // Add both targets to activeTargets and queries arrays\n        activeTargets.push(instantTarget, rangeTarget);\n        queries.push(\n          this.createQuery(instantTarget, options, start, end),\n          this.createQuery(rangeTarget, options, start, end)\n        );\n        // If running only instant query in Explore, format as table\n      } else if (target.instant && options.app === CoreApp.Explore) {\n        const instantTarget: any = cloneDeep(target);\n        instantTarget.format = 'table';\n        queries.push(this.createQuery(instantTarget, options, start, end));\n        activeTargets.push(instantTarget);\n      } else {\n        // It doesn't make sense to query for exemplars in dashboard if only instant is selected\n        if (target.exemplar && !target.instant) {\n          if (\n            !metricName ||\n            (metricName && !activeTargets.some((activeTarget) => activeTarget.expr.includes(metricName)))\n          ) {\n            const exemplarTarget = cloneDeep(target);\n            queries.push(this.createQuery(exemplarTarget, options, start, end));\n            activeTargets.push(exemplarTarget);\n          }\n          target.exemplar = false;\n        }\n        queries.push(this.createQuery(target, options, start, end));\n        activeTargets.push(target);\n      }\n    }\n\n    return {\n      queries,\n      activeTargets,\n    };\n  };\n\n  shouldRunExemplarQuery(target: PromQuery, request: DataQueryRequest<PromQuery>): boolean {\n    if (target.exemplar) {\n      // We check all already processed targets and only create exemplar target for not used metric names\n      const metricName = this.languageProvider.histogramMetrics.find((m) => target.expr.includes(m));\n      // Remove targets that weren't processed yet (in targets array they are after current target)\n      const currentTargetIdx = request.targets.findIndex((t) => t.refId === target.refId);\n      const targets = request.targets.slice(0, currentTargetIdx).filter((t) => !t.hide);\n\n      if (!metricName || (metricName && !targets.some((t) => t.expr.includes(metricName)))) {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  }\n\n  processTargetV2(target: PromQuery, request: DataQueryRequest<PromQuery>) {\n    const processedTargets: PromQuery[] = [];\n    const processedTarget = {\n      ...target,\n      exemplar: this.shouldRunExemplarQuery(target, request),\n      requestId: request.panelId + target.refId,\n      // We need to pass utcOffsetSec to backend to calculate aligned range\n      utcOffsetSec: this.timeSrv.timeRange().to.utcOffset() * 60,\n    };\n    if (target.instant && target.range) {\n      // We have query type \"Both\" selected\n      // We should send separate queries with different refId\n      processedTargets.push(\n        {\n          ...processedTarget,\n          refId: processedTarget.refId,\n          instant: false,\n        },\n        {\n          ...processedTarget,\n          refId: processedTarget.refId + InstantQueryRefIdIndex,\n          range: false,\n        }\n      );\n    } else {\n      processedTargets.push(processedTarget);\n    }\n\n    return processedTargets;\n  }\n\n  query(request: DataQueryRequest<PromQuery>): Observable<DataQueryResponse> {\n    if (this.access === 'proxy') {\n      let fullOrPartialRequest: DataQueryRequest<PromQuery>;\n      let requestInfo: CacheRequestInfo | undefined = undefined;\n      if (this.hasIncrementalQuery) {\n        requestInfo = this.cache.requestInfo(request, this.interpolateString.bind(this));\n        fullOrPartialRequest = requestInfo.requests[0];\n      } else {\n        fullOrPartialRequest = request;\n      }\n\n      const targets = fullOrPartialRequest.targets.map((target) => this.processTargetV2(target, fullOrPartialRequest));\n      const startTime = new Date();\n      return super.query({ ...fullOrPartialRequest, targets: targets.flat() }).pipe(\n        map((response) => {\n          const amendedResponse = {\n            ...response,\n            data: this.cache.procFrames(request, requestInfo, response.data),\n          };\n          return transformV2(amendedResponse, request, {\n            exemplarTraceIdDestinations: this.exemplarTraceIdDestinations,\n          });\n        }),\n        tap((response: DataQueryResponse) => {\n          trackQuery(response, request, startTime);\n        })\n      );\n      // Run queries trough browser/proxy\n    } else {\n      const start = getPrometheusTime(request.range.from, false);\n      const end = getPrometheusTime(request.range.to, true);\n      const { queries, activeTargets } = this.prepareTargets(request, start, end);\n\n      // No valid targets, return the empty result to save a round trip.\n      if (!queries || !queries.length) {\n        return of({\n          data: [],\n          state: LoadingState.Done,\n        });\n      }\n\n      if (request.app === CoreApp.Explore) {\n        return this.exploreQuery(queries, activeTargets, end);\n      }\n\n      return this.panelsQuery(queries, activeTargets, end, request.requestId, request.scopedVars);\n    }\n  }\n\n  private exploreQuery(queries: PromQueryRequest[], activeTargets: PromQuery[], end: number) {\n    let runningQueriesCount = queries.length;\n\n    const subQueries = queries.map((query, index) => {\n      const target = activeTargets[index];\n\n      const filterAndMapResponse = pipe(\n        // Decrease the counter here. We assume that each request returns only single value and then completes\n        // (should hold until there is some streaming requests involved).\n        tap(() => runningQueriesCount--),\n        filter((response: any) => (response.cancelled ? false : true)),\n        map((response: any) => {\n          const data = transform(response, {\n            query,\n            target,\n            responseListLength: queries.length,\n            exemplarTraceIdDestinations: this.exemplarTraceIdDestinations,\n          });\n          return {\n            data,\n            key: query.requestId,\n            state: runningQueriesCount === 0 ? LoadingState.Done : LoadingState.Loading,\n          } as DataQueryResponse;\n        })\n      );\n\n      return this.runQuery(query, end, filterAndMapResponse);\n    });\n\n    return merge(...subQueries);\n  }\n\n  private panelsQuery(\n    queries: PromQueryRequest[],\n    activeTargets: PromQuery[],\n    end: number,\n    requestId: string,\n    scopedVars: ScopedVars\n  ) {\n    const observables = queries.map((query, index) => {\n      const target = activeTargets[index];\n\n      const filterAndMapResponse = pipe(\n        filter((response: any) => (response.cancelled ? false : true)),\n        map((response: any) => {\n          const data = transform(response, {\n            query,\n            target,\n            responseListLength: queries.length,\n            scopedVars,\n            exemplarTraceIdDestinations: this.exemplarTraceIdDestinations,\n          });\n          return data;\n        })\n      );\n\n      return this.runQuery(query, end, filterAndMapResponse);\n    });\n\n    return forkJoin(observables).pipe(\n      map((results) => {\n        const data = results.reduce((result, current) => {\n          return [...result, ...current];\n        }, []);\n        return {\n          data,\n          key: requestId,\n          state: LoadingState.Done,\n        };\n      })\n    );\n  }\n\n  private runQuery<T>(query: PromQueryRequest, end: number, filter: OperatorFunction<any, T>): Observable<T> {\n    if (query.instant) {\n      return this.performInstantQuery(query, end).pipe(filter);\n    }\n\n    if (query.exemplar) {\n      return this.getExemplars(query).pipe(\n        catchError(() => {\n          return of({\n            data: [],\n            state: LoadingState.Done,\n          });\n        }),\n        filter\n      );\n    }\n\n    return this.performTimeSeriesQuery(query, query.start, query.end).pipe(filter);\n  }\n\n  createQuery(target: PromQuery, options: DataQueryRequest<PromQuery>, start: number, end: number) {\n    const query: PromQueryRequest = {\n      hinting: target.hinting,\n      instant: target.instant,\n      exemplar: target.exemplar,\n      step: 0,\n      expr: '',\n      refId: target.refId,\n      start: 0,\n      end: 0,\n    };\n    const range = Math.ceil(end - start);\n\n    // options.interval is the dynamically calculated interval\n    let interval: number = rangeUtil.intervalToSeconds(options.interval);\n    // Minimum interval (\"Min step\"), if specified for the query, or same as interval otherwise.\n    const minInterval = rangeUtil.intervalToSeconds(\n      this.templateSrv.replace(target.interval || options.interval, options.scopedVars)\n    );\n    // Scrape interval as specified for the query (\"Min step\") or otherwise taken from the datasource.\n    // Min step field can have template variables in it, make sure to replace it.\n    const scrapeInterval = target.interval\n      ? rangeUtil.intervalToSeconds(this.templateSrv.replace(target.interval, options.scopedVars))\n      : rangeUtil.intervalToSeconds(this.interval);\n\n    const intervalFactor = target.intervalFactor || 1;\n    // Adjust the interval to take into account any specified minimum and interval factor plus Prometheus limits\n    const adjustedInterval = this.adjustInterval(interval, minInterval, range, intervalFactor);\n    let scopedVars = {\n      ...options.scopedVars,\n      ...this.getRangeScopedVars(options.range),\n      ...this.getRateIntervalScopedVariable(adjustedInterval, scrapeInterval),\n    };\n    // If the interval was adjusted, make a shallow copy of scopedVars with updated interval vars\n    if (interval !== adjustedInterval) {\n      interval = adjustedInterval;\n      scopedVars = Object.assign({}, options.scopedVars, {\n        __interval: { text: interval + 's', value: interval + 's' },\n        __interval_ms: { text: interval * 1000, value: interval * 1000 },\n        ...this.getRateIntervalScopedVariable(interval, scrapeInterval),\n        ...this.getRangeScopedVars(options.range),\n      });\n    }\n\n    query.step = interval;\n\n    let expr = target.expr;\n\n    // Apply adhoc filters\n    expr = this.enhanceExprWithAdHocFilters(expr);\n\n    // Only replace vars in expression after having (possibly) updated interval vars\n    query.expr = this.templateSrv.replace(expr, scopedVars, this.interpolateQueryExpr);\n\n    // Align query interval with step to allow query caching and to ensure\n    // that about-same-time query results look the same.\n    const adjusted = alignRange(start, end, query.step, this.timeSrv.timeRange().to.utcOffset() * 60);\n    query.start = adjusted.start;\n    query.end = adjusted.end;\n    this._addTracingHeaders(query, options);\n\n    return query;\n  }\n\n  getRateIntervalScopedVariable(interval: number, scrapeInterval: number) {\n    // Fall back to the default scrape interval of 15s if scrapeInterval is 0 for some reason.\n    if (scrapeInterval === 0) {\n      scrapeInterval = 15;\n    }\n    const rateInterval = Math.max(interval + scrapeInterval, 4 * scrapeInterval);\n    return { __rate_interval: { text: rateInterval + 's', value: rateInterval + 's' } };\n  }\n\n  adjustInterval(interval: number, minInterval: number, range: number, intervalFactor: number) {\n    // Prometheus will drop queries that might return more than 11000 data points.\n    // Calculate a safe interval as an additional minimum to take into account.\n    // Fractional safeIntervals are allowed, however serve little purpose if the interval is greater than 1\n    // If this is the case take the ceil of the value.\n    let safeInterval = range / 11000;\n    if (safeInterval > 1) {\n      safeInterval = Math.ceil(safeInterval);\n    }\n    return Math.max(interval * intervalFactor, minInterval, safeInterval);\n  }\n\n  performTimeSeriesQuery(query: PromQueryRequest, start: number, end: number) {\n    if (start > end) {\n      throw { message: 'Invalid time range' };\n    }\n\n    const url = '/api/v1/query_range';\n    const data: any = {\n      query: query.expr,\n      start,\n      end,\n      step: query.step,\n    };\n\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n\n    return this._request<PromDataSuccessResponse<PromMatrixData>>(url, data, {\n      requestId: query.requestId,\n      headers: query.headers,\n    }).pipe(\n      catchError((err: FetchError<PromDataErrorResponse<PromMatrixData>>) => {\n        if (err.cancelled) {\n          return of(err);\n        }\n\n        return throwError(this.handleErrors(err, query));\n      })\n    );\n  }\n\n  performInstantQuery(\n    query: PromQueryRequest,\n    time: number\n  ): Observable<FetchResponse<PromDataSuccessResponse<PromVectorData | PromScalarData>> | FetchError> {\n    const url = '/api/v1/query';\n    const data: any = {\n      query: query.expr,\n      time,\n    };\n\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n\n    return this._request<PromDataSuccessResponse<PromVectorData | PromScalarData>>(\n      `/api/datasources/uid/${this.uid}/resources${url}`,\n      data,\n      {\n        requestId: query.requestId,\n        headers: query.headers,\n      }\n    ).pipe(\n      catchError((err: FetchError<PromDataErrorResponse<PromVectorData | PromScalarData>>) => {\n        if (err.cancelled) {\n          return of(err);\n        }\n\n        return throwError(this.handleErrors(err, query));\n      })\n    );\n  }\n\n  handleErrors = (err: any, target: PromQuery) => {\n    const error: DataQueryError = {\n      message: (err && err.statusText) || 'Unknown error during query transaction. Please check JS console logs.',\n      refId: target.refId,\n    };\n\n    if (err.data) {\n      if (typeof err.data === 'string') {\n        error.message = err.data;\n      } else if (err.data.error) {\n        error.message = safeStringifyValue(err.data.error);\n      }\n    } else if (err.message) {\n      error.message = err.message;\n    } else if (typeof err === 'string') {\n      error.message = err;\n    }\n\n    error.status = err.status;\n    error.statusText = err.statusText;\n\n    return error;\n  };\n\n  metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const scopedVars = {\n      __interval: { text: this.interval, value: this.interval },\n      __interval_ms: { text: rangeUtil.intervalToMs(this.interval), value: rangeUtil.intervalToMs(this.interval) },\n      ...this.getRangeScopedVars(this.timeSrv.timeRange()),\n    };\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this, interpolated);\n    return metricFindQuery.process();\n  }\n\n  getRangeScopedVars(range: TimeRange = this.timeSrv.timeRange()) {\n    const msRange = range.to.diff(range.from);\n    const sRange = Math.round(msRange / 1000);\n    return {\n      __range_ms: { text: msRange, value: msRange },\n      __range_s: { text: sRange, value: sRange },\n      __range: { text: sRange + 's', value: sRange + 's' },\n    };\n  }\n\n  async annotationQuery(options: AnnotationQueryRequest<PromQuery>): Promise<AnnotationEvent[]> {\n    if (this.access === 'direct') {\n      const error = new Error(\n        'Browser access mode in the Prometheus datasource is no longer available. Switch to server access mode.'\n      );\n      return Promise.reject(error);\n    }\n\n    const annotation = options.annotation;\n    const { expr = '' } = annotation;\n\n    if (!expr) {\n      return Promise.resolve([]);\n    }\n\n    const step = options.annotation.step || ANNOTATION_QUERY_STEP_DEFAULT;\n    const queryModel = {\n      expr,\n      range: true,\n      instant: false,\n      exemplar: false,\n      interval: step,\n      refId: 'X',\n      datasource: this.getRef(),\n    };\n\n    return await lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          headers: this.getRequestHeaders(),\n          data: {\n            from: (getPrometheusTime(options.range.from, false) * 1000).toString(),\n            to: (getPrometheusTime(options.range.to, true) * 1000).toString(),\n            queries: [this.applyTemplateVariables(queryModel, {})],\n          },\n          requestId: `prom-query-${annotation.name}`,\n        })\n        .pipe(\n          map((rsp: FetchResponse<BackendDataSourceResponse>) => {\n            return this.processAnnotationResponse(options, rsp.data);\n          })\n        )\n    );\n  }\n\n  processAnnotationResponse = (options: AnnotationQueryRequest<PromQuery>, data: BackendDataSourceResponse) => {\n    const frames: DataFrame[] = toDataQueryResponse({ data: data }).data;\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const annotation = options.annotation;\n    const { tagKeys = '', titleFormat = '', textFormat = '' } = annotation;\n\n    const step = rangeUtil.intervalToSeconds(annotation.step || ANNOTATION_QUERY_STEP_DEFAULT) * 1000;\n    const tagKeysArray = tagKeys.split(',');\n\n    const eventList: AnnotationEvent[] = [];\n\n    for (const frame of frames) {\n      if (frame.fields.length === 0) {\n        continue;\n      }\n      const timeField = frame.fields[0];\n      const valueField = frame.fields[1];\n      const labels = valueField?.labels || {};\n\n      const tags = Object.keys(labels)\n        .filter((label) => tagKeysArray.includes(label))\n        .map((label) => labels[label]);\n\n      const timeValueTuple: Array<[number, number]> = [];\n\n      let idx = 0;\n      valueField.values.forEach((value: string) => {\n        let timeStampValue: number;\n        let valueValue: number;\n        const time = timeField.values[idx];\n\n        // If we want to use value as a time, we use value as timeStampValue and valueValue will be 1\n        if (options.annotation.useValueForTime) {\n          timeStampValue = Math.floor(parseFloat(value));\n          valueValue = 1;\n        } else {\n          timeStampValue = Math.floor(parseFloat(time));\n          valueValue = parseFloat(value);\n        }\n\n        idx++;\n        timeValueTuple.push([timeStampValue, valueValue]);\n      });\n\n      const activeValues = timeValueTuple.filter((value) => value[1] > 0);\n      const activeValuesTimestamps = activeValues.map((value) => value[0]);\n\n      // Instead of creating singular annotation for each active event we group events into region if they are less\n      // or equal to `step` apart.\n      let latestEvent: AnnotationEvent | null = null;\n\n      for (const timestamp of activeValuesTimestamps) {\n        // We already have event `open` and we have new event that is inside the `step` so we just update the end.\n        if (latestEvent && (latestEvent.timeEnd ?? 0) + step >= timestamp) {\n          latestEvent.timeEnd = timestamp;\n          continue;\n        }\n\n        // Event exists but new one is outside of the `step` so we add it to eventList.\n        if (latestEvent) {\n          eventList.push(latestEvent);\n        }\n\n        // We start a new region.\n        latestEvent = {\n          time: timestamp,\n          timeEnd: timestamp,\n          annotation,\n          title: renderLegendFormat(titleFormat, labels),\n          tags,\n          text: renderLegendFormat(textFormat, labels),\n        };\n      }\n\n      if (latestEvent) {\n        // Finish up last point if we have one\n        latestEvent.timeEnd = activeValuesTimestamps[activeValuesTimestamps.length - 1];\n        eventList.push(latestEvent);\n      }\n    }\n\n    return eventList;\n  };\n\n  getExemplars(query: PromQueryRequest) {\n    const url = '/api/v1/query_exemplars';\n    return this._request<PromDataSuccessResponse<PromExemplarData>>(\n      url,\n      { query: query.expr, start: query.start.toString(), end: query.end.toString() },\n      { requestId: query.requestId, headers: query.headers }\n    );\n  }\n\n  // By implementing getTagKeys and getTagValues we add ad-hoc filters functionality\n  // this is used to get label keys, a.k.a label names\n  // it is used in metric_find_query.ts\n  // and in Tempo here grafana/public/app/plugins/datasource/tempo/QueryEditor/ServiceGraphSection.tsx\n  async getTagKeys(options?: any) {\n    if (options?.series) {\n      // Get tags for the provided series only\n      const seriesLabels: Array<Record<string, string[]>> = await Promise.all(\n        options.series.map((series: string) => this.languageProvider.fetchSeriesLabels(series))\n      );\n      // Combines tags from all options.series provided\n      let tags: string[] = [];\n      seriesLabels.map((value) => (tags = tags.concat(Object.keys(value))));\n      const uniqueLabels = [...new Set(tags)];\n      return uniqueLabels.map((value: any) => ({ text: value }));\n    } else {\n      // Get all tags\n      const params = this.getTimeRangeParams();\n      const result = await this.metadataRequest('/api/v1/labels', params);\n      return result?.data?.data?.map((value: any) => ({ text: value })) ?? [];\n    }\n  }\n\n  // By implementing getTagKeys and getTagValues we add ad-hoc filters functionality\n  async getTagValues(options: { key?: string } = {}) {\n    const params = this.getTimeRangeParams();\n    const result = await this.metadataRequest(`/api/v1/label/${options.key}/values`, params);\n    return result?.data?.data?.map((value: any) => ({ text: value })) ?? [];\n  }\n\n  async getBuildInfo() {\n    try {\n      const buildInfo = await discoverDataSourceFeatures({ url: this.url, name: this.name, type: 'prometheus' });\n      return buildInfo;\n    } catch (error) {\n      // We don't want to break the rest of functionality if build info does not work correctly\n      return undefined;\n    }\n  }\n\n  getBuildInfoMessage(buildInfo: PromApiFeatures) {\n    const enabled = <Badge color=\"green\" icon=\"check\" text=\"Ruler API enabled\" />;\n    const disabled = <Badge color=\"orange\" icon=\"exclamation-triangle\" text=\"Ruler API not enabled\" />;\n    const unsupported = (\n      <Tooltip\n        placement=\"top\"\n        content=\"Prometheus does not allow editing rules, connect to either a Mimir or Cortex datasource to manage alerts via Grafana.\"\n      >\n        <div>\n          <Badge color=\"red\" icon=\"exclamation-triangle\" text=\"Ruler API not supported\" />\n        </div>\n      </Tooltip>\n    );\n\n    const LOGOS = {\n      [PromApplication.Cortex]: '/public/app/plugins/datasource/prometheus/img/cortex_logo.svg',\n      [PromApplication.Mimir]: '/public/app/plugins/datasource/prometheus/img/mimir_logo.svg',\n      [PromApplication.Prometheus]: '/public/app/plugins/datasource/prometheus/img/prometheus_logo.svg',\n      [PromApplication.Thanos]: '/public/app/plugins/datasource/prometheus/img/thanos_logo.svg',\n    };\n\n    const COLORS: Record<PromApplication, BadgeColor> = {\n      [PromApplication.Cortex]: 'blue',\n      [PromApplication.Mimir]: 'orange',\n      [PromApplication.Prometheus]: 'red',\n      [PromApplication.Thanos]: 'purple', // Purple hex taken from thanos.io\n    };\n\n    const AppDisplayNames: Record<PromApplication, string> = {\n      [PromApplication.Cortex]: 'Cortex',\n      [PromApplication.Mimir]: 'Mimir',\n      [PromApplication.Prometheus]: 'Prometheus',\n      [PromApplication.Thanos]: 'Thanos',\n    };\n\n    const application = this.datasourceConfigurationPrometheusFlavor ?? buildInfo.application;\n\n    // this will inform the user about what \"subtype\" the datasource is; Mimir, Cortex or vanilla Prometheus\n    const applicationSubType = (\n      <Badge\n        text={\n          <span>\n            <img\n              style={{ width: 14, height: 14, verticalAlign: 'text-bottom' }}\n              src={LOGOS[application ?? PromApplication.Prometheus]}\n              alt=\"\"\n            />{' '}\n            {application ? AppDisplayNames[application] : 'Unknown'}\n          </span>\n        }\n        color={COLORS[application ?? PromApplication.Prometheus]}\n      />\n    );\n\n    return (\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content max-content',\n          rowGap: '0.5rem',\n          columnGap: '2rem',\n          marginTop: '1rem',\n        }}\n      >\n        <div>Type</div>\n        <div>{applicationSubType}</div>\n        <>\n          <div>Ruler API</div>\n          {/* Prometheus does not have a Ruler API – so show that it is not supported */}\n          {buildInfo.application === PromApplication.Prometheus && <div>{unsupported}</div>}\n          {buildInfo.application !== PromApplication.Prometheus && (\n            <div>{buildInfo.features.rulerApiEnabled ? enabled : disabled}</div>\n          )}\n        </>\n      </div>\n    );\n  }\n\n  interpolateVariablesInQueries(queries: PromQuery[], scopedVars: ScopedVars): PromQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.getRef(),\n          expr: this.enhanceExprWithAdHocFilters(\n            this.templateSrv.replace(query.expr, scopedVars, this.interpolateQueryExpr)\n          ),\n          interval: this.templateSrv.replace(query.interval, scopedVars),\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  getQueryHints(query: PromQuery, result: any[]) {\n    return getQueryHints(query.expr ?? '', result, this);\n  }\n\n  getInitHints() {\n    return getInitHints(this);\n  }\n\n  async loadRules() {\n    try {\n      const res = await this.metadataRequest('/api/v1/rules', {}, { showErrorAlert: false });\n      const groups = res.data?.data?.groups;\n\n      if (groups) {\n        this.ruleMappings = extractRuleMappingFromGroups(groups);\n      }\n    } catch (e) {\n      console.log('Rules API is experimental. Ignore next error.');\n      console.error(e);\n    }\n  }\n\n  async areExemplarsAvailable() {\n    try {\n      const res = await this.metadataRequest(\n        '/api/v1/query_exemplars',\n        {\n          query: 'test',\n          start: dateTime().subtract(30, 'minutes').valueOf().toString(),\n          end: dateTime().valueOf().toString(),\n        },\n        {\n          // Avoid alerting the user if this test fails\n          showErrorAlert: false,\n        }\n      );\n      if (res.data.status === 'success') {\n        return true;\n      }\n      return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  modifyQuery(query: PromQuery, action: QueryFixAction): PromQuery {\n    let expression = query.expr ?? '';\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        const { key, value } = action.options ?? {};\n        if (key && value) {\n          expression = addLabelToQuery(expression, key, value);\n        }\n\n        break;\n      }\n      case 'ADD_FILTER_OUT': {\n        const { key, value } = action.options ?? {};\n        if (key && value) {\n          expression = addLabelToQuery(expression, key, value, '!=');\n        }\n        break;\n      }\n      case 'ADD_HISTOGRAM_QUANTILE': {\n        expression = `histogram_quantile(0.95, sum(rate(${expression}[$__rate_interval])) by (le))`;\n        break;\n      }\n      case 'ADD_RATE': {\n        expression = `rate(${expression}[$__rate_interval])`;\n        break;\n      }\n      case 'ADD_SUM': {\n        expression = `sum(${expression.trim()}) by ($1)`;\n        break;\n      }\n      case 'EXPAND_RULES': {\n        if (action.options) {\n          expression = expandRecordingRules(expression, action.options);\n        }\n        break;\n      }\n      default:\n        break;\n    }\n    return { ...query, expr: expression };\n  }\n\n  /**\n   * Returns the adjusted \"snapped\" interval parameters\n   */\n  getAdjustedInterval(): { start: string; end: string } {\n    if (!config.featureToggles.prometheusResourceBrowserCache) {\n      return this.getTimeRangeParams();\n    }\n    const range = this.timeSrv.timeRange();\n    return getRangeSnapInterval(this.cacheLevel, range);\n  }\n\n  /**\n   * This will return a time range that always includes the users current time range,\n   * and then a little extra padding to round up/down to the nearest nth minute,\n   * defined by the result of the getCacheDurationInMinutes.\n   *\n   * For longer cache durations, and shorter query durations, the window we're calculating might be much bigger then the user's current window,\n   * resulting in us returning labels/values that might not be applicable for the given window, this is a necessary trade off if we want to cache larger durations\n   *\n   */\n\n  getTimeRangeParams(): { start: string; end: string } {\n    const range = this.timeSrv.timeRange();\n    return {\n      start: getPrometheusTime(range.from, false).toString(),\n      end: getPrometheusTime(range.to, true).toString(),\n    };\n  }\n\n  getOriginalMetricName(labelData: { [key: string]: string }) {\n    return getOriginalMetricName(labelData);\n  }\n\n  enhanceExprWithAdHocFilters(expr: string) {\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n\n    const finalQuery = adhocFilters.reduce((acc: string, filter: { key?: any; operator?: any; value?: any }) => {\n      const { key, operator } = filter;\n      let { value } = filter;\n      if (operator === '=~' || operator === '!~') {\n        value = prometheusRegularEscape(value);\n      }\n      return addLabelToQuery(acc, key, value, operator);\n    }, expr);\n    return finalQuery;\n  }\n\n  // Used when running queries trough backend\n  filterQuery(query: PromQuery): boolean {\n    if (query.hide || !query.expr) {\n      return false;\n    }\n    return true;\n  }\n\n  // Used when running queries trough backend\n  applyTemplateVariables(target: PromQuery, scopedVars: ScopedVars): Record<string, any> {\n    const variables = cloneDeep(scopedVars);\n\n    // We want to interpolate these variables on backend\n    delete variables.__interval;\n    delete variables.__interval_ms;\n\n    //Add ad hoc filters\n    const expr = this.enhanceExprWithAdHocFilters(target.expr);\n\n    return {\n      ...target,\n      legendFormat: this.templateSrv.replace(target.legendFormat, variables),\n      expr: this.templateSrv.replace(expr, variables, this.interpolateQueryExpr),\n      interval: this.templateSrv.replace(target.interval, variables),\n    };\n  }\n\n  getVariables(): string[] {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  interpolateString(string: string) {\n    return this.templateSrv.replace(string, undefined, this.interpolateQueryExpr);\n  }\n\n  getDebounceTimeInMilliseconds(): number {\n    switch (this.cacheLevel) {\n      case PrometheusCacheLevel.Medium:\n        return 600;\n      case PrometheusCacheLevel.High:\n        return 1200;\n      default:\n        return 350;\n    }\n  }\n\n  getDaysToCacheMetadata(): number {\n    switch (this.cacheLevel) {\n      case PrometheusCacheLevel.Medium:\n        return 7;\n      case PrometheusCacheLevel.High:\n        return 30;\n      default:\n        return 1;\n    }\n  }\n\n  getCacheDurationInMinutes(): number {\n    return getClientCacheDurationInMinutes(this.cacheLevel);\n  }\n\n  getDefaultQuery(app: CoreApp): PromQuery {\n    const defaults = {\n      refId: 'A',\n      expr: '',\n      range: true,\n      instant: false,\n    };\n\n    if (app === CoreApp.UnifiedAlerting) {\n      return {\n        ...defaults,\n        instant: true,\n        range: false,\n      };\n    }\n\n    if (app === CoreApp.Explore) {\n      return {\n        ...defaults,\n        instant: true,\n        range: true,\n      };\n    }\n\n    return defaults;\n  }\n}\n\n/**\n * Align query range to step.\n * Rounds start and end down to a multiple of step.\n * @param start Timestamp marking the beginning of the range.\n * @param end Timestamp marking the end of the range.\n * @param step Interval to align start and end with.\n * @param utcOffsetSec Number of seconds current timezone is offset from UTC\n */\nexport function alignRange(\n  start: number,\n  end: number,\n  step: number,\n  utcOffsetSec: number\n): { end: number; start: number } {\n  const alignedEnd = Math.floor((end + utcOffsetSec) / step) * step - utcOffsetSec;\n  const alignedStart = Math.floor((start + utcOffsetSec) / step) * step - utcOffsetSec;\n  return {\n    end: alignedEnd,\n    start: alignedStart,\n  };\n}\n\nexport function extractRuleMappingFromGroups(groups: any[]) {\n  return groups.reduce(\n    (mapping, group) =>\n      group.rules\n        .filter((rule: any) => rule.type === 'recording')\n        .reduce(\n          (acc: { [key: string]: string }, rule: any) => ({\n            ...acc,\n            [rule.name]: rule.query,\n          }),\n          mapping\n        ),\n    {}\n  );\n}\n\n// NOTE: these two functions are very similar to the escapeLabelValueIn* functions\n// in language_utils.ts, but they are not exactly the same algorithm, and we found\n// no way to reuse one in the another or vice versa.\nexport function prometheusRegularEscape(value: any) {\n  return typeof value === 'string' ? value.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\\\\\'\") : value;\n}\n\nexport function prometheusSpecialRegexEscape(value: any) {\n  return typeof value === 'string' ? value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]\\'+?.()|]/g, '\\\\\\\\$&') : value;\n}\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\n\nimport promqlGrammar from '../../promql';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { OperationExplainedBox } from '../shared/OperationExplainedBox';\nimport { OperationListExplained } from '../shared/OperationListExplained';\nimport { RawQuery } from '../shared/RawQuery';\nimport { PromVisualQuery } from '../types';\n\nexport const EXPLAIN_LABEL_FILTER_CONTENT = 'Fetch all series matching metric name and label filters.';\n\nexport interface Props {\n  query: string;\n}\n\nexport const PromQueryBuilderExplained = React.memo<Props>(({ query }) => {\n  const visQuery = buildVisualQueryFromString(query || '').query;\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  return (\n    <Stack gap={0.5} direction=\"column\">\n      <OperationExplainedBox\n        stepNumber={1}\n        title={<RawQuery query={`${visQuery.metric} ${promQueryModeller.renderLabels(visQuery.labels)}`} lang={lang} />}\n      >\n        {EXPLAIN_LABEL_FILTER_CONTENT}\n      </OperationExplainedBox>\n      <OperationListExplained<PromVisualQuery>\n        stepNumber={2}\n        queryModeller={promQueryModeller}\n        query={visQuery}\n        lang={lang}\n      />\n    </Stack>\n  );\n});\n\nPromQueryBuilderExplained.displayName = 'PromQueryBuilderExplained';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport PromQueryField from '../../components/PromQueryField';\nimport { PromQueryEditorProps } from '../../components/types';\n\nimport { PromQueryBuilderExplained } from './PromQueryBuilderExplained';\n\ntype Props = PromQueryEditorProps & {\n  showExplain: boolean;\n};\n\nexport function PromQueryCodeEditor(props: Props) {\n  const { query, datasource, range, onRunQuery, onChange, data, app, showExplain } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <PromQueryField\n        datasource={datasource}\n        query={query}\n        range={range}\n        onRunQuery={onRunQuery}\n        onChange={onChange}\n        history={[]}\n        data={data}\n        app={app}\n      />\n\n      {showExplain && <PromQueryBuilderExplained query={query.expr} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    // This wrapper styling can be removed after the old PromQueryEditor is removed.\n    // This is removing margin bottom on the old legacy inline form styles\n    wrapper: css`\n      .gf-form {\n        margin-bottom: 0;\n      }\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, renderMarkdown } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  title?: React.ReactNode;\n  children?: React.ReactNode;\n  markdown?: string;\n  stepNumber?: number;\n}\n\nexport function OperationExplainedBox({ title, stepNumber, markdown, children }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.box}>\n      {stepNumber !== undefined && <div className={styles.stepNumber}>{stepNumber}</div>}\n      <div className={styles.boxInner}>\n        {title && (\n          <div className={styles.header}>\n            <span>{title}</span>\n          </div>\n        )}\n        <div className={styles.body}>\n          {markdown && <div dangerouslySetInnerHTML={{ __html: renderMarkdown(markdown) }}></div>}\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    box: css({\n      background: theme.colors.background.secondary,\n      padding: theme.spacing(1),\n      borderRadius: theme.shape.borderRadius(),\n      position: 'relative',\n    }),\n    boxInner: css({\n      marginLeft: theme.spacing(4),\n    }),\n    stepNumber: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      background: theme.colors.secondary.main,\n      width: '20px',\n      height: '20px',\n      borderRadius: '50%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'absolute',\n      top: '10px',\n      left: '11px',\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n    header: css({\n      paddingBottom: theme.spacing(0.5),\n      display: 'flex',\n      alignItems: 'center',\n      fontFamily: theme.typography.fontFamilyMonospace,\n    }),\n    body: css({\n      color: theme.colors.text.secondary,\n      'p:last-child': {\n        margin: 0,\n      },\n      a: {\n        color: theme.colors.text.link,\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import { Grammar } from 'prismjs';\nimport React from 'react';\n\nimport { OperationExplainedBox } from './OperationExplainedBox';\nimport { RawQuery } from './RawQuery';\nimport { QueryBuilderOperation, QueryWithOperations, VisualQueryModeller } from './types';\n\nexport interface Props<T extends QueryWithOperations> {\n  query: T;\n  queryModeller: VisualQueryModeller;\n  explainMode?: boolean;\n  stepNumber: number;\n  lang: {\n    grammar: Grammar;\n    name: string;\n  };\n  onMouseEnter?: (op: QueryBuilderOperation, index: number) => void;\n  onMouseLeave?: (op: QueryBuilderOperation, index: number) => void;\n}\n\nexport function OperationListExplained<T extends QueryWithOperations>({\n  query,\n  queryModeller,\n  stepNumber,\n  lang,\n  onMouseEnter,\n  onMouseLeave,\n}: Props<T>) {\n  return (\n    <>\n      {query.operations.map((op, index) => {\n        const def = queryModeller.getOperationDef(op.id);\n        if (!def) {\n          return `Operation ${op.id} not found`;\n        }\n        const title = def.renderer(op, def, '<expr>');\n        const body = def.explainHandler ? def.explainHandler(op, def) : def.documentation ?? 'no docs';\n\n        return (\n          <div\n            key={index}\n            onMouseEnter={() => onMouseEnter?.(op, index)}\n            onMouseLeave={() => onMouseLeave?.(op, index)}\n          >\n            <OperationExplainedBox\n              stepNumber={index + stepNumber}\n              title={<RawQuery query={title} lang={lang} />}\n              markdown={body}\n            />\n          </div>\n        );\n      })}\n    </>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport Prism, { Grammar } from 'prismjs';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { useTheme2 } from '@grafana/ui/src';\n\nexport interface Props {\n  query: string;\n  lang: {\n    grammar: Grammar;\n    name: string;\n  };\n  className?: string;\n}\nexport function RawQuery({ query, lang, className }: Props) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const highlighted = Prism.highlight(query, lang.grammar, lang.name);\n\n  return (\n    <div\n      className={cx(styles.editorField, 'prism-syntax-highlight', className)}\n      aria-label=\"selector\"\n      dangerouslySetInnerHTML={{ __html: highlighted }}\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    editorField: css({\n      fontFamily: theme.typography.fontFamilyMonospace,\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n  };\n};\n","import { closestIdx } from \"./StreamingDataFrame\";\n\nexport type Table = [times: number[], ...values: any[][]];\n\n// prevTable and nextTable are assumed sorted ASC on reference [0] arrays\n// nextTable is assumed to be contiguous, only edges are checked for overlap\n// ...so prev: [1,2,5] + next: [3,4,6] -> [1,2,3,4,6]\nexport function amendTable(prevTable: Table, nextTable: Table): Table {\n  let [prevTimes] = prevTable;\n  let [nextTimes] = nextTable;\n\n  let pLen = prevTimes.length;\n  let pStart = prevTimes[0];\n  let pEnd = prevTimes[pLen - 1];\n\n  let nLen = nextTimes.length;\n  let nStart = nextTimes[0];\n  let nEnd = nextTimes[nLen - 1];\n\n  let outTable: Table;\n\n  if (pLen) {\n    if (nLen) {\n      // append, no overlap\n      if (nStart > pEnd) {\n        outTable = prevTable.map((_, i) => prevTable[i].concat(nextTable[i])) as Table;\n      }\n      // prepend, no overlap\n      else if (nEnd < pStart) {\n        outTable = nextTable.map((_, i) => nextTable[i].concat(prevTable[i])) as Table;\n      }\n      // full replace\n      else if (nStart <= pStart && nEnd >= pEnd) {\n        outTable = nextTable;\n      }\n      // partial replace\n      else if (nStart > pStart && nEnd < pEnd) {\n      }\n      // append, with overlap\n      else if (nStart >= pStart) {\n        let idx = closestIdx(nStart, prevTimes);\n        idx = prevTimes[idx] < nStart ? idx - 1 : idx;\n        outTable = prevTable.map((_, i) => prevTable[i].slice(0, idx).concat(nextTable[i])) as Table;\n      }\n      // prepend, with overlap\n      else if (nEnd >= pStart) {\n        let idx = closestIdx(nEnd, prevTimes);\n        idx = prevTimes[idx] < nEnd ? idx : idx + 1;\n        outTable = nextTable.map((_, i) => nextTable[i].concat(prevTable[i].slice(idx))) as Table;\n      }\n    } else {\n      outTable = prevTable;\n    }\n  } else {\n    if (nLen) {\n      outTable = nextTable;\n    } else {\n      outTable = [[]];\n    }\n  }\n\n  return outTable!;\n}\n\nexport function trimTable(table: Table, fromTime: number, toTime: number): Table {\n  let [times, ...vals] = table;\n  let fromIdx: number | undefined;\n  let toIdx: number | undefined;\n\n  // trim to bounds\n  if (times[0] < fromTime) {\n    fromIdx = closestIdx(fromTime, times);\n\n    if (times[fromIdx] < fromTime) {\n      fromIdx++;\n    }\n  }\n\n  if (times[times.length - 1] > toTime) {\n    toIdx = closestIdx(toTime, times);\n\n    if (times[toIdx] > toTime) {\n      toIdx--;\n    }\n  }\n\n  if (fromIdx != null || toIdx != null) {\n    times = times.slice(fromIdx ?? 0, toIdx);\n    vals = vals.map(vals2 => vals2.slice(fromIdx ?? 0, toIdx));\n  }\n\n  return [times, ...vals];\n}\n","import {\n  DataFrame,\n  DataQueryRequest,\n  dateTime,\n  durationToMilliseconds,\n  Field,\n  isValidDuration,\n  parseDuration,\n} from '@grafana/data/src';\nimport { faro } from '@grafana/faro-web-sdk';\nimport { config } from '@grafana/runtime/src';\nimport { amendTable, Table, trimTable } from 'app/features/live/data/amendTimeSeries';\n\nimport { PromQuery } from '../types';\n\n// dashboardUID + panelId + refId\n// (must be stable across query changes, time range changes / interval changes / panel resizes / template variable changes)\ntype TargetIdent = string;\n\n// query + template variables + interval + raw time range\n// used for full target cache busting -> full range re-query\ntype TargetSig = string;\n\ntype TimestampMs = number;\n\n// Look like Q001, Q002, etc\ntype RequestID = string;\n\ntype StringInterpolator = (expr: string) => string;\n\n// string matching requirements defined in durationutil.ts\nexport const defaultPrometheusQueryOverlapWindow = '10m';\n\ninterface TargetCache {\n  sig: TargetSig;\n  prevTo: TimestampMs;\n  frames: DataFrame[];\n}\n\nexport interface CacheRequestInfo {\n  requests: Array<DataQueryRequest<PromQuery>>;\n  targSigs: Map<TargetIdent, TargetSig>;\n  shouldCache: boolean;\n}\n\n/**\n * Get field identity\n * This is the string used to uniquely identify a field within a \"target\"\n * @param field\n */\nexport const getFieldIdent = (field: Field) => `${field.type}|${field.name}|${JSON.stringify(field.labels ?? '')}`;\n\n/**\n * Get target signature\n * @param targExpr\n * @param request\n * @param targ\n */\nexport function getTargSig(targExpr: string, request: DataQueryRequest<PromQuery>, targ: PromQuery) {\n  return `${targExpr}|${targ.interval ?? request.interval}|${JSON.stringify(request.rangeRaw ?? '')}|${targ.exemplar}`;\n}\n\n/**\n * NOMENCLATURE\n * Target: The request target (DataQueryRequest), i.e. a specific query reference within a panel\n * Ident: Identity: the string that is not expected to change\n * Sig: Signature: the string that is expected to change, upon which we wipe the cache fields\n */\nexport class QueryCache {\n  private overlapWindowMs: number;\n  private perfObeserver?: PerformanceObserver;\n  private shouldProfile: boolean;\n\n  // send profile events every 5 minutes\n  sendEventsInterval = 60000 * 5;\n\n  pendingRequestIdsToTargSigs = new Map<\n    RequestID,\n    {\n      identity: string;\n      bytes: number | null;\n      dashboardUID?: string;\n      interval?: string;\n      panelId?: number;\n      expr?: string;\n    }\n  >();\n\n  pendingAccumulatedEvents = new Map<\n    string,\n    {\n      requestCount: number;\n      savedBytesTotal: number;\n      initialRequestSize: number;\n      lastRequestSize: number;\n      panelId: string;\n      dashId: string;\n      expr: string;\n      interval: string;\n      sent: boolean;\n    }\n  >();\n\n  cache = new Map<TargetIdent, TargetCache>();\n\n  constructor(overlapString?: string) {\n    const unverifiedOverlap = overlapString ?? defaultPrometheusQueryOverlapWindow;\n\n    if (isValidDuration(unverifiedOverlap)) {\n      const duration = parseDuration(unverifiedOverlap);\n      this.overlapWindowMs = durationToMilliseconds(duration);\n    } else {\n      const duration = parseDuration(defaultPrometheusQueryOverlapWindow);\n      this.overlapWindowMs = durationToMilliseconds(duration);\n    }\n\n    if (config.grafanaJavascriptAgent.enabled) {\n      this.profile();\n      this.shouldProfile = true;\n    } else {\n      this.shouldProfile = false;\n    }\n  }\n\n  private profile() {\n    // Check if PerformanceObserver is supported, and if we have Faro enabled for internal profiling\n    if (typeof PerformanceObserver === 'function') {\n      this.perfObeserver = new PerformanceObserver((list: PerformanceObserverEntryList) => {\n        list.getEntries().forEach((entry) => {\n          // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n          const entryTypeCast: PerformanceResourceTiming = entry as PerformanceResourceTiming;\n\n          // Safari support for this is coming in 16.4:\n          // https://caniuse.com/mdn-api_performanceresourcetiming_transfersize\n          // Gating that this exists to prevent runtime errors\n          const isSupported = typeof entryTypeCast?.transferSize === 'number';\n\n          if (entryTypeCast?.initiatorType === 'fetch' && isSupported) {\n            let fetchUrl = entryTypeCast.name;\n\n            if (fetchUrl.includes('/api/ds/query')) {\n              let match = fetchUrl.match(/requestId=([a-z\\d]+)/i);\n\n              if (match) {\n                let requestId = match[1];\n\n                const requestTransferSize = Math.round(entryTypeCast.transferSize);\n                const currentRequest = this.pendingRequestIdsToTargSigs.get(requestId);\n\n                if (currentRequest) {\n                  const entries = this.pendingRequestIdsToTargSigs.entries();\n\n                  for (let [, value] of entries) {\n                    if (value.identity === currentRequest.identity && value.bytes !== null) {\n                      const previous = this.pendingAccumulatedEvents.get(value.identity);\n\n                      const savedBytes = value.bytes - requestTransferSize;\n\n                      this.pendingAccumulatedEvents.set(value.identity, {\n                        requestCount: (previous?.requestCount ?? 0) + 1,\n                        savedBytesTotal: (previous?.savedBytesTotal ?? 0) + savedBytes,\n                        initialRequestSize: value.bytes,\n                        lastRequestSize: requestTransferSize,\n                        panelId: currentRequest.panelId?.toString() ?? '',\n                        dashId: currentRequest.dashboardUID ?? '',\n                        expr: currentRequest.expr ?? '',\n                        interval: currentRequest.interval ?? '',\n                        sent: false,\n                      });\n\n                      // We don't need to save each subsequent request, only the first one\n                      this.pendingRequestIdsToTargSigs.delete(requestId);\n\n                      return;\n                    }\n                  }\n\n                  // If we didn't return above, this should be the first request, let's save the observed size\n                  this.pendingRequestIdsToTargSigs.set(requestId, { ...currentRequest, bytes: requestTransferSize });\n                }\n              }\n            }\n          }\n        });\n      });\n\n      this.perfObeserver.observe({ type: 'resource', buffered: false });\n\n      setInterval(this.sendPendingTrackingEvents, this.sendEventsInterval);\n\n      // Send any pending profile information when the user navigates away\n      window.addEventListener('beforeunload', this.sendPendingTrackingEvents);\n    }\n  }\n\n  sendPendingTrackingEvents = () => {\n    const entries = this.pendingAccumulatedEvents.entries();\n\n    for (let [key, value] of entries) {\n      if (!value.sent) {\n        this.pendingAccumulatedEvents.set(key, { ...value, sent: true });\n        faro.api.pushMeasurement({\n          type: 'custom',\n          values: {\n            thing: 0,\n            thing2: 1,\n          },\n        });\n        faro.api.pushEvent(\n          'prometheus incremental query response size',\n          {\n            requestCount: value.requestCount.toString(),\n            savedBytesTotal: value.savedBytesTotal.toString(),\n            initialRequestSize: value.initialRequestSize.toString(),\n            lastRequestSize: value.lastRequestSize.toString(),\n            panelId: value.panelId.toString(),\n            dashId: value.dashId.toString(),\n            expr: value.expr.toString(),\n            interval: value.interval.toString(),\n          },\n          'no-interaction',\n          {\n            skipDedupe: true,\n          }\n        );\n      }\n    }\n  };\n\n  // can be used to change full range request to partial, split into multiple requests\n  requestInfo(request: DataQueryRequest<PromQuery>, interpolateString: StringInterpolator): CacheRequestInfo {\n    // TODO: align from/to to interval to increase probability of hitting backend cache\n    const newFrom = request.range.from.valueOf();\n    const newTo = request.range.to.valueOf();\n\n    // only cache 'now'-relative queries (that can benefit from a backfill cache)\n    const shouldCache = request.rangeRaw?.to?.toString() === 'now' && !request.targets.some((targ) => targ.instant);\n\n    // all targets are queried together, so we check for any that causes group cache invalidation & full re-query\n    let doPartialQuery = shouldCache;\n    let prevTo: TimestampMs;\n\n    // pre-compute reqTargSigs\n    const reqTargSigs = new Map<TargetIdent, TargetSig>();\n    request.targets.forEach((targ) => {\n      let targIdent = `${request.dashboardUID}|${request.panelId}|${targ.refId}`;\n      let targExpr = interpolateString(targ.expr);\n      let targSig = getTargSig(targExpr, request, targ); // ${request.maxDataPoints} ?\n\n      if (this.shouldProfile) {\n        this.pendingRequestIdsToTargSigs.set(request.requestId, {\n          identity: targIdent + '|' + targSig,\n          dashboardUID: request.dashboardUID ?? '',\n          interval: targ.interval ?? request.interval,\n          panelId: request.panelId,\n          expr: targExpr,\n          bytes: null,\n        });\n      }\n\n      reqTargSigs.set(targIdent, targSig);\n    });\n\n    // figure out if new query range or new target props trigger full cache invalidation & re-query\n    for (const [targIdent, targSig] of reqTargSigs) {\n      let cached = this.cache.get(targIdent);\n      let cachedSig = cached?.sig;\n\n      if (cachedSig !== targSig) {\n        doPartialQuery = false;\n      } else {\n        // only do partial queries when new request range follows prior request range (possibly with overlap)\n        // e.g. now-6h with refresh <= 6h\n        prevTo = cached?.prevTo ?? Infinity;\n        doPartialQuery = newTo > prevTo && newFrom <= prevTo;\n      }\n\n      if (!doPartialQuery) {\n        break;\n      }\n    }\n\n    if (doPartialQuery) {\n      // 10m re-query overlap\n\n      // clamp to make sure we don't re-query previous 10m when newFrom is ahead of it (e.g. 5min range, 30s refresh)\n      let newFromPartial = Math.max(prevTo! - this.overlapWindowMs, newFrom);\n\n      // modify to partial query\n      request = {\n        ...request,\n        range: {\n          ...request.range,\n          from: dateTime(newFromPartial),\n          to: dateTime(newTo),\n        },\n      };\n    } else {\n      reqTargSigs.forEach((targSig, targIdent) => {\n        this.cache.delete(targIdent);\n      });\n    }\n\n    return {\n      requests: [request],\n      targSigs: reqTargSigs,\n      shouldCache,\n    };\n  }\n\n  // should amend existing cache with new frames and return full response\n  procFrames(\n    request: DataQueryRequest<PromQuery>,\n    requestInfo: CacheRequestInfo | undefined,\n    respFrames: DataFrame[]\n  ): DataFrame[] {\n    if (requestInfo?.shouldCache) {\n      const newFrom = request.range.from.valueOf();\n      const newTo = request.range.to.valueOf();\n\n      // group frames by targets\n      const respByTarget = new Map<TargetIdent, DataFrame[]>();\n\n      respFrames.forEach((frame: DataFrame) => {\n        let targIdent = `${request.dashboardUID}|${request.panelId}|${frame.refId}`;\n\n        let frames = respByTarget.get(targIdent);\n\n        if (!frames) {\n          frames = [];\n          respByTarget.set(targIdent, frames);\n        }\n\n        frames.push(frame);\n      });\n\n      let outFrames: DataFrame[] = [];\n\n      respByTarget.forEach((respFrames, targIdent) => {\n        let cachedFrames = (targIdent ? this.cache.get(targIdent)?.frames : null) ?? [];\n\n        respFrames.forEach((respFrame: DataFrame) => {\n          // skip empty frames\n          if (respFrame.length === 0 || respFrame.fields.length === 0) {\n            return;\n          }\n\n          // frames are identified by their second (non-time) field's name + labels\n          // TODO: maybe also frame.meta.type?\n          let respFrameIdent = getFieldIdent(respFrame.fields[1]);\n\n          let cachedFrame = cachedFrames.find((cached) => getFieldIdent(cached.fields[1]) === respFrameIdent);\n\n          if (!cachedFrame) {\n            // append new unknown frames\n            cachedFrames.push(respFrame);\n          } else {\n            // we assume that fields cannot appear/disappear and will all exist in same order\n\n            // amend & re-cache\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            let prevTable: Table = cachedFrame.fields.map((field) => field.values) as Table;\n            // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n            let nextTable: Table = respFrame.fields.map((field) => field.values) as Table;\n\n            let amendedTable = amendTable(prevTable, nextTable);\n            if (amendedTable) {\n              for (let i = 0; i < amendedTable.length; i++) {\n                cachedFrame.fields[i].values = amendedTable[i];\n              }\n              cachedFrame.length = cachedFrame.fields[0].values.length;\n            }\n          }\n        });\n\n        // trim all frames to in-view range, evict those that end up with 0 length\n        let nonEmptyCachedFrames: DataFrame[] = [];\n\n        cachedFrames.forEach((frame) => {\n          // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n          let table: Table = frame.fields.map((field) => field.values) as Table;\n\n          let trimmed = trimTable(table, newFrom, newTo);\n\n          if (trimmed[0].length > 0) {\n            for (let i = 0; i < trimmed.length; i++) {\n              frame.fields[i].values = trimmed[i];\n            }\n            nonEmptyCachedFrames.push(frame);\n          }\n        });\n\n        this.cache.set(targIdent, {\n          sig: requestInfo.targSigs.get(targIdent)!,\n          frames: nonEmptyCachedFrames,\n          prevTo: newTo,\n        });\n\n        outFrames.push(...nonEmptyCachedFrames);\n      });\n\n      // transformV2 mutates field values for heatmap de-accum, and modifies field order, so we gotta clone here, for now :(\n      respFrames = outFrames.map((frame) => ({\n        ...frame,\n        fields: frame.fields.map((field) => ({\n          ...field,\n          config: {\n            ...field.config, // prevents mutatative exemplars links (re)enrichment\n          },\n          values: field.values.slice(),\n        })),\n      }));\n    }\n\n    return respFrames;\n  }\n}\n","import { descending, deviation } from 'd3';\nimport { flatten, forOwn, groupBy, partition } from 'lodash';\n\nimport {\n  ArrayDataFrame,\n  CoreApp,\n  DataFrame,\n  DataFrameType,\n  DataLink,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataTopic,\n  Field,\n  FieldType,\n  formatLabels,\n  getDisplayProcessor,\n  Labels,\n  PreferredVisualisationType,\n  ScopedVars,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n} from '@grafana/data';\nimport { calculateFieldDisplayName } from '@grafana/data/src/field/fieldState';\nimport { config, FetchResponse, getDataSourceSrv, getTemplateSrv } from '@grafana/runtime';\n\nimport { renderLegendFormat } from './legend';\nimport {\n  ExemplarTraceIdDestination,\n  isExemplarData,\n  isMatrixData,\n  MatrixOrVectorResult,\n  PromDataSuccessResponse,\n  PromMetric,\n  PromQuery,\n  PromQueryRequest,\n  PromValue,\n  TransformOptions,\n} from './types';\n\n// handles case-insensitive Inf, +Inf, -Inf (with optional \"inity\" suffix)\nconst INFINITY_SAMPLE_REGEX = /^[+-]?inf(?:inity)?$/i;\n\ninterface TimeAndValue {\n  [TIME_SERIES_TIME_FIELD_NAME]: number;\n  [TIME_SERIES_VALUE_FIELD_NAME]: number;\n}\n\nconst isTableResult = (dataFrame: DataFrame, options: DataQueryRequest<PromQuery>): boolean => {\n  // We want to process vector and scalar results in Explore as table\n  if (\n    options.app === CoreApp.Explore &&\n    (dataFrame.meta?.custom?.resultType === 'vector' || dataFrame.meta?.custom?.resultType === 'scalar')\n  ) {\n    return true;\n  }\n\n  // We want to process all dataFrames with target.format === 'table' as table\n  const target = options.targets.find((target) => target.refId === dataFrame.refId);\n  return target?.format === 'table';\n};\n\nconst isHeatmapResult = (dataFrame: DataFrame, options: DataQueryRequest<PromQuery>): boolean => {\n  const target = options.targets.find((target) => target.refId === dataFrame.refId);\n  return target?.format === 'heatmap';\n};\n\n// V2 result transformer used to transform query results from queries that were run through prometheus backend\nexport function transformV2(\n  response: DataQueryResponse,\n  request: DataQueryRequest<PromQuery>,\n  options: { exemplarTraceIdDestinations?: ExemplarTraceIdDestination[] }\n) {\n  // migration for dataplane field name issue\n  if (config.featureToggles.prometheusDataplane) {\n    // update displayNameFromDS in the field config\n    response.data.forEach((f: DataFrame) => {\n      const target = request.targets.find((t) => t.refId === f.refId);\n      // check that the legend is selected as auto\n      if (target && target.legendFormat === '__auto') {\n        f.fields.forEach((field) => {\n          if (field.labels?.__name__ && field.labels?.__name__ === field.name) {\n            const fieldCopy = { ...field, name: TIME_SERIES_VALUE_FIELD_NAME };\n            field.config.displayNameFromDS = calculateFieldDisplayName(fieldCopy, f, response.data);\n          }\n        });\n      }\n    });\n  }\n\n  const [tableFrames, framesWithoutTable] = partition<DataFrame>(response.data, (df) => isTableResult(df, request));\n  const processedTableFrames = transformDFToTable(tableFrames);\n\n  const [exemplarFrames, framesWithoutTableAndExemplars] = partition<DataFrame>(\n    framesWithoutTable,\n    (df) => df.meta?.custom?.resultType === 'exemplar'\n  );\n\n  // EXEMPLAR FRAMES: We enrich exemplar frames with data links and add dataTopic meta info\n  const { exemplarTraceIdDestinations: destinations } = options;\n  const processedExemplarFrames = exemplarFrames.map((dataFrame) => {\n    if (destinations?.length) {\n      for (const exemplarTraceIdDestination of destinations) {\n        const traceIDField = dataFrame.fields.find((field) => field.name === exemplarTraceIdDestination.name);\n        if (traceIDField) {\n          const links = getDataLinks(exemplarTraceIdDestination);\n          traceIDField.config.links = traceIDField.config.links?.length\n            ? [...traceIDField.config.links, ...links]\n            : links;\n        }\n      }\n    }\n\n    return { ...dataFrame, meta: { ...dataFrame.meta, dataTopic: DataTopic.Annotations } };\n  });\n\n  const [heatmapResults, framesWithoutTableHeatmapsAndExemplars] = partition<DataFrame>(\n    framesWithoutTableAndExemplars,\n    (df) => isHeatmapResult(df, request)\n  );\n\n  // this works around the fact that we only get back frame.name with le buckets when legendFormat == {{le}}...which is not the default\n  heatmapResults.forEach((df) => {\n    if (df.name == null) {\n      let f = df.fields.find((f) => f.name === 'Value');\n\n      if (f) {\n        let le = f.labels?.le;\n\n        if (le) {\n          // this is used for sorting the frames by numeric ascending le labels for de-accum\n          df.name = le;\n          // this is used for renaming the Value fields to le label\n          f.config.displayNameFromDS = le;\n        }\n      }\n    }\n  });\n\n  // Group heatmaps by query\n  const heatmapResultsGroupedByQuery = groupBy<DataFrame>(heatmapResults, (h) => h.refId);\n\n  // Initialize empty array to push grouped histogram frames to\n  let processedHeatmapResultsGroupedByQuery: DataFrame[][] = [];\n\n  // Iterate through every query in this heatmap\n  for (const query in heatmapResultsGroupedByQuery) {\n    // Get reference to dataFrames for heatmap\n    const heatmapResultsGroup = heatmapResultsGroupedByQuery[query];\n\n    // Create a new grouping by iterating through the data frames...\n    const heatmapResultsGroupedByValues = groupBy<DataFrame>(heatmapResultsGroup, (dataFrame) => {\n      // Each data frame has `Time` and `Value` properties, we want to get the values\n      const values = dataFrame.fields.find((field) => field.name === TIME_SERIES_VALUE_FIELD_NAME);\n      // Specific functionality for special \"le\" quantile heatmap value, we know if this value exists, that we do not want to calculate the heatmap density across data frames from the same quartile\n      if (values?.labels && HISTOGRAM_QUANTILE_LABEL_NAME in values.labels) {\n        const { le, ...notLE } = values?.labels;\n        return Object.values(notLE).join();\n      }\n\n      // Return a string made from the concatenation of this frame's values to represent a grouping in the query\n      return Object.values(values?.labels ?? []).join();\n    });\n\n    // Then iterate through the resultant object\n    forOwn(heatmapResultsGroupedByValues, (dataFrames, key) => {\n      // Sort frames within each grouping\n      const sortedHeatmap = dataFrames.sort(sortSeriesByLabel);\n      // And push the sorted grouping with the rest\n      processedHeatmapResultsGroupedByQuery.push(mergeHeatmapFrames(transformToHistogramOverTime(sortedHeatmap)));\n    });\n  }\n\n  // Everything else is processed as time_series result and graph preferredVisualisationType\n  const otherFrames = framesWithoutTableHeatmapsAndExemplars.map((dataFrame) => {\n    const df: DataFrame = {\n      ...dataFrame,\n      meta: {\n        ...dataFrame.meta,\n        preferredVisualisationType: 'graph',\n      },\n    };\n    return df;\n  });\n\n  const flattenedProcessedHeatmapFrames = flatten(processedHeatmapResultsGroupedByQuery);\n\n  return {\n    ...response,\n    data: [...otherFrames, ...processedTableFrames, ...flattenedProcessedHeatmapFrames, ...processedExemplarFrames],\n  };\n}\n\nconst HISTOGRAM_QUANTILE_LABEL_NAME = 'le';\n\nexport function transformDFToTable(dfs: DataFrame[]): DataFrame[] {\n  // If no dataFrames or if 1 dataFrames with no values, return original dataFrame\n  if (dfs.length === 0 || (dfs.length === 1 && dfs[0].length === 0)) {\n    return dfs;\n  }\n\n  // Group results by refId and process dataFrames with the same refId as 1 dataFrame\n  const dataFramesByRefId = groupBy(dfs, 'refId');\n  const refIds = Object.keys(dataFramesByRefId);\n\n  const frames = refIds.map((refId) => {\n    // Create timeField, valueField and labelFields\n    const valueText = getValueText(refIds.length, refId);\n    const valueField = getValueField({ data: [], valueName: valueText });\n    const timeField = getTimeField([]);\n    const labelFields: Field[] = [];\n\n    // Fill labelsFields with labels from dataFrames\n    dataFramesByRefId[refId].forEach((df) => {\n      const frameValueField = df.fields[1];\n      const promLabels = frameValueField?.labels ?? {};\n\n      Object.keys(promLabels)\n        .sort()\n        .forEach((label) => {\n          // If we don't have label in labelFields, add it\n          if (!labelFields.some((l) => l.name === label)) {\n            const numberField = label === HISTOGRAM_QUANTILE_LABEL_NAME;\n            labelFields.push({\n              name: label,\n              config: { filterable: true },\n              type: numberField ? FieldType.number : FieldType.string,\n              values: [],\n            });\n          }\n        });\n    });\n\n    // Fill valueField, timeField and labelFields with values\n    dataFramesByRefId[refId].forEach((df) => {\n      const timeFields = df.fields[0]?.values ?? [];\n      const dataFields = df.fields[1]?.values ?? [];\n      timeFields.forEach((value) => timeField.values.push(value));\n      dataFields.forEach((value) => {\n        valueField.values.push(parseSampleValue(value));\n        const labelsForField = df.fields[1].labels ?? {};\n        labelFields.forEach((field) => field.values.push(getLabelValue(labelsForField, field.name)));\n      });\n    });\n\n    const fields = [timeField, ...labelFields, valueField];\n    return {\n      refId,\n      fields,\n      // Prometheus specific UI for instant queries\n      meta: { ...dfs[0].meta, preferredVisualisationType: 'rawPrometheus' as PreferredVisualisationType },\n      length: timeField.values.length,\n    };\n  });\n  return frames;\n}\n\nfunction getValueText(responseLength: number, refId = '') {\n  return responseLength > 1 ? `Value #${refId}` : 'Value';\n}\n\nexport function transform(\n  response: FetchResponse<PromDataSuccessResponse>,\n  transformOptions: {\n    query: PromQueryRequest;\n    exemplarTraceIdDestinations?: ExemplarTraceIdDestination[];\n    target: PromQuery;\n    responseListLength: number;\n    scopedVars?: ScopedVars;\n  }\n) {\n  // Create options object from transformOptions\n  const options: TransformOptions = {\n    format: transformOptions.target.format,\n    step: transformOptions.query.step,\n    legendFormat: transformOptions.target.legendFormat,\n    start: transformOptions.query.start,\n    end: transformOptions.query.end,\n    query: transformOptions.query.expr,\n    responseListLength: transformOptions.responseListLength,\n    scopedVars: transformOptions.scopedVars,\n    refId: transformOptions.target.refId,\n    valueWithRefId: transformOptions.target.valueWithRefId,\n    meta: {\n      // Fix for showing of Prometheus results in Explore table\n      preferredVisualisationType: transformOptions.query.instant ? 'rawPrometheus' : 'graph',\n    },\n  };\n  const prometheusResult = response.data.data;\n\n  if (isExemplarData(prometheusResult)) {\n    const events: TimeAndValue[] = [];\n    prometheusResult.forEach((exemplarData) => {\n      const data = exemplarData.exemplars.map((exemplar) => {\n        return {\n          [TIME_SERIES_TIME_FIELD_NAME]: exemplar.timestamp * 1000,\n          [TIME_SERIES_VALUE_FIELD_NAME]: exemplar.value,\n          ...exemplar.labels,\n          ...exemplarData.seriesLabels,\n        };\n      });\n      events.push(...data);\n    });\n\n    // Grouping exemplars by step\n    const sampledExemplars = sampleExemplars(events, options);\n\n    const dataFrame = new ArrayDataFrame(sampledExemplars);\n    dataFrame.meta = { dataTopic: DataTopic.Annotations };\n\n    // Add data links if configured\n    if (transformOptions.exemplarTraceIdDestinations?.length) {\n      for (const exemplarTraceIdDestination of transformOptions.exemplarTraceIdDestinations) {\n        const traceIDField = dataFrame.fields.find((field) => field.name === exemplarTraceIdDestination.name);\n        if (traceIDField) {\n          const links = getDataLinks(exemplarTraceIdDestination);\n          traceIDField.config.links = traceIDField.config.links?.length\n            ? [...traceIDField.config.links, ...links]\n            : links;\n        }\n      }\n    }\n    return [dataFrame];\n  }\n\n  if (!prometheusResult?.result) {\n    return [];\n  }\n\n  // Return early if result type is scalar\n  if (prometheusResult.resultType === 'scalar') {\n    const df: DataFrame = {\n      meta: options.meta,\n      refId: options.refId,\n      length: 1,\n      fields: [getTimeField([prometheusResult.result]), getValueField({ data: [prometheusResult.result] })],\n    };\n    return [df];\n  }\n\n  // Return early again if the format is table, this needs special transformation.\n  if (options.format === 'table') {\n    const tableData = transformMetricDataToTable(prometheusResult.result, options);\n    return [tableData];\n  }\n\n  // Process matrix and vector results to DataFrame\n  const dataFrame: DataFrame[] = [];\n  prometheusResult.result.forEach((data: MatrixOrVectorResult) => dataFrame.push(transformToDataFrame(data, options)));\n\n  // When format is heatmap use the already created data frames and transform it more\n  if (options.format === 'heatmap') {\n    return mergeHeatmapFrames(transformToHistogramOverTime(dataFrame.sort(sortSeriesByLabel)));\n  }\n\n  // Return matrix or vector result as DataFrame[]\n  return dataFrame;\n}\n\nfunction getDataLinks(options: ExemplarTraceIdDestination): DataLink[] {\n  const dataLinks: DataLink[] = [];\n\n  if (options.datasourceUid) {\n    const dataSourceSrv = getDataSourceSrv();\n    const dsSettings = dataSourceSrv.getInstanceSettings(options.datasourceUid);\n\n    // dsSettings is undefined because of the reasons below:\n    // - permissions issues (probably most likely)\n    // - deleted datasource\n    // - misconfiguration\n    if (dsSettings) {\n      dataLinks.push({\n        title: options.urlDisplayLabel || `Query with ${dsSettings?.name}`,\n        url: '',\n        internal: {\n          query: { query: '${__value.raw}', queryType: 'traceql' },\n          datasourceUid: options.datasourceUid,\n          datasourceName: dsSettings?.name ?? 'Data source not found',\n        },\n      });\n    }\n  }\n\n  if (options.url) {\n    dataLinks.push({\n      title: options.urlDisplayLabel || `Go to ${options.url}`,\n      url: options.url,\n      targetBlank: true,\n    });\n  }\n  return dataLinks;\n}\n\n/**\n * Reduce the density of the exemplars by making sure that the highest value exemplar is included\n * and then only the ones that are 2 times the standard deviation of the all the values.\n * This makes sure not to show too many dots near each other.\n */\nfunction sampleExemplars(events: TimeAndValue[], options: TransformOptions) {\n  const step = options.step || 15;\n  const bucketedExemplars: { [ts: string]: TimeAndValue[] } = {};\n  const values: number[] = [];\n  for (const exemplar of events) {\n    // Align exemplar timestamp to nearest step second\n    const alignedTs = String(Math.floor(exemplar[TIME_SERIES_TIME_FIELD_NAME] / 1000 / step) * step * 1000);\n    if (!bucketedExemplars[alignedTs]) {\n      // New bucket found\n      bucketedExemplars[alignedTs] = [];\n    }\n    bucketedExemplars[alignedTs].push(exemplar);\n    values.push(exemplar[TIME_SERIES_VALUE_FIELD_NAME]);\n  }\n\n  // Getting exemplars from each bucket\n  const standardDeviation = deviation(values);\n  const sampledBuckets = Object.keys(bucketedExemplars).sort();\n  const sampledExemplars = [];\n  for (const ts of sampledBuckets) {\n    const exemplarsInBucket = bucketedExemplars[ts];\n    if (exemplarsInBucket.length === 1) {\n      sampledExemplars.push(exemplarsInBucket[0]);\n    } else {\n      // Choose which values to sample\n      const bucketValues = exemplarsInBucket.map((ex) => ex[TIME_SERIES_VALUE_FIELD_NAME]).sort(descending);\n      const sampledBucketValues = bucketValues.reduce((acc: number[], curr) => {\n        if (acc.length === 0) {\n          // First value is max and is always added\n          acc.push(curr);\n        } else {\n          // Then take values only when at least 2 standard deviation distance to previously taken value\n          const prev = acc[acc.length - 1];\n          if (standardDeviation && prev - curr >= 2 * standardDeviation) {\n            acc.push(curr);\n          }\n        }\n        return acc;\n      }, []);\n      // Find the exemplars for the sampled values\n      sampledExemplars.push(\n        ...sampledBucketValues.map(\n          (value) => exemplarsInBucket.find((ex) => ex[TIME_SERIES_VALUE_FIELD_NAME] === value)!\n        )\n      );\n    }\n  }\n  return sampledExemplars;\n}\n\n/**\n * Transforms matrix and vector result from Prometheus result to DataFrame\n */\nfunction transformToDataFrame(data: MatrixOrVectorResult, options: TransformOptions): DataFrame {\n  const { name, labels } = createLabelInfo(data.metric, options);\n\n  const fields: Field[] = [];\n\n  if (isMatrixData(data)) {\n    const stepMs = options.step ? options.step * 1000 : NaN;\n    let baseTimestamp = options.start * 1000;\n    const dps: PromValue[] = [];\n\n    for (const value of data.values) {\n      let dpValue: number | null = parseSampleValue(value[1]);\n\n      if (isNaN(dpValue)) {\n        dpValue = null;\n      }\n\n      const timestamp = value[0] * 1000;\n      for (let t = baseTimestamp; t < timestamp; t += stepMs) {\n        dps.push([t, null]);\n      }\n      baseTimestamp = timestamp + stepMs;\n      dps.push([timestamp, dpValue]);\n    }\n\n    const endTimestamp = options.end * 1000;\n    for (let t = baseTimestamp; t <= endTimestamp; t += stepMs) {\n      dps.push([t, null]);\n    }\n    fields.push(getTimeField(dps, true));\n    fields.push(getValueField({ data: dps, parseValue: false, labels, displayNameFromDS: name }));\n  } else {\n    fields.push(getTimeField([data.value]));\n    fields.push(getValueField({ data: [data.value], labels, displayNameFromDS: name }));\n  }\n\n  return {\n    meta: options.meta,\n    refId: options.refId,\n    length: fields[0].values.length,\n    fields,\n    name,\n  };\n}\n\nfunction transformMetricDataToTable(md: MatrixOrVectorResult[], options: TransformOptions): DataFrame {\n  if (!md || md.length === 0) {\n    return {\n      meta: options.meta,\n      refId: options.refId,\n      length: 0,\n      fields: [],\n    };\n  }\n\n  const valueText = options.responseListLength > 1 || options.valueWithRefId ? `Value #${options.refId}` : 'Value';\n\n  const timeField = getTimeField([]);\n  const metricFields = Object.keys(md.reduce((acc, series) => ({ ...acc, ...series.metric }), {}))\n    .sort()\n    .map((label) => {\n      // Labels have string field type, otherwise table tries to figure out the type which can result in unexpected results\n      // Only \"le\" label has a number field type\n      const numberField = label === HISTOGRAM_QUANTILE_LABEL_NAME;\n      const field: Field = {\n        name: label,\n        config: { filterable: true },\n        type: numberField ? FieldType.number : FieldType.string,\n        values: [],\n      };\n      return field;\n    });\n  const valueField = getValueField({ data: [], valueName: valueText });\n\n  md.forEach((d) => {\n    if (isMatrixData(d)) {\n      d.values.forEach((val) => {\n        timeField.values.push(val[0] * 1000);\n        metricFields.forEach((metricField) => metricField.values.push(getLabelValue(d.metric, metricField.name)));\n        valueField.values.push(parseSampleValue(val[1]));\n      });\n    } else {\n      timeField.values.push(d.value[0] * 1000);\n      metricFields.forEach((metricField) => metricField.values.push(getLabelValue(d.metric, metricField.name)));\n      valueField.values.push(parseSampleValue(d.value[1]));\n    }\n  });\n\n  return {\n    meta: options.meta,\n    refId: options.refId,\n    length: timeField.values.length,\n    fields: [timeField, ...metricFields, valueField],\n  };\n}\n\nfunction getLabelValue(metric: PromMetric, label: string): string | number {\n  if (metric.hasOwnProperty(label)) {\n    if (label === HISTOGRAM_QUANTILE_LABEL_NAME) {\n      return parseSampleValue(metric[label]);\n    }\n    return metric[label];\n  }\n  return '';\n}\n\nfunction getTimeField(data: PromValue[], isMs = false): Field<number> {\n  return {\n    name: TIME_SERIES_TIME_FIELD_NAME,\n    type: FieldType.time,\n    config: {},\n    values: data.map((val) => (isMs ? val[0] : val[0] * 1000)),\n  };\n}\n\ntype ValueFieldOptions = {\n  data: PromValue[];\n  valueName?: string;\n  parseValue?: boolean;\n  labels?: Labels;\n  displayNameFromDS?: string;\n};\n\nfunction getValueField({\n  data,\n  valueName = TIME_SERIES_VALUE_FIELD_NAME,\n  parseValue = true,\n  labels,\n  displayNameFromDS,\n}: ValueFieldOptions): Field {\n  return {\n    name: valueName,\n    type: FieldType.number,\n    display: getDisplayProcessor(),\n    config: {\n      displayNameFromDS,\n    },\n    labels,\n    values: data.map((val) => (parseValue ? parseSampleValue(val[1]) : val[1])),\n  };\n}\n\nfunction createLabelInfo(labels: { [key: string]: string }, options: TransformOptions) {\n  if (options?.legendFormat) {\n    const title = renderLegendFormat(getTemplateSrv().replace(options.legendFormat, options?.scopedVars), labels);\n    return { name: title, labels };\n  }\n\n  const { __name__, ...labelsWithoutName } = labels;\n  const labelPart = formatLabels(labelsWithoutName);\n  let title = `${__name__ ?? ''}${labelPart}`;\n\n  if (!title) {\n    title = options.query;\n  }\n\n  return { name: title, labels: labelsWithoutName };\n}\n\nexport function getOriginalMetricName(labelData: { [key: string]: string }) {\n  const metricName = labelData.__name__ || '';\n  delete labelData.__name__;\n  const labelPart = Object.entries(labelData)\n    .map((label) => `${label[0]}=\"${label[1]}\"`)\n    .join(',');\n  return `${metricName}{${labelPart}}`;\n}\n\nfunction mergeHeatmapFrames(frames: DataFrame[]): DataFrame[] {\n  if (frames.length === 0) {\n    return [];\n  }\n\n  const timeField = frames[0].fields.find((field) => field.type === FieldType.time)!;\n  const countFields = frames.map((frame) => {\n    let field = frame.fields.find((field) => field.type === FieldType.number)!;\n\n    return {\n      ...field,\n      name: field.config.displayNameFromDS!,\n    };\n  });\n\n  return [\n    {\n      ...frames[0],\n      meta: {\n        ...frames[0].meta,\n        type: DataFrameType.HeatmapRows,\n      },\n      fields: [timeField!, ...countFields],\n    },\n  ];\n}\n\nfunction transformToHistogramOverTime(seriesList: DataFrame[]) {\n  /*      t1 = timestamp1, t2 = timestamp2 etc.\n            t1  t2  t3          t1  t2  t3\n    le10    10  10  0     =>    10  10  0\n    le20    20  10  30    =>    10  0   30\n    le30    30  10  35    =>    10  0   5\n    */\n  for (let i = seriesList.length - 1; i > 0; i--) {\n    const topSeries = seriesList[i].fields.find((s) => s.name === TIME_SERIES_VALUE_FIELD_NAME);\n    const bottomSeries = seriesList[i - 1].fields.find((s) => s.name === TIME_SERIES_VALUE_FIELD_NAME);\n    if (!topSeries || !bottomSeries) {\n      throw new Error('Prometheus heatmap transform error: data should be a time series');\n    }\n\n    for (let j = 0; j < topSeries.values.length; j++) {\n      const bottomPoint = bottomSeries.values[j] || [0];\n      topSeries.values[j] -= bottomPoint;\n    }\n  }\n\n  return seriesList;\n}\n\nexport function sortSeriesByLabel(s1: DataFrame, s2: DataFrame): number {\n  let le1, le2;\n\n  try {\n    // fail if not integer. might happen with bad queries\n    le1 = parseSampleValue(s1.name ?? s1.fields[1].name);\n    le2 = parseSampleValue(s2.name ?? s2.fields[1].name);\n  } catch (err) {\n    console.error(err);\n    return 0;\n  }\n\n  if (le1 > le2) {\n    return 1;\n  }\n\n  if (le1 < le2) {\n    return -1;\n  }\n\n  return 0;\n}\n\n/** @internal */\nexport function parseSampleValue(value: string): number {\n  if (INFINITY_SAMPLE_REGEX.test(value)) {\n    return value[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  }\n  return parseFloat(value);\n}\n","// XXX remove in v8 or beyond\nmodule.exports = require('./index.js')\n"],"names":["isCancelablePromiseRejection","promise","makePromiseCancelable","hasCanceled_","resolve","reject","canceledPromiseRejection","val","error","EMPTY_SELECTOR","METRIC_LABEL","LIST_ITEM_SIZE","buildSelector","labels","singleMetric","selectedLabels","label","selectedValues","value","facetLabels","possibleLabels","lastFacetted","possibleValues","existingValues","getStyles","stylesFactory","theme","UnthemedPrometheusMetricsBrowser","event","selector","query","state","name","l","selected","nextValue","values","v","updatedFields","status","cb","languageProvider","lastUsedLabels","rawLabels","i","arr","rawValues","metricsMetadata","labelValue","meta","streams","labelSearchTerm","metricSearchTerm","validationStatus","valueSearchTerm","styles","LoadingPlaceholder","metrics","nonMetricLabels","empty","metricCount","Label","Input","index","style","Button","PrometheusMetricsBrowser","Field","MonacoQueryFieldLazy","props","MonacoQueryFieldWrapper","lastRunValueRef","onRunQuery","onChange","rest","handleRunQuery","handleBlur","handleChange","RECORDING_RULES_GROUP","LAST_USED_LABELS_KEY","getChooserText","metricsLookupDisabled","hasSyntax","hasMetrics","willApplySuggestion","suggestion","typeaheadContext","typeaheadText","nextChar","PromQueryField","context","datasource","data","initHints","initHint","result","queryHints","queryHint","remainingTasks","err","override","nextQuery","hint","typeahead","history","prefix","text","wrapperClasses","labelKey","node","prism","prevProps","range","changedRangeToRefresh","prevRange","sameMinuteFrom","sameMinuteTo","ExtraFieldElement","labelBrowserVisible","syntaxLoaded","chooserText","buttonDisabled","LocalStorageValueProvider","onLastUsedLabelsSave","onLastUsedLabelsDelete","Icon","AnnotationQueryEditor","annotation","onAnnotationChange","PromQueryCodeEditor","AutoSizeInput","ev","PrometheusMetricFindQuery","labelNamesRegex","labelValuesRegex","metricNamesRegex","queryResultRegex","labelValuesQuery","metricNamesQuery","queryResultQuery","lastValueFrom","metric","start","end","params","url","_labels","metricFilterPattern","metricName","matchedMetricName","instantQuery","map","metricData","k","self","SUM_HINT_THRESHOLD_COUNT","getQueryHints","series","hints","nameMatch","counterNameMetric","certain","match","token","metadata","fixableQuery","fix","mapping","mappingForQuery","acc","ruleName","getInitHints","trackQuery","response","request","startTime","app","queries","frame","migrateVariableQueryToEditor","rawQuery","queryBase","labelNames","labelValues","metricNames","queryResult","migrateVariableEditorBackToVariableSupport","QueryVariable","removeLineBreaks","input","variableOptions","refId","PromVariableQueryEditor","qryType","setQryType","setLabel","setMetric","varQuery","setVarQuery","seriesQuery","setSeriesQuery","labelOptions","setLabelOptions","variableQuery","variableMigration","onChangeWithVariableString","queryString","onQueryTypeChange","newType","onLabelChange","newLabel","onMetricChange","e","onVarQueryChange","onSeriesQueryChange","InlineFieldRow","InlineField","Select","TextArea","PrometheusVariableSupport","templateSrv","timeSrv","of","scopedVars","interpolated","metricFindQuery","from","results","ANNOTATION_QUERY_STEP_DEFAULT","GET_AND_POST_METADATA_ENDPOINTS","InstantQueryRefIdIndex","PrometheusDatasource","DataSourceWithBackend","instanceSettings","options","activeTargets","clonedTargets","target","m","instantTarget","rangeTarget","activeTarget","exemplarTarget","frames","tagKeys","titleFormat","textFormat","step","tagKeysArray","eventList","timeField","valueField","tags","timeValueTuple","idx","timeStampValue","valueValue","time","activeValuesTimestamps","latestEvent","timestamp","QueryCache","targetVersion","targetFlavor","httpOptions","overrides","throwError","key","queryUrl","abstractQueries","abstractQuery","endpoint","variable","prometheusRegularEscape","prometheusSpecialRegexEscape","escapedValues","currentTargetIdx","t","targets","processedTargets","processedTarget","fullOrPartialRequest","requestInfo","amendedResponse","tap","runningQueriesCount","subQueries","filterAndMapResponse","pipe","filter","merge","requestId","observables","forkJoin","current","catchError","interval","minInterval","scrapeInterval","intervalFactor","adjustedInterval","expr","adjusted","alignRange","rateInterval","safeInterval","msRange","sRange","queryModel","rsp","seriesLabels","buildInfo","enabled","Badge","disabled","unsupported","Tooltip","LOGOS","COLORS","AppDisplayNames","application","applicationSubType","expandedQueries","groups","extractRuleMappingFromGroups","action","expression","config","labelData","operator","variables","string","defaults","utcOffsetSec","alignedEnd","alignedStart","group","rule","EXPLAIN_LABEL_FILTER_CONTENT","PromQueryBuilderExplained","visQuery","lang","showExplain","OperationExplainedBox","title","stepNumber","markdown","children","OperationListExplained","queryModeller","onMouseEnter","onMouseLeave","op","def","body","RawQuery","className","highlighted","amendTable","prevTable","nextTable","prevTimes","nextTimes","pLen","pStart","pEnd","nLen","nStart","nEnd","outTable","_","trimTable","table","fromTime","toTime","times","vals","fromIdx","toIdx","vals2","defaultPrometheusQueryOverlapWindow","getFieldIdent","field","getTargSig","targExpr","targ","overlapString","entries","unverifiedOverlap","duration","list","entry","entryTypeCast","isSupported","fetchUrl","requestTransferSize","currentRequest","previous","savedBytes","interpolateString","newFrom","newTo","shouldCache","doPartialQuery","prevTo","reqTargSigs","targIdent","targSig","cached","newFromPartial","respFrames","respByTarget","outFrames","cachedFrames","respFrame","respFrameIdent","cachedFrame","amendedTable","nonEmptyCachedFrames","trimmed","INFINITY_SAMPLE_REGEX","isTableResult","dataFrame","isHeatmapResult","transformV2","f","fieldCopy","tableFrames","framesWithoutTable","df","processedTableFrames","transformDFToTable","exemplarFrames","framesWithoutTableAndExemplars","destinations","processedExemplarFrames","exemplarTraceIdDestination","traceIDField","links","getDataLinks","heatmapResults","framesWithoutTableHeatmapsAndExemplars","le","heatmapResultsGroupedByQuery","h","processedHeatmapResultsGroupedByQuery","heatmapResultsGroup","heatmapResultsGroupedByValues","HISTOGRAM_QUANTILE_LABEL_NAME","notLE","dataFrames","sortedHeatmap","sortSeriesByLabel","mergeHeatmapFrames","transformToHistogramOverTime","otherFrames","flattenedProcessedHeatmapFrames","dfs","dataFramesByRefId","refIds","valueText","getValueText","getValueField","getTimeField","labelFields","promLabels","numberField","timeFields","dataFields","parseSampleValue","labelsForField","getLabelValue","fields","responseLength","transform","transformOptions","prometheusResult","events","exemplarData","exemplar","sampledExemplars","sampleExemplars","transformMetricDataToTable","transformToDataFrame","dataLinks","dsSettings","bucketedExemplars","alignedTs","standardDeviation","sampledBuckets","ts","exemplarsInBucket","sampledBucketValues","ex","curr","prev","createLabelInfo","stepMs","baseTimestamp","dps","dpValue","endTimestamp","md","metricFields","d","metricField","isMs","valueName","parseValue","displayNameFromDS","__name__","labelsWithoutName","labelPart","getOriginalMetricName","countFields","seriesList","topSeries","s","bottomSeries","j","bottomPoint","s1","s2","le1","le2","module"],"sourceRoot":""}