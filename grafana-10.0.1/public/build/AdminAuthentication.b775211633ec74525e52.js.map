{"version":3,"file":"AdminAuthentication.b775211633ec74525e52.js","mappings":"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","sources":["webpack://grafana/./public/app/features/auth-config/components/ConfigureAuthCTA.tsx","webpack://grafana/./public/app/features/auth-config/constants.ts","webpack://grafana/./public/app/features/auth-config/components/ProviderCard.tsx","webpack://grafana/./public/app/features/auth-config/utils.ts","webpack://grafana/./public/app/features/auth-config/AuthConfigPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { CallToActionCard, IconName, LinkButton, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  title: string;\n  buttonIcon: IconName;\n  buttonLink?: string;\n  buttonTitle: string;\n  buttonDisabled?: boolean;\n  description?: string;\n}\n\nconst ConfigureAuthCTA: React.FunctionComponent<Props> = ({\n  title,\n  buttonIcon,\n  buttonLink,\n  buttonTitle,\n  buttonDisabled,\n  description,\n}) => {\n  const styles = useStyles2(getStyles);\n  const footer = description ? <span key=\"proTipFooter\">{description}</span> : '';\n  const ctaElementClassName = !description ? styles.button : '';\n\n  const ctaElement = (\n    <LinkButton\n      size=\"lg\"\n      href={buttonLink}\n      icon={buttonIcon}\n      className={ctaElementClassName}\n      data-testid={selectors.components.CallToActionCard.buttonV2(buttonTitle)}\n      disabled={buttonDisabled}\n    >\n      {buttonTitle}\n    </LinkButton>\n  );\n\n  return <CallToActionCard className={styles.cta} message={title} footer={footer} callToActionElement={ctaElement} />;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cta: css`\n      text-align: center;\n    `,\n    button: css`\n      margin-bottom: ${theme.spacing(2.5)};\n    `,\n  };\n};\n\nexport default ConfigureAuthCTA;\n","export const BASE_PATH = 'admin/authentication/';\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Card, useStyles2, Icon, Tooltip } from '@grafana/ui';\n\nimport { BASE_PATH } from '../constants';\n\nexport const LOGO_SIZE = '48px';\n\ntype Props = {\n  providerId: string;\n  displayName: string;\n  enabled: boolean;\n  configFoundInIniFile?: boolean;\n  configPath?: string;\n  authType?: string;\n  badges?: JSX.Element[];\n};\n\nexport function ProviderCard({\n  providerId,\n  displayName,\n  enabled,\n  configFoundInIniFile,\n  configPath,\n  authType,\n  badges,\n}: Props) {\n  const styles = useStyles2(getStyles);\n  configPath = BASE_PATH + (configPath || providerId);\n\n  return (\n    <Card href={configPath} className={styles.container}>\n      <Card.Heading className={styles.name}>{displayName}</Card.Heading>\n      {configFoundInIniFile && (\n        <>\n          <span className={styles.initext}>\n            <Tooltip\n              content={`Note: Settings enabled in the .ini configuration file will overwritten by the current settings.`}\n            >\n              <>\n                <Icon name=\"adjust-circle\" />\n                Configuration found in .ini file\n              </>\n            </Tooltip>\n          </span>\n        </>\n      )}\n      <div className={styles.footer}>\n        {authType && <Badge text={authType} color=\"blue\" icon=\"info-circle\" />}\n        {enabled ? <Badge text=\"Enabled\" color=\"green\" icon=\"check\" /> : <Badge text=\"Not enabled\" color=\"red\" />}\n      </div>\n    </Card>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      min-height: ${theme.spacing(16)};\n      display: flex;\n      flex-direction: column;\n      justify-content: space-between;\n      padding: ${theme.spacing(2)};\n    `,\n    header: css`\n      display: flex;\n      justify-content: space-between;\n      align-items: flex-start;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    footer: css`\n      display: flex;\n      justify-content: space-between;\n    `,\n    name: css`\n      align-self: flex-start;\n      font-size: ${theme.typography.h4.fontSize};\n      color: ${theme.colors.text.primary};\n      margin: 0;\n    `,\n    initext: css`\n      font-size: ${theme.typography.bodySmall.fontSize};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(1)} 0; // Add some padding\n      max-width: 90%; // Add a max-width to prevent text from stretching too wide\n    `,\n  };\n};\n","import { BASE_PATH } from './constants';\nimport { AuthProviderInfo } from './types';\n\nexport function getProviderUrl(provider: AuthProviderInfo) {\n  return BASE_PATH + (provider.configPath || provider.id);\n}\n","import { css } from '@emotion/css';\nimport { isEmpty } from 'lodash';\nimport React, { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { StoreState } from 'app/types';\n\nimport ConfigureAuthCTA from './components/ConfigureAuthCTA';\nimport { ProviderCard } from './components/ProviderCard';\nimport { loadSettings } from './state/actions';\nimport { getProviderUrl } from './utils';\n\nimport { getRegisteredAuthProviders } from '.';\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: StoreState) {\n  const { isLoading, providerStatuses } = state.authConfig;\n  return {\n    isLoading,\n    providerStatuses,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadSettings,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport const AuthConfigPageUnconnected = ({ providerStatuses, isLoading, loadSettings }: Props): JSX.Element => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    loadSettings();\n  }, [loadSettings]);\n\n  const authProviders = getRegisteredAuthProviders();\n  const enabledProviders = authProviders.filter((p) => providerStatuses[p.id]?.enabled);\n  const configuresProviders = authProviders.filter(\n    (p) => providerStatuses[p.id]?.configured && !providerStatuses[p.id]?.enabled\n  );\n  const availableProviders = authProviders.filter(\n    (p) => !providerStatuses[p.id]?.enabled && !providerStatuses[p.id]?.configured\n  );\n  const firstAvailableProvider = availableProviders?.length ? availableProviders[0] : null;\n\n  {\n    /* TODO: make generic for the provider of the configuration or make the documentation point to a collection of all our providers */\n  }\n  const docsLink = (\n    <a\n      className=\"external-link\"\n      href=\"https://grafana.com/docs/grafana/next/setup-grafana/configure-security/configure-authentication/saml-ui/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      documentation.\n    </a>\n  );\n  const subTitle = <span>Manage your auth settings and configure single sign-on. Find out more in our {docsLink}</span>;\n  return (\n    <Page navId=\"authentication\" subTitle={subTitle}>\n      <Page.Contents isLoading={isLoading}>\n        <h3 className={styles.sectionHeader}>Configured authentication</h3>\n        {!!enabledProviders?.length && (\n          <div className={styles.cardsContainer}>\n            {enabledProviders.map((provider) => (\n              <ProviderCard\n                key={provider.id}\n                providerId={provider.id}\n                displayName={provider.displayName}\n                authType={provider.type}\n                enabled={providerStatuses[provider.id]?.enabled}\n                configFoundInIniFile={providerStatuses[provider.id]?.configFoundInIniFile}\n                configPath={provider.configPath}\n              />\n            ))}\n          </div>\n        )}\n        {!enabledProviders?.length && firstAvailableProvider && !isEmpty(providerStatuses) && (\n          <ConfigureAuthCTA\n            title={`You have no ${firstAvailableProvider.type} configuration created at the moment`}\n            buttonIcon=\"plus-circle\"\n            buttonLink={getProviderUrl(firstAvailableProvider)}\n            buttonTitle={`Configure ${firstAvailableProvider.type}`}\n            description={`Important: if you have ${firstAvailableProvider.type} configuration enabled via the .ini file Grafana is using it.\n              Configuring ${firstAvailableProvider.type} via UI will take precedence over any configuration in the .ini file.\n              No changes will be written into .ini file.`}\n          />\n        )}\n        {!!configuresProviders?.length && (\n          <div className={styles.cardsContainer}>\n            {configuresProviders.map((provider) => (\n              <ProviderCard\n                key={provider.id}\n                providerId={provider.id}\n                displayName={provider.displayName}\n                authType={provider.protocol}\n                enabled={providerStatuses[provider.id]?.enabled}\n                configFoundInIniFile={providerStatuses[provider.id]?.configFoundInIniFile}\n                configPath={provider.configPath}\n              />\n            ))}\n          </div>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardsContainer: css`\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(288px, 1fr));\n      gap: ${theme.spacing(3)};\n      margin-bottom: ${theme.spacing(3)};\n      margin-top: ${theme.spacing(2)};\n    `,\n    sectionHeader: css`\n      margin-bottom: ${theme.spacing(3)};\n    `,\n    settingsSection: css`\n      margin-top: ${theme.spacing(4)};\n    `,\n    settingName: css`\n      padding-left: 25px;\n    `,\n    doclink: css`\n      padding-bottom: 5px;\n      padding-top: -5px;\n      font-size: ${theme.typography.bodySmall.fontSize};\n      a {\n        color: ${theme.colors.info.name}; // use theme link color or any other color\n        text-decoration: underline; // underline or none, as you prefer\n      }\n    `,\n    settingValue: css`\n      white-space: break-spaces;\n    `,\n  };\n};\n\nexport default connector(AuthConfigPageUnconnected);\n"],"names":["ConfigureAuthCTA","title","buttonIcon","buttonLink","buttonTitle","buttonDisabled","description","styles","getStyles","footer","ctaElementClassName","ctaElement","selectors","CallToActionCard","theme","BASE_PATH","LOGO_SIZE","ProviderCard","providerId","displayName","enabled","configFoundInIniFile","configPath","authType","badges","Card","Tooltip","Icon","Badge","getProviderUrl","provider","mapStateToProps","state","isLoading","providerStatuses","mapDispatchToProps","connector","AuthConfigPageUnconnected","loadSettings","authProviders","enabledProviders","p","configuresProviders","availableProviders","firstAvailableProvider","docsLink","subTitle","Page"],"sourceRoot":""}