{"version":3,"file":"AlertingRule.2f5a694abf3c6b3961de.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/RuleViewerVisualization.tsx","webpack://grafana/./public/app/features/alerting/unified/GrafanaRuleQueryViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetailsFederatedSources.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/query.ts","webpack://grafana/./public/app/features/alerting/unified/RuleViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/RuleViewerLayout.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleHealth.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleState.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useCombinedRule.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useCallback } from 'react';\n\nimport {\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  DateTime,\n  dateTime,\n  GrafanaTheme2,\n  PanelData,\n  RelativeTimeRange,\n  urlUtil,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DateTimePicker, LinkButton, useStyles2 } from '@grafana/ui';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { AccessControlAction } from 'app/types';\nimport { AlertDataQuery, AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { Authorize } from '../Authorize';\nimport { VizWrapper } from '../rule-editor/VizWrapper';\nimport { ThresholdDefinition } from '../rule-editor/util';\n\ninterface RuleViewerVisualizationProps extends Pick<AlertQuery, 'refId' | 'model' | 'relativeTimeRange'> {\n  dsSettings: DataSourceInstanceSettings<DataSourceJsonData>;\n  data?: PanelData;\n  thresholds?: ThresholdDefinition;\n  onTimeRangeChange: (range: RelativeTimeRange) => void;\n  className?: string;\n}\n\nconst headerHeight = 4;\n\nexport function RuleViewerVisualization({\n  data,\n  model,\n  thresholds,\n  dsSettings,\n  relativeTimeRange,\n  onTimeRangeChange,\n  className,\n}: RuleViewerVisualizationProps): JSX.Element | null {\n  const styles = useStyles2(getStyles);\n  const isExpression = isExpressionQuery(model);\n\n  const onTimeChange = useCallback(\n    (newDateTime: DateTime) => {\n      const now = dateTime().unix() - newDateTime.unix();\n\n      if (relativeTimeRange) {\n        const interval = relativeTimeRange.from - relativeTimeRange.to;\n        onTimeRangeChange({ from: now + interval, to: now });\n      }\n    },\n    [onTimeRangeChange, relativeTimeRange]\n  );\n\n  const setDateTime = useCallback((relativeTimeRangeTo: number) => {\n    return relativeTimeRangeTo === 0 ? dateTime() : dateTime().subtract(relativeTimeRangeTo, 'seconds');\n  }, []);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <div className={className}>\n      <div className={styles.header}>\n        <div className={styles.actions}>\n          {!isExpression && relativeTimeRange ? (\n            <DateTimePicker date={setDateTime(relativeTimeRange.to)} onChange={onTimeChange} maxDate={new Date()} />\n          ) : null}\n          <Authorize actions={[AccessControlAction.DataSourcesExplore]}>\n            {!isExpression && (\n              <LinkButton\n                size=\"md\"\n                variant=\"secondary\"\n                icon=\"compass\"\n                target=\"_blank\"\n                href={createExploreLink(dsSettings, model)}\n              >\n                View in Explore\n              </LinkButton>\n            )}\n          </Authorize>\n        </div>\n      </div>\n      <VizWrapper data={data} thresholds={thresholds?.config} thresholdsType={thresholds?.mode} />\n    </div>\n  );\n}\n\nfunction createExploreLink(settings: DataSourceInstanceSettings, model: AlertDataQuery): string {\n  const { name } = settings;\n  const { refId, ...rest } = model;\n\n  /*\n    In my testing I've found some alerts that don't have a data source embedded inside the model.\n\n    At this moment in time it is unclear to me why some alert definitions not have a data source embedded in the model.\n    Ideally we'd resolve the datasource name to the proper datasource Ref \"{ type: string, uid: string }\" and pass that in to the model.\n\n    I don't think that should happen here, the fact that the datasource ref is sometimes missing here is a symptom of another cause. (Gilles)\n   */\n  return urlUtil.renderUrl(`${config.appSubUrl}/explore`, {\n    left: JSON.stringify({\n      datasource: name,\n      queries: [{ refId: 'A', ...rest }],\n      range: { from: 'now-1h', to: 'now' },\n    }),\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css`\n      height: ${theme.spacing(headerHeight)};\n      display: flex;\n      align-items: center;\n      justify-content: flex-end;\n      white-space: nowrap;\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    refId: css`\n      font-weight: ${theme.typography.fontWeightMedium};\n      color: ${theme.colors.text.link};\n      overflow: hidden;\n    `,\n    dataSource: css`\n      margin-left: ${theme.spacing(1)};\n      font-style: italic;\n      color: ${theme.colors.text.secondary};\n    `,\n    actions: css`\n      display: flex;\n      align-items: center;\n    `,\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport { dump } from 'js-yaml';\nimport { keyBy, startCase } from 'lodash';\nimport React from 'react';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2, PanelData, RelativeTimeRange } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { Badge, useStyles2 } from '@grafana/ui';\nimport { mapRelativeTimeRangeToOption } from '@grafana/ui/src/components/DateTimePickers/RelativeTimeRangePicker/utils';\n\nimport { AlertQuery } from '../../../types/unified-alerting-dto';\nimport { isExpressionQuery } from '../../expressions/guards';\nimport {\n  downsamplingTypes,\n  ExpressionQuery,\n  ExpressionQueryType,\n  reducerModes,\n  ReducerMode,\n  reducerTypes,\n  thresholdFunctions,\n  upsamplingTypes,\n} from '../../expressions/types';\nimport alertDef, { EvalFunction } from '../state/alertDef';\n\nimport { ExpressionResult } from './components/expressions/Expression';\nimport { getThresholdsForQueries, ThresholdDefinition } from './components/rule-editor/util';\nimport { RuleViewerVisualization } from './components/rule-viewer/RuleViewerVisualization';\n\ninterface GrafanaRuleViewerProps {\n  queries: AlertQuery[];\n  condition: string;\n  evalDataByQuery?: Record<string, PanelData>;\n  evalTimeRanges?: Record<string, RelativeTimeRange>;\n  onTimeRangeChange: (queryRef: string, timeRange: RelativeTimeRange) => void;\n}\n\nexport function GrafanaRuleQueryViewer({\n  queries,\n  condition,\n  evalDataByQuery = {},\n  evalTimeRanges = {},\n  onTimeRangeChange,\n}: GrafanaRuleViewerProps) {\n  const dsByUid = keyBy(Object.values(config.datasources), (ds) => ds.uid);\n  const dataQueries = queries.filter((q) => !isExpressionQuery(q.model));\n  const expressions = queries.filter((q) => isExpressionQuery(q.model));\n  const styles = useStyles2(getExpressionViewerStyles);\n\n  const thresholds = getThresholdsForQueries(queries);\n\n  return (\n    <Stack gap={2} direction=\"column\">\n      <div className={styles.maxWidthContainer}>\n        <Stack gap={2}>\n          {dataQueries.map(({ model, relativeTimeRange, refId, datasourceUid }, index) => {\n            const dataSource = dsByUid[datasourceUid];\n\n            return (\n              <QueryPreview\n                key={index}\n                refId={refId}\n                isAlertCondition={condition === refId}\n                model={model}\n                relativeTimeRange={relativeTimeRange}\n                evalTimeRange={evalTimeRanges[refId]}\n                dataSource={dataSource}\n                thresholds={thresholds[refId]}\n                queryData={evalDataByQuery[refId]}\n                onEvalTimeRangeChange={(timeRange) => onTimeRangeChange(refId, timeRange)}\n              />\n            );\n          })}\n        </Stack>\n      </div>\n      <div className={styles.maxWidthContainer}>\n        <Stack gap={1}>\n          {expressions.map(({ model, refId, datasourceUid }, index) => {\n            const dataSource = dsByUid[datasourceUid];\n\n            return (\n              isExpressionQuery(model) && (\n                <ExpressionPreview\n                  key={index}\n                  refId={refId}\n                  isAlertCondition={condition === refId}\n                  model={model}\n                  dataSource={dataSource}\n                  evalData={evalDataByQuery[refId]}\n                />\n              )\n            );\n          })}\n        </Stack>\n      </div>\n    </Stack>\n  );\n}\n\ninterface QueryPreviewProps extends Pick<AlertQuery, 'refId' | 'relativeTimeRange' | 'model'> {\n  isAlertCondition: boolean;\n  dataSource?: DataSourceInstanceSettings;\n  queryData?: PanelData;\n  thresholds?: ThresholdDefinition;\n  evalTimeRange?: RelativeTimeRange;\n  onEvalTimeRangeChange: (timeRange: RelativeTimeRange) => void;\n}\n\nexport function QueryPreview({\n  refId,\n  relativeTimeRange,\n  thresholds,\n  model,\n  dataSource,\n  queryData,\n  evalTimeRange,\n  onEvalTimeRangeChange,\n}: QueryPreviewProps) {\n  const styles = useStyles2(getQueryPreviewStyles);\n\n  // relativeTimeRange is what is defined for a query\n  // evalTimeRange is temporary value which the user can change\n  const headerItems = [dataSource?.name ?? '[[Data source not found]]'];\n  if (relativeTimeRange) {\n    headerItems.push(mapRelativeTimeRangeToOption(relativeTimeRange).display);\n  }\n\n  return (\n    <QueryBox refId={refId} headerItems={headerItems} className={styles.contentBox}>\n      <pre className={styles.code}>\n        <code>{dump(model)}</code>\n      </pre>\n      {dataSource && (\n        <RuleViewerVisualization\n          refId={refId}\n          dsSettings={dataSource}\n          model={model}\n          data={queryData}\n          thresholds={thresholds}\n          relativeTimeRange={evalTimeRange}\n          onTimeRangeChange={onEvalTimeRangeChange}\n          className={styles.visualization}\n        />\n      )}\n    </QueryBox>\n  );\n}\n\nconst getQueryPreviewStyles = (theme: GrafanaTheme2) => ({\n  code: css`\n    margin: ${theme.spacing(1)};\n  `,\n  contentBox: css`\n    flex: 1 0 100%;\n  `,\n  visualization: css`\n    padding: ${theme.spacing(1)};\n  `,\n});\n\ninterface ExpressionPreviewProps extends Pick<AlertQuery, 'refId'> {\n  isAlertCondition: boolean;\n  model: ExpressionQuery;\n  dataSource: DataSourceInstanceSettings;\n  evalData?: PanelData;\n}\n\nfunction ExpressionPreview({ refId, model, evalData, isAlertCondition }: ExpressionPreviewProps) {\n  function renderPreview() {\n    switch (model.type) {\n      case ExpressionQueryType.math:\n        return <MathExpressionViewer model={model} />;\n\n      case ExpressionQueryType.reduce:\n        return <ReduceConditionViewer model={model} />;\n\n      case ExpressionQueryType.resample:\n        return <ResampleExpressionViewer model={model} />;\n\n      case ExpressionQueryType.classic:\n        return <ClassicConditionViewer model={model} />;\n\n      case ExpressionQueryType.threshold:\n        return <ThresholdExpressionViewer model={model} />;\n\n      default:\n        return <>Expression not supported: {model.type}</>;\n    }\n  }\n\n  return (\n    <QueryBox refId={refId} headerItems={[startCase(model.type)]} isAlertCondition={isAlertCondition}>\n      {renderPreview()}\n      {evalData && <ExpressionResult series={evalData.series} isAlertCondition={isAlertCondition} />}\n    </QueryBox>\n  );\n}\n\ninterface QueryBoxProps extends React.PropsWithChildren<unknown> {\n  refId: string;\n  headerItems?: string[];\n  isAlertCondition?: boolean;\n  className?: string;\n}\n\nfunction QueryBox({ refId, headerItems = [], children, isAlertCondition, className }: QueryBoxProps) {\n  const styles = useStyles2(getQueryBoxStyles);\n\n  return (\n    <div className={cx(styles.container, className)}>\n      <header className={styles.header}>\n        <span className={styles.refId}>{refId}</span>\n        {headerItems.map((item, index) => (\n          <span key={index} className={styles.textBlock}>\n            {item}\n          </span>\n        ))}\n        {isAlertCondition && (\n          <div className={styles.conditionIndicator}>\n            <Badge color=\"green\" icon=\"check\" text=\"Alert condition\" />\n          </div>\n        )}\n      </header>\n      {children}\n    </div>\n  );\n}\n\nconst getQueryBoxStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    flex: 1 0 25%;\n    border: 1px solid ${theme.colors.border.strong};\n    max-width: 100%;\n  `,\n  header: css`\n    display: flex;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n    padding: ${theme.spacing(1)};\n    background-color: ${theme.colors.background.secondary};\n  `,\n  textBlock: css`\n    border: 1px solid ${theme.colors.border.weak};\n    padding: ${theme.spacing(0.5, 1)};\n    background-color: ${theme.colors.background.primary};\n  `,\n  refId: css`\n    color: ${theme.colors.text.link};\n    padding: ${theme.spacing(0.5, 1)};\n    border: 1px solid ${theme.colors.border.weak};\n  `,\n  conditionIndicator: css`\n    margin-left: auto;\n  `,\n});\n\nfunction ClassicConditionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getClassicConditionViewerStyles);\n\n  const reducerFunctions = keyBy(alertDef.reducerTypes, (rt) => rt.value);\n  const evalOperators = keyBy(alertDef.evalOperators, (eo) => eo.value);\n  const evalFunctions = keyBy(alertDef.evalFunctions, (ef) => ef.value);\n\n  return (\n    <div className={styles.container}>\n      {model.conditions?.map(({ query, operator, reducer, evaluator }, index) => {\n        const isRange = isRangeEvaluator(evaluator);\n\n        return (\n          <React.Fragment key={index}>\n            <div className={styles.blue}>\n              {index === 0 ? 'WHEN' : !!operator?.type && evalOperators[operator?.type]?.text}\n            </div>\n            <div className={styles.bold}>{reducer?.type && reducerFunctions[reducer.type]?.text}</div>\n            <div className={styles.blue}>OF</div>\n            <div className={styles.bold}>{query.params[0]}</div>\n            <div className={styles.blue}>{evalFunctions[evaluator.type].text}</div>\n            <div className={styles.bold}>\n              {isRange ? `(${evaluator.params[0]}; ${evaluator.params[1]})` : evaluator.params[0]}\n            </div>\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n}\n\nconst getClassicConditionViewerStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    padding: ${theme.spacing(1)};\n    display: grid;\n    grid-template-columns: max-content max-content max-content max-content max-content max-content;\n    gap: ${theme.spacing(0, 1)};\n  `,\n  ...getCommonQueryStyles(theme),\n});\n\nfunction ReduceConditionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getReduceConditionViewerStyles);\n\n  const { reducer, expression, settings } = model;\n  const reducerType = reducerTypes.find((rt) => rt.value === reducer);\n\n  const reducerMode = settings?.mode ?? ReducerMode.Strict;\n  const modeName = reducerModes.find((rm) => rm.value === reducerMode);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.label}>Function</div>\n      <div className={styles.value}>{reducerType?.label}</div>\n\n      <div className={styles.label}>Input</div>\n      <div className={styles.value}>{expression}</div>\n\n      <div className={styles.label}>Mode</div>\n      <div className={styles.value}>{modeName?.label}</div>\n    </div>\n  );\n}\n\nconst getReduceConditionViewerStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    padding: ${theme.spacing(1)};\n    display: grid;\n    gap: ${theme.spacing(1)};\n    grid-template-rows: 1fr 1fr;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n\n    > :nth-child(6) {\n      grid-column: span 3;\n    }\n  `,\n  ...getCommonQueryStyles(theme),\n});\n\nfunction ResampleExpressionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getResampleExpressionViewerStyles);\n\n  const { expression, window, downsampler, upsampler } = model;\n  const downsamplerType = downsamplingTypes.find((dt) => dt.value === downsampler);\n  const upsamplerType = upsamplingTypes.find((ut) => ut.value === upsampler);\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.label}>Input</div>\n      <div className={styles.value}>{expression}</div>\n\n      <div className={styles.label}>Resample to</div>\n      <div className={styles.value}>{window}</div>\n\n      <div className={styles.label}>Downsample</div>\n      <div className={styles.value}>{downsamplerType?.label}</div>\n\n      <div className={styles.label}>Upsample</div>\n      <div className={styles.value}>{upsamplerType?.label}</div>\n    </div>\n  );\n}\n\nconst getResampleExpressionViewerStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    padding: ${theme.spacing(1)};\n    display: grid;\n    gap: ${theme.spacing(1)};\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n  `,\n  ...getCommonQueryStyles(theme),\n});\n\nfunction ThresholdExpressionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getExpressionViewerStyles);\n\n  const { expression, conditions } = model;\n\n  const evaluator = conditions && conditions[0]?.evaluator;\n  const thresholdFunction = thresholdFunctions.find((tf) => tf.value === evaluator?.type);\n\n  const isRange = evaluator ? isRangeEvaluator(evaluator) : false;\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.label}>Input</div>\n      <div className={styles.value}>{expression}</div>\n\n      {evaluator && (\n        <>\n          <div className={styles.blue}>{thresholdFunction?.label}</div>\n          <div className={styles.bold}>\n            {isRange ? `(${evaluator.params[0]}; ${evaluator.params[1]})` : evaluator.params[0]}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nconst getExpressionViewerStyles = (theme: GrafanaTheme2) => {\n  const { blue, bold, ...common } = getCommonQueryStyles(theme);\n\n  return {\n    ...common,\n    maxWidthContainer: css`\n      max-width: 100%;\n    `,\n    container: css`\n      padding: ${theme.spacing(1)};\n      display: flex;\n      gap: ${theme.spacing(1)};\n    `,\n    blue: css`\n      ${blue};\n      margin: auto 0;\n    `,\n    bold: css`\n      ${bold};\n      margin: auto 0;\n    `,\n  };\n};\n\nfunction MathExpressionViewer({ model }: { model: ExpressionQuery }) {\n  const styles = useStyles2(getExpressionViewerStyles);\n\n  const { expression } = model;\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.label}>Input</div>\n      <div className={styles.value}>{expression}</div>\n    </div>\n  );\n}\n\nconst getCommonQueryStyles = (theme: GrafanaTheme2) => ({\n  blue: css`\n    color: ${theme.colors.text.link};\n  `,\n  bold: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  label: css`\n    display: flex;\n    align-items: center;\n    padding: ${theme.spacing(0.5, 1)};\n    background-color: ${theme.colors.background.secondary};\n    font-size: ${theme.typography.bodySmall.fontSize};\n    line-height: ${theme.typography.bodySmall.lineHeight};\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  value: css`\n    padding: ${theme.spacing(0.5, 1)};\n    border: 1px solid ${theme.colors.border.weak};\n  `,\n});\n\nfunction isRangeEvaluator(evaluator: { params: number[]; type: EvalFunction }) {\n  return evaluator.type === EvalFunction.IsWithinRange || evaluator.type === EvalFunction.IsOutsideRange;\n}\n","import React from 'react';\n\nimport { CombinedRuleGroup } from 'app/types/unified-alerting';\n\nimport { DetailsField } from '../DetailsField';\n\ninterface Props {\n  group: CombinedRuleGroup;\n}\n\nconst RuleDetailsFederatedSources = ({ group }: Props) => {\n  const sourceTenants = group.source_tenants ?? [];\n\n  return (\n    <DetailsField label=\"Tenant sources\">\n      <>\n        {sourceTenants.map((tenant) => (\n          <div key={tenant}>{tenant}</div>\n        ))}\n      </>\n    </DetailsField>\n  );\n};\n\nexport { RuleDetailsFederatedSources };\n","import { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\nimport { LokiQuery } from 'app/plugins/datasource/loki/types';\nimport { PromQuery } from 'app/plugins/datasource/prometheus/types';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { isCloudRulesSource, isGrafanaRulesSource } from './datasource';\nimport { isGrafanaRulerRule } from './rules';\n\nexport function alertRuleToQueries(combinedRule: CombinedRule | undefined | null): AlertQuery[] {\n  if (!combinedRule) {\n    return [];\n  }\n  const { namespace, rulerRule } = combinedRule;\n  const { rulesSource } = namespace;\n\n  if (isGrafanaRulesSource(rulesSource)) {\n    if (isGrafanaRulerRule(rulerRule)) {\n      return rulerRule.grafana_alert.data;\n    }\n  }\n\n  if (isCloudRulesSource(rulesSource)) {\n    const model = cloudAlertRuleToModel(rulesSource, combinedRule);\n\n    return [dataQueryToAlertQuery(model, rulesSource.uid)];\n  }\n\n  return [];\n}\n\nexport function dataQueryToAlertQuery(dataQuery: DataQuery, dataSourceUid: string): AlertQuery {\n  return {\n    refId: dataQuery.refId,\n    datasourceUid: dataSourceUid,\n    queryType: '',\n    model: dataQuery,\n    relativeTimeRange: {\n      from: 360,\n      to: 0,\n    },\n  };\n}\n\nfunction cloudAlertRuleToModel(dsSettings: DataSourceInstanceSettings, rule: CombinedRule): DataQuery {\n  const refId = 'A';\n\n  switch (dsSettings.type) {\n    case 'prometheus': {\n      const query: PromQuery = {\n        refId,\n        expr: rule.query,\n      };\n\n      return query;\n    }\n\n    case 'loki': {\n      const query: LokiQuery = {\n        refId,\n        expr: rule.query,\n      };\n\n      return query;\n    }\n\n    default:\n      throw new Error(`Query for datasource type ${dsSettings.type} is currently not supported by cloud alert rules.`);\n  }\n}\n","import { css } from '@emotion/css';\nimport produce from 'immer';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useObservable, useToggle } from 'react-use';\n\nimport { GrafanaTheme2, LoadingState, PanelData, RelativeTimeRange } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport {\n  Alert,\n  Button,\n  Collapse,\n  Icon,\n  IconButton,\n  LoadingPlaceholder,\n  useStyles2,\n  VerticalGroup,\n  withErrorBoundary,\n} from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../core/constants';\nimport { AlertQuery, GrafanaRuleDefinition } from '../../../types/unified-alerting-dto';\n\nimport { GrafanaRuleQueryViewer, QueryPreview } from './GrafanaRuleQueryViewer';\nimport { AlertLabels } from './components/AlertLabels';\nimport { DetailsField } from './components/DetailsField';\nimport { ProvisionedResource, ProvisioningAlert } from './components/Provisioning';\nimport { RuleViewerLayout, RuleViewerLayoutContent } from './components/rule-viewer/RuleViewerLayout';\nimport { RuleDetailsActionButtons } from './components/rules/RuleDetailsActionButtons';\nimport { RuleDetailsAnnotations } from './components/rules/RuleDetailsAnnotations';\nimport { RuleDetailsDataSources } from './components/rules/RuleDetailsDataSources';\nimport { RuleDetailsExpression } from './components/rules/RuleDetailsExpression';\nimport { RuleDetailsFederatedSources } from './components/rules/RuleDetailsFederatedSources';\nimport { RuleDetailsMatchingInstances } from './components/rules/RuleDetailsMatchingInstances';\nimport { RuleHealth } from './components/rules/RuleHealth';\nimport { RuleState } from './components/rules/RuleState';\nimport { useAlertQueriesStatus } from './hooks/useAlertQueriesStatus';\nimport { useCombinedRule } from './hooks/useCombinedRule';\nimport { AlertingQueryRunner } from './state/AlertingQueryRunner';\nimport { useCleanAnnotations } from './utils/annotations';\nimport { getRulesSourceByName } from './utils/datasource';\nimport { alertRuleToQueries } from './utils/query';\nimport * as ruleId from './utils/rule-id';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from './utils/rules';\n\ntype RuleViewerProps = GrafanaRouteComponentProps<{ id?: string; sourceName?: string }>;\n\nconst errorMessage = 'Could not find data source for rule';\nconst errorTitle = 'Could not view rule';\nconst pageTitle = 'View rule';\n\nexport function RuleViewer({ match }: RuleViewerProps) {\n  const styles = useStyles2(getStyles);\n  const [expandQuery, setExpandQuery] = useToggle(false);\n\n  const { id } = match.params;\n  const identifier = ruleId.tryParse(id, true);\n\n  const { loading, error, result: rule } = useCombinedRule(identifier, identifier?.ruleSourceName);\n  const runner = useMemo(() => new AlertingQueryRunner(), []);\n  const data = useObservable(runner.get());\n  const queries = useMemo(() => alertRuleToQueries(rule), [rule]);\n  const annotations = useCleanAnnotations(rule?.annotations || {});\n\n  const [evaluationTimeRanges, setEvaluationTimeRanges] = useState<Record<string, RelativeTimeRange>>({});\n\n  const { allDataSourcesAvailable } = useAlertQueriesStatus(queries);\n\n  const onRunQueries = useCallback(() => {\n    if (queries.length > 0 && allDataSourcesAvailable) {\n      const evalCustomizedQueries = queries.map<AlertQuery>((q) => ({\n        ...q,\n        relativeTimeRange: evaluationTimeRanges[q.refId] ?? q.relativeTimeRange,\n      }));\n\n      runner.run(evalCustomizedQueries);\n    }\n  }, [queries, evaluationTimeRanges, runner, allDataSourcesAvailable]);\n\n  useEffect(() => {\n    const alertQueries = alertRuleToQueries(rule);\n    const defaultEvalTimeRanges = Object.fromEntries(\n      alertQueries.map((q) => [q.refId, q.relativeTimeRange ?? { from: 0, to: 0 }])\n    );\n\n    setEvaluationTimeRanges(defaultEvalTimeRanges);\n  }, [rule]);\n\n  useEffect(() => {\n    if (allDataSourcesAvailable && expandQuery) {\n      onRunQueries();\n    }\n  }, [onRunQueries, allDataSourcesAvailable, expandQuery]);\n\n  useEffect(() => {\n    return () => runner.destroy();\n  }, [runner]);\n\n  const onQueryTimeRangeChange = useCallback(\n    (refId: string, timeRange: RelativeTimeRange) => {\n      const newEvalTimeRanges = produce(evaluationTimeRanges, (draft) => {\n        draft[refId] = timeRange;\n      });\n      setEvaluationTimeRanges(newEvalTimeRanges);\n    },\n    [evaluationTimeRanges, setEvaluationTimeRanges]\n  );\n\n  if (!identifier?.ruleSourceName) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title={errorTitle}>\n          <details className={styles.errorMessage}>{errorMessage}</details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  const rulesSource = getRulesSourceByName(identifier.ruleSourceName);\n\n  if (loading) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <LoadingPlaceholder text=\"Loading rule...\" />\n      </RuleViewerLayout>\n    );\n  }\n\n  if (error || !rulesSource) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title={errorTitle}>\n          <details className={styles.errorMessage}>\n            {error?.message ?? errorMessage}\n            <br />\n            {!!error?.stack && error.stack}\n          </details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  if (!rule) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <span>Rule could not be found.</span>\n      </RuleViewerLayout>\n    );\n  }\n\n  const isFederatedRule = isFederatedRuleGroup(rule.group);\n  const isProvisioned = isGrafanaRulerRule(rule.rulerRule) && Boolean(rule.rulerRule.grafana_alert.provenance);\n\n  return (\n    <RuleViewerLayout wrapInContent={false} title={pageTitle}>\n      {isFederatedRule && (\n        <Alert severity=\"info\" title=\"This rule is part of a federated rule group.\">\n          <VerticalGroup>\n            Federated rule groups are currently an experimental feature.\n            <Button fill=\"text\" icon=\"book\">\n              <a href=\"https://grafana.com/docs/metrics-enterprise/latest/tenant-management/tenant-federation/#cross-tenant-alerting-and-recording-rule-federation\">\n                Read documentation\n              </a>\n            </Button>\n          </VerticalGroup>\n        </Alert>\n      )}\n      {isProvisioned && <ProvisioningAlert resource={ProvisionedResource.AlertRule} />}\n      <RuleViewerLayoutContent>\n        <div>\n          <Stack direction=\"row\" alignItems=\"center\" wrap={false} gap={1}>\n            <Icon name=\"bell\" size=\"lg\" /> <span className={styles.title}>{rule.name}</span>\n          </Stack>\n          <RuleState rule={rule} isCreating={false} isDeleting={false} />\n          <RuleDetailsActionButtons rule={rule} rulesSource={rulesSource} isViewMode={true} />\n        </div>\n        <div className={styles.details}>\n          <div className={styles.leftSide}>\n            {rule.promRule && (\n              <DetailsField label=\"Health\" horizontal={true}>\n                <RuleHealth rule={rule.promRule} />\n              </DetailsField>\n            )}\n            {!!rule.labels && !!Object.keys(rule.labels).length && (\n              <DetailsField label=\"Labels\" horizontal={true}>\n                <AlertLabels labels={rule.labels} className={styles.labels} />\n              </DetailsField>\n            )}\n            <RuleDetailsExpression rulesSource={rulesSource} rule={rule} annotations={annotations} />\n            <RuleDetailsAnnotations annotations={annotations} />\n          </div>\n          <div className={styles.rightSide}>\n            <RuleDetailsDataSources rule={rule} rulesSource={rulesSource} />\n            {isFederatedRule && <RuleDetailsFederatedSources group={rule.group} />}\n            <DetailsField label=\"Namespace / Group\" className={styles.rightSideDetails}>\n              {rule.namespace.name} / {rule.group.name}\n            </DetailsField>\n            {isGrafanaRulerRule(rule.rulerRule) && <GrafanaRuleUID rule={rule.rulerRule.grafana_alert} />}\n          </div>\n        </div>\n        <div>\n          <RuleDetailsMatchingInstances\n            rule={rule}\n            pagination={{ itemsPerPage: DEFAULT_PER_PAGE_PAGINATION }}\n            enableFiltering\n          />\n        </div>\n      </RuleViewerLayoutContent>\n      <Collapse\n        label=\"Query & Results\"\n        isOpen={expandQuery}\n        onToggle={setExpandQuery}\n        loading={data && isLoading(data)}\n        collapsible={true}\n        className={styles.collapse}\n      >\n        {isGrafanaRulerRule(rule.rulerRule) && !isFederatedRule && (\n          <GrafanaRuleQueryViewer\n            condition={rule.rulerRule.grafana_alert.condition}\n            queries={queries}\n            evalDataByQuery={data}\n            evalTimeRanges={evaluationTimeRanges}\n            onTimeRangeChange={onQueryTimeRangeChange}\n          />\n        )}\n\n        {!isGrafanaRulerRule(rule.rulerRule) && !isFederatedRule && data && Object.keys(data).length > 0 && (\n          <div className={styles.queries}>\n            {queries.map((query) => {\n              return (\n                <QueryPreview\n                  key={query.refId}\n                  refId={query.refId}\n                  model={query.model}\n                  dataSource={Object.values(config.datasources).find((ds) => ds.uid === query.datasourceUid)}\n                  queryData={data[query.refId]}\n                  relativeTimeRange={query.relativeTimeRange}\n                  evalTimeRange={evaluationTimeRanges[query.refId]}\n                  onEvalTimeRangeChange={(timeRange) => onQueryTimeRangeChange(query.refId, timeRange)}\n                  isAlertCondition={false}\n                />\n              );\n            })}\n          </div>\n        )}\n        {!isFederatedRule && !allDataSourcesAvailable && (\n          <Alert title=\"Query not available\" severity=\"warning\" className={styles.queryWarning}>\n            Cannot display the query preview. Some of the data sources used in the queries are not available.\n          </Alert>\n        )}\n      </Collapse>\n    </RuleViewerLayout>\n  );\n}\n\nfunction GrafanaRuleUID({ rule }: { rule: GrafanaRuleDefinition }) {\n  const styles = useStyles2(getStyles);\n  const copyUID = () => navigator.clipboard && navigator.clipboard.writeText(rule.uid);\n\n  return (\n    <DetailsField label=\"Rule UID\" childrenWrapperClassName={styles.ruleUid}>\n      {rule.uid} <IconButton name=\"copy\" onClick={copyUID} />\n    </DetailsField>\n  );\n}\n\nfunction isLoading(data: Record<string, PanelData>): boolean {\n  return !!Object.values(data).find((d) => d.state === LoadingState.Loading);\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n    queries: css`\n      height: 100%;\n      width: 100%;\n    `,\n    collapse: css`\n      margin-top: ${theme.spacing(2)};\n      border-color: ${theme.colors.border.weak};\n      border-radius: ${theme.shape.borderRadius()};\n    `,\n    queriesTitle: css`\n      padding: ${theme.spacing(2, 0.5)};\n      font-size: ${theme.typography.h5.fontSize};\n      font-weight: ${theme.typography.fontWeightBold};\n      font-family: ${theme.typography.h5.fontFamily};\n    `,\n    query: css`\n      border-bottom: 1px solid ${theme.colors.border.medium};\n      padding: ${theme.spacing(2)};\n    `,\n    queryWarning: css`\n      margin: ${theme.spacing(4, 0)};\n    `,\n    title: css`\n      font-size: ${theme.typography.h4.fontSize};\n      font-weight: ${theme.typography.fontWeightBold};\n\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n    `,\n    details: css`\n      display: flex;\n      flex-direction: row;\n      gap: ${theme.spacing(4)};\n    `,\n    leftSide: css`\n      flex: 1;\n    `,\n    rightSide: css`\n      padding-right: ${theme.spacing(3)};\n\n      max-width: 360px;\n      word-break: break-all;\n      overflow: hidden;\n    `,\n    rightSideDetails: css`\n      & > div:first-child {\n        width: auto;\n      }\n    `,\n    labels: css`\n      justify-content: flex-start;\n    `,\n    ruleUid: css`\n      display: flex;\n      align-items: center;\n      gap: ${theme.spacing(1)};\n    `,\n  };\n};\n\nexport default withErrorBoundary(RuleViewer, { style: 'page' });\n","import React from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize = ({ actions, children, fallback = true }: React.PropsWithChildren<Props>) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, NavModelItem } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\ntype Props = {\n  children: React.ReactNode | React.ReactNode[];\n  title: string;\n  wrapInContent?: boolean;\n};\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'bell',\n  id: 'alert-rule-view',\n  breadcrumbs: [{ title: 'Alert rules', url: 'alerting/list' }],\n};\n\nexport function RuleViewerLayout(props: Props): JSX.Element | null {\n  const { wrapInContent = true, children, title } = props;\n  const styles = useStyles2(getPageStyles);\n\n  return (\n    <Page pageNav={{ ...defaultPageNav, text: title }} navId=\"alert-list\">\n      <Page.Contents>\n        <div className={styles.content}>{wrapInContent ? <RuleViewerLayoutContent {...props} /> : children}</div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\ntype ContentProps = {\n  children: React.ReactNode | React.ReactNode[];\n  padding?: number;\n};\n\nexport function RuleViewerLayoutContent({ children, padding = 2 }: ContentProps): JSX.Element | null {\n  const styles = useStyles2(getContentStyles(padding));\n  return <div className={styles.wrapper}>{children}</div>;\n}\n\nconst getPageStyles = (theme: GrafanaTheme2) => {\n  return {\n    content: css`\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n  };\n};\n\nconst getContentStyles = (padding: number) => (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n      border-radius: ${theme.shape.borderRadius()};\n      padding: ${theme.spacing(padding)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Rule } from 'app/types/unified-alerting';\n\ninterface Prom {\n  rule: Rule;\n}\n\nexport const RuleHealth = ({ rule }: Prom) => {\n  const style = useStyles2(getStyle);\n\n  if (rule.health === 'err' || rule.health === 'error') {\n    return (\n      <Tooltip theme=\"error\" content={rule.lastError || 'No error message provided.'}>\n        <div className={style.warn}>\n          <Icon name=\"exclamation-triangle\" />\n          <span>error</span>\n        </div>\n      </Tooltip>\n    );\n  }\n\n  return <>{rule.health}</>;\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  warn: css`\n    display: inline-flex;\n    flex-direction: row;\n    align-items: center;\n    gap: ${theme.spacing(1)};\n\n    color: ${theme.colors.warning.text};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Spinner, useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { isAlertingRule, isRecordingRule, getFirstActiveAt } from '../../utils/rules';\n\nimport { AlertStateTag } from './AlertStateTag';\n\ninterface Props {\n  rule: CombinedRule;\n  isDeleting: boolean;\n  isCreating: boolean;\n  isPaused?: boolean;\n}\n\nexport const RuleState = ({ rule, isDeleting, isCreating, isPaused }: Props) => {\n  const style = useStyles2(getStyle);\n  const { promRule } = rule;\n\n  // return how long the rule has been in its firing state, if any\n  const forTime = useMemo(() => {\n    if (\n      promRule &&\n      isAlertingRule(promRule) &&\n      promRule.alerts?.length &&\n      promRule.state !== PromAlertingRuleState.Inactive\n    ) {\n      // find earliest alert\n      const firstActiveAt = promRule.activeAt ? new Date(promRule.activeAt) : getFirstActiveAt(promRule);\n\n      // calculate time elapsed from earliest alert\n      if (firstActiveAt) {\n        return (\n          <span title={String(firstActiveAt)} className={style.for}>\n            for{' '}\n            {intervalToAbbreviatedDurationString(\n              {\n                start: firstActiveAt,\n                end: new Date(),\n              },\n              false\n            )}\n          </span>\n        );\n      }\n    }\n    return null;\n  }, [promRule, style]);\n\n  if (isDeleting) {\n    return (\n      <Stack gap={1}>\n        <Spinner />\n        Deleting\n      </Stack>\n    );\n  } else if (isCreating) {\n    return (\n      <Stack gap={1}>\n        <Spinner />\n        Creating\n      </Stack>\n    );\n  } else if (promRule && isAlertingRule(promRule)) {\n    return (\n      <Stack gap={1}>\n        <AlertStateTag state={promRule.state} isPaused={isPaused} />\n        {forTime}\n      </Stack>\n    );\n  } else if (promRule && isRecordingRule(promRule)) {\n    return <>Recording rule</>;\n  }\n  return <>n/a</>;\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  for: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n    white-space: nowrap;\n    padding-top: 2px;\n  `,\n});\n","import { useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { useDispatch } from 'app/types';\nimport { CombinedRule, RuleIdentifier, RuleNamespace } from 'app/types/unified-alerting';\nimport { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { fetchPromAndRulerRulesAction } from '../state/actions';\nimport { AsyncRequestMapSlice, AsyncRequestState, initialAsyncRequestState } from '../utils/redux';\nimport * as ruleId from '../utils/rule-id';\nimport { isRulerNotSupportedResponse } from '../utils/rules';\n\nimport { useCombinedRuleNamespaces } from './useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useCombinedRule(\n  identifier: RuleIdentifier | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rule = useMemo(() => {\n    if (!identifier || !ruleSourceName || combinedRules.length === 0) {\n      return;\n    }\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          const id = ruleId.fromCombinedRule(ruleSourceName, rule);\n\n          if (ruleId.equal(id, identifier)) {\n            return rule;\n          }\n        }\n      }\n    }\n\n    return;\n  }, [identifier, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rule,\n  };\n}\n\nexport function useCombinedRulesMatching(\n  ruleName: string | undefined,\n  ruleSourceName: string | undefined\n): AsyncRequestState<CombinedRule[]> {\n  const requestState = useCombinedRulesLoader(ruleSourceName);\n  const combinedRules = useCombinedRuleNamespaces(ruleSourceName);\n\n  const rules = useMemo(() => {\n    if (!ruleName || !ruleSourceName || combinedRules.length === 0) {\n      return [];\n    }\n\n    const rules: CombinedRule[] = [];\n\n    for (const namespace of combinedRules) {\n      for (const group of namespace.groups) {\n        for (const rule of group.rules) {\n          if (rule.name === ruleName) {\n            rules.push(rule);\n          }\n        }\n      }\n    }\n\n    return rules;\n  }, [ruleName, ruleSourceName, combinedRules]);\n\n  return {\n    ...requestState,\n    result: rules,\n  };\n}\n\nfunction useCombinedRulesLoader(rulesSourceName: string | undefined): AsyncRequestState<void> {\n  const dispatch = useDispatch();\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const promRuleRequest = getRequestState(rulesSourceName, promRuleRequests);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const rulerRuleRequest = getRequestState(rulesSourceName, rulerRuleRequests);\n\n  const { loading } = useAsync(async () => {\n    if (!rulesSourceName) {\n      return;\n    }\n\n    await dispatch(fetchPromAndRulerRulesAction({ rulesSourceName }));\n  }, [dispatch, rulesSourceName]);\n\n  return {\n    loading,\n    error: promRuleRequest.error ?? isRulerNotSupportedResponse(rulerRuleRequest) ? undefined : rulerRuleRequest.error,\n    dispatched: promRuleRequest.dispatched && rulerRuleRequest.dispatched,\n  };\n}\n\nfunction getRequestState(\n  ruleSourceName: string | undefined,\n  slice: AsyncRequestMapSlice<RulerRulesConfigDTO | RuleNamespace[] | null>\n): AsyncRequestState<RulerRulesConfigDTO | RuleNamespace[] | null> {\n  if (!ruleSourceName) {\n    return initialAsyncRequestState;\n  }\n\n  const state = slice[ruleSourceName];\n\n  if (!state) {\n    return initialAsyncRequestState;\n  }\n\n  return state;\n}\n"],"names":["headerHeight","RuleViewerVisualization","data","model","thresholds","dsSettings","relativeTimeRange","onTimeRangeChange","className","styles","getStyles","isExpression","onTimeChange","newDateTime","now","interval","setDateTime","relativeTimeRangeTo","DateTimePicker","Authorize","createExploreLink","VizWrapper","settings","name","refId","rest","url","config","theme","GrafanaRuleQueryViewer","queries","condition","evalDataByQuery","evalTimeRanges","dsByUid","ds","dataQueries","q","expressions","getExpressionViewerStyles","datasourceUid","index","dataSource","QueryPreview","timeRange","ExpressionPreview","queryData","evalTimeRange","onEvalTimeRangeChange","getQueryPreviewStyles","headerItems","QueryBox","evalData","isAlertCondition","renderPreview","MathExpressionViewer","ReduceConditionViewer","ResampleExpressionViewer","ClassicConditionViewer","ThresholdExpressionViewer","Expression","children","getQueryBoxStyles","item","Badge","getClassicConditionViewerStyles","reducerFunctions","alertDef","rt","evalOperators","eo","evalFunctions","ef","query","operator","reducer","evaluator","isRange","isRangeEvaluator","getCommonQueryStyles","getReduceConditionViewerStyles","expression","reducerType","reducerMode","modeName","rm","getResampleExpressionViewerStyles","window","downsampler","upsampler","downsamplerType","dt","upsamplerType","ut","conditions","thresholdFunction","tf","blue","bold","common","RuleDetailsFederatedSources","group","sourceTenants","DetailsField","tenant","alertRuleToQueries","combinedRule","namespace","rulerRule","rulesSource","cloudAlertRuleToModel","dataQueryToAlertQuery","dataQuery","dataSourceUid","rule","errorMessage","errorTitle","pageTitle","RuleViewer","match","expandQuery","setExpandQuery","useToggle","id","identifier","loading","error","useCombinedRule","runner","AlertingQueryRunner","useObservable","annotations","evaluationTimeRanges","setEvaluationTimeRanges","allDataSourcesAvailable","useAlertQueriesStatus","onRunQueries","evalCustomizedQueries","alertQueries","defaultEvalTimeRanges","onQueryTimeRangeChange","newEvalTimeRanges","draft","RuleViewerLayout","Alert","LoadingPlaceholder","isFederatedRule","isProvisioned","Button","Provisioning","Icon","RuleState","RuleDetailsActionButtons","RuleHealth","AlertLabels","RuleDetailsExpression","RuleDetailsAnnotations","RuleDetailsDataSources","GrafanaRuleUID","RuleDetailsMatchingInstances","Collapse","isLoading","copyUID","IconButton","d","actions","fallback","action","ProvisionedResource","ProvisioningAlert","resource","ProvisioningBadge","defaultPageNav","props","wrapInContent","title","getPageStyles","RuleViewerLayoutContent","padding","getContentStyles","style","getStyle","isDeleting","isCreating","isPaused","promRule","forTime","firstActiveAt","ruleSourceName","requestState","useCombinedRulesLoader","combinedRules","useCombinedRulesMatching","ruleName","rules","rulesSourceName","dispatch","promRuleRequests","state","promRuleRequest","getRequestState","rulerRuleRequests","rulerRuleRequest","slice"],"sourceRoot":""}