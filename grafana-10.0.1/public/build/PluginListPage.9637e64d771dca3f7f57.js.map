{"version":3,"file":"PluginListPage.9637e64d771dca3f7f57.js","mappings":"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","sources":["webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginDisabledBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/sharedStyles.ts","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginInstallBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginEnterpriseBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginUpdateAvailableBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItemBadges.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginLogo.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItem.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginList.tsx","webpack://grafana/./public/app/features/plugins/admin/components/SearchField.tsx","webpack://grafana/./public/app/features/plugins/admin/hooks/useHistory.tsx","webpack://grafana/./public/app/features/plugins/admin/pages/Browse.tsx"],"sourcesContent":["import React from 'react';\n\nimport { PluginErrorCode } from '@grafana/data';\nimport { Badge } from '@grafana/ui';\n\ntype Props = { error?: PluginErrorCode };\n\nexport function PluginDisabledBadge({ error }: Props): React.ReactElement {\n  const tooltip = errorCodeToTooltip(error);\n  return <Badge icon=\"exclamation-triangle\" text=\"Disabled\" color=\"red\" tooltip={tooltip} />;\n}\n\nfunction errorCodeToTooltip(error?: PluginErrorCode): string | undefined {\n  switch (error) {\n    case PluginErrorCode.modifiedSignature:\n      return 'Plugin disabled due to modified content';\n    case PluginErrorCode.invalidSignature:\n      return 'Plugin disabled due to invalid plugin signature';\n    case PluginErrorCode.missingSignature:\n      return 'Plugin disabled due to missing plugin signature';\n    case null:\n    case undefined:\n      return 'Plugin disabled';\n    default:\n      return `Plugin disabled due to unknown error${error ? `: ${error}` : ''}`;\n  }\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getBadgeColor = (theme: GrafanaTheme2) => css`\n  background: ${theme.colors.background.primary};\n  border-color: ${theme.colors.border.strong};\n  color: ${theme.colors.text.secondary};\n`;\n","import React from 'react';\n\nimport { Badge, useStyles2 } from '@grafana/ui';\n\nimport { getBadgeColor } from './sharedStyles';\n\nexport function PluginInstalledBadge(): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n  return <Badge text=\"Installed\" color=\"orange\" className={customBadgeStyles} />;\n}\n","import React from 'react';\n\nimport { featureEnabled } from '@grafana/runtime';\nimport { Badge, Button, HorizontalGroup, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../../types';\n\nimport { getBadgeColor } from './sharedStyles';\n\ntype Props = { plugin: CatalogPlugin };\n\nexport function PluginEnterpriseBadge({ plugin }: Props): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n  const onClick = (ev: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    ev.preventDefault();\n    window.open(\n      `https://grafana.com/grafana/plugins/${plugin.id}?utm_source=grafana_catalog_learn_more`,\n      '_blank',\n      'noopener,noreferrer'\n    );\n  };\n\n  if (featureEnabled('enterprise.plugins')) {\n    return <Badge text=\"Enterprise\" color=\"blue\" />;\n  }\n\n  return (\n    <HorizontalGroup>\n      <PluginSignatureBadge status={plugin.signature} />\n      <Badge icon=\"lock\" aria-label=\"lock icon\" text=\"Enterprise\" color=\"blue\" className={customBadgeStyles} />\n      <Button size=\"sm\" fill=\"text\" icon=\"external-link-alt\" onClick={onClick}>\n        Learn more\n      </Button>\n    </HorizontalGroup>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, PluginType } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../../types';\n\ntype Props = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginUpdateAvailableBadge({ plugin }: Props): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n\n  // Currently renderer plugins are not supported by the catalog due to complications related to installation / update / uninstall.\n  if (plugin.hasUpdate && !plugin.isCore && plugin.type !== PluginType.renderer) {\n    return <p className={styles.hasUpdate}>Update available!</p>;\n  }\n\n  return null;\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    hasUpdate: css`\n      color: ${theme.colors.text.secondary};\n      font-size: ${theme.typography.bodySmall.fontSize};\n      margin-bottom: 0;\n    `,\n  };\n};\n","import React from 'react';\n\nimport { HorizontalGroup, PluginSignatureBadge } from '@grafana/ui';\n\nimport { CatalogPlugin } from '../types';\n\nimport { PluginEnterpriseBadge, PluginDisabledBadge, PluginInstalledBadge, PluginUpdateAvailableBadge } from './Badges';\n\ntype PluginBadgeType = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginListItemBadges({ plugin }: PluginBadgeType) {\n  if (plugin.isEnterprise) {\n    return (\n      <HorizontalGroup height=\"auto\" wrap>\n        <PluginEnterpriseBadge plugin={plugin} />\n        {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n        <PluginUpdateAvailableBadge plugin={plugin} />\n      </HorizontalGroup>\n    );\n  }\n\n  return (\n    <HorizontalGroup height=\"auto\" wrap>\n      <PluginSignatureBadge status={plugin.signature} />\n      {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n      {plugin.isInstalled && <PluginInstalledBadge />}\n      <PluginUpdateAvailableBadge plugin={plugin} />\n    </HorizontalGroup>\n  );\n}\n","import React from 'react';\n\ntype PluginLogoProps = {\n  alt: string;\n  className?: string;\n  src: string;\n  height?: string | number;\n};\n\nexport function PluginLogo({ alt, className, src, height }: PluginLogoProps): React.ReactElement {\n  // @ts-ignore - react doesn't know about loading attr.\n  return <img src={src} className={className} alt={alt} loading=\"lazy\" height={height} />;\n}\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin, PluginIconName, PluginListDisplayMode } from '../types';\n\nimport { PluginListItemBadges } from './PluginListItemBadges';\nimport { PluginLogo } from './PluginLogo';\n\nexport const LOGO_SIZE = '48px';\n\ntype Props = {\n  plugin: CatalogPlugin;\n  pathName: string;\n  displayMode?: PluginListDisplayMode;\n};\n\nexport function PluginListItem({ plugin, pathName, displayMode = PluginListDisplayMode.Grid }: Props) {\n  const styles = useStyles2(getStyles);\n  const isList = displayMode === PluginListDisplayMode.List;\n\n  return (\n    <a href={`${pathName}/${plugin.id}`} className={cx(styles.container, { [styles.list]: isList })}>\n      <PluginLogo src={plugin.info.logos.small} className={styles.pluginLogo} height={LOGO_SIZE} alt=\"\" />\n      <h2 className={cx(styles.name, 'plugin-name')}>{plugin.name}</h2>\n      <div className={cx(styles.content, 'plugin-content')}>\n        <p>By {plugin.orgName}</p>\n        <PluginListItemBadges plugin={plugin} />\n      </div>\n      <div className={styles.pluginType}>\n        {plugin.type && <Icon name={PluginIconName[plugin.type]} title={`${plugin.type} plugin`} />}\n      </div>\n    </a>\n  );\n}\n\n// Styles shared between the different type of list items\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: grid;\n      grid-template-columns: ${LOGO_SIZE} 1fr ${theme.spacing(3)};\n      grid-template-rows: auto;\n      gap: ${theme.spacing(2)};\n      grid-auto-flow: row;\n      background: ${theme.colors.background.secondary};\n      border-radius: ${theme.shape.borderRadius()};\n      padding: ${theme.spacing(3)};\n      transition: ${theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {\n        duration: theme.transitions.duration.short,\n      })};\n\n      &:hover {\n        background: ${theme.colors.emphasize(theme.colors.background.secondary, 0.03)};\n      }\n    `,\n    list: css`\n      row-gap: 0px;\n\n      > img {\n        align-self: start;\n      }\n\n      > .plugin-content {\n        min-height: 0px;\n        grid-area: 2 / 2 / 4 / 3;\n\n        > p {\n          margin: ${theme.spacing(0, 0, 0.5, 0)};\n        }\n      }\n\n      > .plugin-name {\n        align-self: center;\n        grid-area: 1 / 2 / 2 / 3;\n      }\n    `,\n    pluginType: css`\n      grid-area: 1 / 3 / 2 / 4;\n      color: ${theme.colors.text.secondary};\n    `,\n    pluginLogo: css`\n      grid-area: 1 / 1 / 3 / 2;\n      max-width: 100%;\n      align-self: center;\n      object-fit: contain;\n    `,\n    content: css`\n      grid-area: 3 / 1 / 4 / 3;\n      color: ${theme.colors.text.secondary};\n    `,\n    name: css`\n      grid-area: 1 / 2 / 3 / 3;\n      align-self: center;\n      font-size: ${theme.typography.h4.fontSize};\n      color: ${theme.colors.text.primary};\n      margin: 0;\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { CatalogPlugin, PluginListDisplayMode } from '../types';\n\nimport { PluginListItem } from './PluginListItem';\n\ninterface Props {\n  plugins: CatalogPlugin[];\n  displayMode: PluginListDisplayMode;\n}\n\nexport const PluginList = ({ plugins, displayMode }: Props) => {\n  const isList = displayMode === PluginListDisplayMode.List;\n  const styles = useStyles2(getStyles);\n  const { pathname } = useLocation();\n  const pathName = config.appSubUrl + (pathname.endsWith('/') ? pathname.slice(0, -1) : pathname);\n\n  return (\n    <div className={cx(styles.container, { [styles.list]: isList })} data-testid=\"plugin-list\">\n      {plugins.map((plugin) => (\n        <PluginListItem key={plugin.id} plugin={plugin} pathName={pathName} displayMode={displayMode} />\n      ))}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: grid;\n      grid-template-columns: repeat(auto-fill, minmax(288px, 1fr));\n      gap: ${theme.spacing(3)};\n    `,\n    list: css`\n      grid-template-columns: 1fr;\n    `,\n  };\n};\n","import React, { useState, useRef } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { FilterInput } from '@grafana/ui';\n\ninterface Props {\n  value?: string;\n  onSearch: (value: string) => void;\n}\n\n// useDebounce has a bug which causes it to fire on first render. This wrapper prevents that.\n// https://github.com/streamich/react-use/issues/759\nconst useDebounceWithoutFirstRender = (callBack: () => any, delay = 0, deps: React.DependencyList = []) => {\n  const isFirstRender = useRef(true);\n  const debounceDeps = [...deps, isFirstRender];\n\n  return useDebounce(\n    () => {\n      if (isFirstRender.current) {\n        isFirstRender.current = false;\n        return;\n      }\n      return callBack();\n    },\n    delay,\n    debounceDeps\n  );\n};\n\nexport const SearchField = ({ value, onSearch }: Props) => {\n  const [query, setQuery] = useState(value);\n\n  useDebounceWithoutFirstRender(() => onSearch(query ?? ''), 500, [query]);\n\n  return (\n    <FilterInput\n      value={query}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n          onSearch(e.currentTarget.value);\n        }\n      }}\n      placeholder=\"Search Grafana plugins\"\n      onChange={(value) => {\n        setQuery(value);\n      }}\n      width={46}\n    />\n  );\n};\n","import { locationService } from '@grafana/runtime';\n\nexport const useHistory = () => {\n  return {\n    push: ({ query }: any) => {\n      locationService.partial(query);\n    },\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { ReactElement } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { SelectableValue, GrafanaTheme2, PluginType } from '@grafana/data';\nimport { config, locationSearchToObject } from '@grafana/runtime';\nimport { LoadingPlaceholder, Select, RadioButtonGroup, useStyles2, Tooltip, Field } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { ROUTES as CONNECTIONS_ROUTES } from 'app/features/connections/constants';\nimport { useSelector } from 'app/types';\n\nimport { HorizontalGroup } from '../components/HorizontalGroup';\nimport { PluginList } from '../components/PluginList';\nimport { SearchField } from '../components/SearchField';\nimport { Sorters } from '../helpers';\nimport { useHistory } from '../hooks/useHistory';\nimport { useGetAll, useIsRemotePluginsAvailable, useDisplayMode } from '../state/hooks';\nimport { PluginListDisplayMode } from '../types';\n\nexport default function Browse({ route }: GrafanaRouteComponentProps): ReactElement | null {\n  const location = useLocation();\n  const locationSearch = locationSearchToObject(location.search);\n  const navModel = useSelector((state) => getNavModel(state.navIndex, 'plugins'));\n  const { displayMode, setDisplayMode } = useDisplayMode();\n  const styles = useStyles2(getStyles);\n  const history = useHistory();\n  const remotePluginsAvailable = useIsRemotePluginsAvailable();\n  const keyword = (locationSearch.q as string) || '';\n  const filterBy = (locationSearch.filterBy as string) || 'installed';\n  const filterByType = (locationSearch.filterByType as PluginType | 'all') || 'all';\n  const sortBy = (locationSearch.sortBy as Sorters) || Sorters.nameAsc;\n  const { isLoading, error, plugins } = useGetAll(\n    {\n      keyword,\n      type: filterByType !== 'all' ? filterByType : undefined,\n      isInstalled: filterBy === 'installed' ? true : undefined,\n      isCore: filterBy === 'installed' ? undefined : false, // We only would like to show core plugins when the user filters to installed plugins\n    },\n    sortBy\n  );\n  const filterByOptions = [\n    { value: 'all', label: 'All' },\n    { value: 'installed', label: 'Installed' },\n  ];\n\n  const onSortByChange = (value: SelectableValue<string>) => {\n    history.push({ query: { sortBy: value.value } });\n  };\n\n  const onFilterByChange = (value: string) => {\n    history.push({ query: { filterBy: value } });\n  };\n\n  const onFilterByTypeChange = (value: SelectableValue<string>) => {\n    history.push({ query: { filterByType: value.value } });\n  };\n\n  const onSearch = (q: string) => {\n    history.push({ query: { filterBy, filterByType, q } });\n  };\n\n  // How should we handle errors?\n  if (error) {\n    console.error(error.message);\n    return null;\n  }\n\n  const subTitle = config.featureToggles.dataConnectionsConsole ? (\n    <div>\n      Extend the Grafana experience with panel plugins and apps. To find more data sources go to{' '}\n      <a className=\"external-link\" href={`${CONNECTIONS_ROUTES.AddNewConnection}?cat=data-source`}>\n        Connections\n      </a>\n      .\n    </div>\n  ) : (\n    <div>Extend the Grafana experience with panel plugins and apps.</div>\n  );\n\n  return (\n    <Page navModel={navModel} subTitle={subTitle}>\n      <Page.Contents>\n        <HorizontalGroup wrap>\n          <Field label=\"Search\">\n            <SearchField value={keyword} onSearch={onSearch} />\n          </Field>\n          <HorizontalGroup wrap className={styles.actionBar}>\n            {/* Filter by type */}\n            <Field label=\"Type\">\n              <Select\n                aria-label=\"Plugin type filter\"\n                value={filterByType}\n                onChange={onFilterByTypeChange}\n                width={18}\n                options={[\n                  { value: 'all', label: 'All' },\n                  { value: 'datasource', label: 'Data sources' },\n                  { value: 'panel', label: 'Panels' },\n                  { value: 'app', label: 'Applications' },\n                ]}\n              />\n            </Field>\n\n            {/* Filter by installed / all */}\n            {remotePluginsAvailable ? (\n              <Field label=\"State\">\n                <RadioButtonGroup value={filterBy} onChange={onFilterByChange} options={filterByOptions} />\n              </Field>\n            ) : (\n              <Tooltip\n                content=\"This filter has been disabled because the Grafana server cannot access grafana.com\"\n                placement=\"top\"\n              >\n                <div>\n                  <Field label=\"State\">\n                    <RadioButtonGroup\n                      disabled={true}\n                      value={filterBy}\n                      onChange={onFilterByChange}\n                      options={filterByOptions}\n                    />\n                  </Field>\n                </div>\n              </Tooltip>\n            )}\n\n            {/* Sorting */}\n            <Field label=\"Sort\">\n              <Select\n                aria-label=\"Sort Plugins List\"\n                width={24}\n                value={sortBy}\n                onChange={onSortByChange}\n                options={[\n                  { value: 'nameAsc', label: 'By name (A-Z)' },\n                  { value: 'nameDesc', label: 'By name (Z-A)' },\n                  { value: 'updated', label: 'By updated date' },\n                  { value: 'published', label: 'By published date' },\n                  { value: 'downloads', label: 'By downloads' },\n                ]}\n              />\n            </Field>\n\n            {/* Display mode */}\n            <Field label=\"View\">\n              <RadioButtonGroup<PluginListDisplayMode>\n                className={styles.displayAs}\n                value={displayMode}\n                onChange={setDisplayMode}\n                options={[\n                  {\n                    value: PluginListDisplayMode.Grid,\n                    icon: 'table',\n                    description: 'Display plugins in a grid layout',\n                  },\n                  { value: PluginListDisplayMode.List, icon: 'list-ul', description: 'Display plugins in list' },\n                ]}\n              />\n            </Field>\n          </HorizontalGroup>\n        </HorizontalGroup>\n        <div className={styles.listWrap}>\n          {isLoading ? (\n            <LoadingPlaceholder\n              className={css`\n                margin-bottom: 0;\n              `}\n              text=\"Loading results\"\n            />\n          ) : (\n            <PluginList plugins={plugins} displayMode={displayMode} />\n          )}\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  actionBar: css`\n    ${theme.breakpoints.up('xl')} {\n      margin-left: auto;\n    }\n  `,\n  listWrap: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  displayAs: css`\n    svg {\n      margin-right: 0;\n    }\n  `,\n});\n"],"names":["PluginDisabledBadge","error","tooltip","errorCodeToTooltip","Badge","getBadgeColor","theme","PluginInstalledBadge","customBadgeStyles","PluginEnterpriseBadge","plugin","onClick","ev","PluginSignatureBadge","Button","PluginUpdateAvailableBadge","styles","getStyles","PluginListItemBadges","PluginLogo","alt","className","src","height","LOGO_SIZE","PluginListItem","pathName","displayMode","isList","Icon","PluginList","plugins","pathname","config","useDebounceWithoutFirstRender","callBack","delay","deps","isFirstRender","debounceDeps","useDebounce","SearchField","value","onSearch","query","setQuery","FilterInput","e","useHistory","Browse","route","location","locationSearch","navModel","state","setDisplayMode","history","remotePluginsAvailable","keyword","filterBy","filterByType","sortBy","isLoading","filterByOptions","onSortByChange","onFilterByChange","onFilterByTypeChange","q","subTitle","Page","HorizontalGroup","Field","Select","RadioButtonGroup","Tooltip","LoadingPlaceholder"],"sourceRoot":""}