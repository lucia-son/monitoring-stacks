{"version":3,"file":"prometheusPlugin.2abe41df3c379d5be8bc.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/operationUtils.ts","webpack://grafana/./public/app/plugins/datasource/loki/querybuilder/types.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/QueryPattern.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/QueryPatternsModal.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/state.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/FeedbackLink.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/styles.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/LetterSearch.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/ResultsTable.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/state/state.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/state/helpers.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/uFuzzy.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/metrics-modal/MetricsModal.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/MetricSelect.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/LabelFilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/LabelFilters.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/NestedQuery.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/NestedQueryList.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilder.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/QueryPreview.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderContainer.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromExemplarField.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromExploreExtraField.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryLegendEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderOptions.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryEditorSelector.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryEditorForAlerting.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/components/PromQueryEditorByApp.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AlertingSettingsOverhaul.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentials.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentialsConfig.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentialsForm.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureAuthSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ExemplarSetting.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ExemplarsSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/PromFlavorVersions.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/PromSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/module.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/types.ts"],"sourcesContent":["import { LabelParamEditor } from '../../prometheus/querybuilder/components/LabelParamEditor';\nimport {\n  getAggregationExplainer,\n  getLastLabelRemovedHandler,\n  getOnLabelAddedHandler,\n  getPromAndLokiOperationDisplayName,\n} from '../../prometheus/querybuilder/shared/operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  VisualQueryModeller,\n} from '../../prometheus/querybuilder/shared/types';\nimport { FUNCTIONS } from '../syntax';\n\nimport { LokiOperationId, LokiOperationOrder, LokiVisualQuery, LokiVisualQueryOperationCategory } from './types';\n\nexport function createRangeOperation(name: string, isRangeOperationWithGrouping?: boolean): QueryBuilderOperationDef {\n  const params = [getRangeVectorParamDef()];\n  const defaultParams = ['$__interval'];\n  let paramChangedHandler = undefined;\n\n  if (name === LokiOperationId.QuantileOverTime) {\n    defaultParams.push('0.95');\n    params.push({\n      name: 'Quantile',\n      type: 'number',\n    });\n  }\n\n  if (isRangeOperationWithGrouping) {\n    params.push({\n      name: 'By label',\n      type: 'string',\n      restParam: true,\n      optional: true,\n    });\n\n    paramChangedHandler = getOnLabelAddedHandler(`__${name}_by`);\n  }\n\n  return {\n    id: name,\n    name: getPromAndLokiOperationDisplayName(name),\n    params: params,\n    defaultParams,\n    alternativesKey: 'range function',\n    category: LokiVisualQueryOperationCategory.RangeFunctions,\n    orderRank: LokiOperationOrder.RangeVectorFunction,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addLokiOperation,\n    paramChangedHandler,\n    explainHandler: (op, def) => {\n      let opDocs = FUNCTIONS.find((x) => x.insertText === op.id)?.documentation ?? '';\n\n      if (op.params[0] === '$__interval') {\n        return `${opDocs} \\`$__interval\\` is a variable that will be replaced with the [calculated interval](https://grafana.com/docs/grafana/latest/dashboards/variables/add-template-variables/#__interval) based on the time range and width of the graph. In Dashboards, you can affect the interval variable using **Max data points** and **Min interval**. You can find these options under **Query options** right of the data source select dropdown.`;\n      } else {\n        return `${opDocs} The [range vector](https://grafana.com/docs/loki/latest/logql/metric_queries/#range-vector-aggregation) is set to \\`${op.params[0]}\\`.`;\n      }\n    },\n  };\n}\n\nexport function createRangeOperationWithGrouping(name: string): QueryBuilderOperationDef[] {\n  const rangeOperation = createRangeOperation(name, true);\n  // Copy range operation params without the last param\n  const params = rangeOperation.params.slice(0, -1);\n  const operations: QueryBuilderOperationDef[] = [\n    rangeOperation,\n    {\n      id: `__${name}_by`,\n      name: `${getPromAndLokiOperationDisplayName(name)} by`,\n      params: [\n        ...params,\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [...rangeOperation.defaultParams, ''],\n      alternativesKey: 'range function with grouping',\n      category: LokiVisualQueryOperationCategory.RangeFunctions,\n      renderer: getRangeAggregationWithGroupingRenderer(name, 'by'),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'by'),\n      addOperationHandler: addLokiOperation,\n      hideFromList: true,\n    },\n    {\n      id: `__${name}_without`,\n      name: `${getPromAndLokiOperationDisplayName(name)} without`,\n      params: [\n        ...params,\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [...rangeOperation.defaultParams, ''],\n      alternativesKey: 'range function with grouping',\n      category: LokiVisualQueryOperationCategory.RangeFunctions,\n      renderer: getRangeAggregationWithGroupingRenderer(name, 'without'),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'without'),\n      addOperationHandler: addLokiOperation,\n      hideFromList: true,\n    },\n  ];\n\n  return operations;\n}\n\nexport function getRangeAggregationWithGroupingRenderer(aggregation: string, grouping: 'by' | 'without') {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    const restParamIndex = def.params.findIndex((param) => param.restParam);\n    const params = model.params.slice(0, restParamIndex);\n    const restParams = model.params.slice(restParamIndex);\n\n    if (params.length === 2 && aggregation === LokiOperationId.QuantileOverTime) {\n      return `${aggregation}(${params[1]}, ${innerExpr} [${params[0]}]) ${grouping} (${restParams.join(', ')})`;\n    }\n\n    return `${aggregation}(${innerExpr} [${params[0]}]) ${grouping} (${restParams.join(', ')})`;\n  };\n}\n\nfunction operationWithRangeVectorRenderer(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  const params = model.params ?? [];\n  const rangeVector = params[0] ?? '$__interval';\n  // QuantileOverTime is only range vector with more than one param\n  if (params.length === 2 && model.id === LokiOperationId.QuantileOverTime) {\n    const quantile = params[1];\n    return `${model.id}(${quantile}, ${innerExpr} [${rangeVector}])`;\n  }\n\n  return `${model.id}(${innerExpr} [${params[0] ?? '$__interval'}])`;\n}\n\nexport function labelFilterRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  const integerOperators = ['<', '<=', '>', '>='];\n\n  if (integerOperators.includes(String(model.params[1]))) {\n    return `${innerExpr} | ${model.params[0]} ${model.params[1]} ${model.params[2]}`;\n  }\n\n  return `${innerExpr} | ${model.params[0]} ${model.params[1]} \\`${model.params[2]}\\``;\n}\n\nexport function isConflictingFilter(\n  operation: QueryBuilderOperation,\n  queryOperations: QueryBuilderOperation[]\n): boolean {\n  const operationIsNegative = operation.params[1].toString().startsWith('!');\n\n  const candidates = queryOperations.filter(\n    (queryOperation) =>\n      queryOperation.id === LokiOperationId.LabelFilter &&\n      queryOperation.params[0] === operation.params[0] &&\n      queryOperation.params[2] === operation.params[2]\n  );\n\n  const conflict = candidates.some((candidate) => {\n    if (operationIsNegative && candidate.params[1].toString().startsWith('!') === false) {\n      return true;\n    }\n    if (operationIsNegative === false && candidate.params[1].toString().startsWith('!')) {\n      return true;\n    }\n    return false;\n  });\n\n  return conflict;\n}\n\nexport function pipelineRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  return `${innerExpr} | ${model.id}`;\n}\n\nfunction isRangeVectorFunction(def: QueryBuilderOperationDef) {\n  return def.category === LokiVisualQueryOperationCategory.RangeFunctions;\n}\n\nfunction getIndexOfOrLast(\n  operations: QueryBuilderOperation[],\n  queryModeller: VisualQueryModeller,\n  condition: (def: QueryBuilderOperationDef) => boolean\n) {\n  const index = operations.findIndex((x) => {\n    const opDef = queryModeller.getOperationDef(x.id);\n    if (!opDef) {\n      return false;\n    }\n    return condition(opDef);\n  });\n\n  return index === -1 ? operations.length : index;\n}\n\nexport function addLokiOperation(\n  def: QueryBuilderOperationDef,\n  query: LokiVisualQuery,\n  modeller: VisualQueryModeller\n): LokiVisualQuery {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  const operations = [...query.operations];\n\n  const existingRangeVectorFunction = operations.find((x) => {\n    const opDef = modeller.getOperationDef(x.id);\n    if (!opDef) {\n      return false;\n    }\n    return isRangeVectorFunction(opDef);\n  });\n\n  switch (def.category) {\n    case LokiVisualQueryOperationCategory.Aggregations:\n    case LokiVisualQueryOperationCategory.Functions:\n      // If we are adding a function but we have not range vector function yet add one\n      if (!existingRangeVectorFunction) {\n        const placeToInsert = getIndexOfOrLast(\n          operations,\n          modeller,\n          (def) => def.category === LokiVisualQueryOperationCategory.Functions\n        );\n        operations.splice(placeToInsert, 0, { id: LokiOperationId.Rate, params: ['$__interval'] });\n      }\n      operations.push(newOperation);\n      break;\n    case LokiVisualQueryOperationCategory.RangeFunctions:\n      // If adding a range function and range function is already added replace it\n      if (existingRangeVectorFunction) {\n        const index = operations.indexOf(existingRangeVectorFunction);\n        operations[index] = newOperation;\n        break;\n      }\n\n    // Add range functions after any formats, line filters and label filters\n    default:\n      const placeToInsert = getIndexOfOrLast(\n        operations,\n        modeller,\n        (x) => (def.orderRank ?? 100) < (x.orderRank ?? 100)\n      );\n      operations.splice(placeToInsert, 0, newOperation);\n      break;\n  }\n\n  return {\n    ...query,\n    operations,\n  };\n}\n\nexport function addNestedQueryHandler(def: QueryBuilderOperationDef, query: LokiVisualQuery): LokiVisualQuery {\n  return {\n    ...query,\n    binaryQueries: [\n      ...(query.binaryQueries ?? []),\n      {\n        operator: '/',\n        query,\n      },\n    ],\n  };\n}\n\nexport function getLineFilterRenderer(operation: string, caseInsensitive?: boolean) {\n  return function lineFilterRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    if (caseInsensitive) {\n      return `${innerExpr} ${operation} \\`(?i)${model.params[0]}\\``;\n    }\n    return `${innerExpr} ${operation} \\`${model.params[0]}\\``;\n  };\n}\n\nfunction getRangeVectorParamDef(): QueryBuilderOperationParamDef {\n  return {\n    name: 'Range',\n    type: 'string',\n    options: ['$__interval', '$__range', '1m', '5m', '10m', '1h', '24h'],\n  };\n}\n","import { VisualQueryBinary } from '../../prometheus/querybuilder/shared/LokiAndPromQueryModellerBase';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from '../../prometheus/querybuilder/shared/types';\n\n/**\n * Visual query model\n */\nexport interface LokiVisualQuery {\n  labels: QueryBuilderLabelFilter[];\n  operations: QueryBuilderOperation[];\n  binaryQueries?: LokiVisualQueryBinary[];\n}\n\nexport type LokiVisualQueryBinary = VisualQueryBinary<LokiVisualQuery>;\nexport enum LokiQueryPatternType {\n  Log = 'log',\n  Metric = 'metric',\n}\n\nexport interface LokiQueryPattern {\n  name: string;\n  operations: QueryBuilderOperation[];\n  type: LokiQueryPatternType;\n}\n\nexport enum LokiVisualQueryOperationCategory {\n  Aggregations = 'Aggregations',\n  RangeFunctions = 'Range functions',\n  Functions = 'Functions',\n  Formats = 'Formats',\n  LineFilters = 'Line filters',\n  LabelFilters = 'Label filters',\n  BinaryOps = 'Binary operations',\n}\n\nexport enum LokiOperationId {\n  Json = 'json',\n  Logfmt = 'logfmt',\n  Regexp = 'regexp',\n  Pattern = 'pattern',\n  Unpack = 'unpack',\n  LineFormat = 'line_format',\n  LabelFormat = 'label_format',\n  Rate = 'rate',\n  RateCounter = 'rate_counter',\n  CountOverTime = 'count_over_time',\n  SumOverTime = 'sum_over_time',\n  AvgOverTime = 'avg_over_time',\n  MaxOverTime = 'max_over_time',\n  MinOverTime = 'min_over_time',\n  FirstOverTime = 'first_over_time',\n  LastOverTime = 'last_over_time',\n  StdvarOverTime = 'stdvar_over_time',\n  StddevOverTime = 'stddev_over_time',\n  QuantileOverTime = 'quantile_over_time',\n  BytesRate = 'bytes_rate',\n  BytesOverTime = 'bytes_over_time',\n  AbsentOverTime = 'absent_over_time',\n  Sum = 'sum',\n  Avg = 'avg',\n  Min = 'min',\n  Max = 'max',\n  Stddev = 'stddev',\n  Stdvar = 'stdvar',\n  Count = 'count',\n  TopK = 'topk',\n  BottomK = 'bottomk',\n  LineContains = '__line_contains',\n  LineContainsNot = '__line_contains_not',\n  LineContainsCaseInsensitive = '__line_contains_case_insensitive',\n  LineContainsNotCaseInsensitive = '__line_contains_not_case_insensitive',\n  LineMatchesRegex = '__line_matches_regex',\n  LineMatchesRegexNot = '__line_matches_regex_not',\n  LineFilterIpMatches = '__line_filter_ip_matches',\n  LabelFilter = '__label_filter',\n  LabelFilterNoErrors = '__label_filter_no_errors',\n  LabelFilterIpMatches = '__label_filter_ip_marches',\n  Unwrap = 'unwrap',\n  SumBy = '__sum_by',\n  SumWithout = '__sum_without',\n  // Binary ops\n  Addition = '__addition',\n  Subtraction = '__subtraction',\n  MultiplyBy = '__multiply_by',\n  DivideBy = '__divide_by',\n  Modulo = '__modulo',\n  Exponent = '__exponent',\n  NestedQuery = '__nested_query',\n  EqualTo = '__equal_to',\n  NotEqualTo = '__not_equal_to',\n  GreaterThan = '__greater_than',\n  LessThan = '__less_than',\n  GreaterOrEqual = '__greater_or_equal',\n  LessOrEqual = '__less_or_equal',\n}\n\nexport enum LokiOperationOrder {\n  LineFilters = 1,\n  LineFormats = 2,\n  LabelFilters = 3,\n  Unwrap = 4,\n  NoErrors = 5,\n  RangeVectorFunction = 5,\n  Last = 6,\n}\n\nexport const lokiOperators = {\n  equals: { label: '=', value: '=', description: 'Equals', isMultiValue: false },\n  doesNotEqual: { label: '!=', value: '!=', description: 'Does not equal', isMultiValue: false },\n  matchesRegex: { label: '=~', value: '=~', description: 'Matches regex', isMultiValue: true },\n  doesNotMatchRegex: { label: '!~', value: '!~', description: 'Does not match regex', isMultiValue: true },\n  greaterThan: { label: '>', value: '>', description: 'Greater than', isMultiValue: false },\n  greaterThanOrEqual: { label: '>=', value: '>=', description: 'Greater than or equal to', isMultiValue: false },\n  lessThan: { label: '<', value: '<', description: 'Less than', isMultiValue: false },\n  lessThanOrEqual: { label: '<=', value: '<=', description: 'Less than or equal to', isMultiValue: false },\n  contains: { label: '|=', value: '|=', description: 'Contains', isMultiValue: false },\n  doesNotContain: { label: '!=', value: '!=', description: 'Does not contain', isMultiValue: false },\n};\n","import React from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport { PromQuery } from '../types';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Request Rate',\n    expression: 'rate(http_request_total[5m])',\n    label:\n      'Given an HTTP request counter, this query calculates the per-second average request rate over the last 5 minutes.',\n  },\n  {\n    title: '95th Percentile of Request Latencies',\n    expression: 'histogram_quantile(0.95, sum(rate(prometheus_http_request_duration_seconds_bucket[5m])) by (le))',\n    label: 'Calculates the 95th percentile of HTTP request rate over 5 minute windows.',\n  },\n  {\n    title: 'Alerts Firing',\n    expression: 'sort_desc(sum(sum_over_time(ALERTS{alertstate=\"firing\"}[24h])) by (alertname))',\n    label: 'Sums up the alerts that have been firing over the last 24 hours.',\n  },\n  {\n    title: 'Step',\n    label:\n      'Defines the graph resolution using a duration format (15s, 1m, 3h, ...). Small steps create high-resolution graphs but can be slow over larger time ranges. Using a longer step lowers the resolution and smooths the graph by producing fewer datapoints. If no step is given the resolution is calculated automatically.',\n  },\n];\n\nconst PromCheatSheet = (props: QueryEditorHelpProps<PromQuery>) => (\n  <div>\n    <h2>PromQL Cheat Sheet</h2>\n    {CHEAT_SHEET_ITEMS.map((item, index) => (\n      <div className=\"cheat-sheet-item\" key={index}>\n        <div className=\"cheat-sheet-item__title\">{item.title}</div>\n        {item.expression ? (\n          <button\n            type=\"button\"\n            className=\"cheat-sheet-item__example\"\n            onClick={(e) => props.onClickExample({ refId: 'A', expr: item.expression })}\n          >\n            <code>{item.expression}</code>\n          </button>\n        ) : null}\n        <div className=\"cheat-sheet-item__label\">{item.label}</div>\n      </div>\n    ))}\n  </div>\n);\n\nexport default PromCheatSheet;\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, useStyles2 } from '@grafana/ui';\nimport { RawQuery } from 'app/plugins/datasource/prometheus/querybuilder/shared/RawQuery';\n\nimport promqlGrammar from '../promql';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { PromQueryPattern } from './types';\n\ntype Props = {\n  pattern: PromQueryPattern;\n  hasNewQueryOption: boolean;\n  hasPreviousQuery: boolean | string;\n  selectedPatternName: string | null;\n  setSelectedPatternName: (name: string | null) => void;\n  onPatternSelect: (pattern: PromQueryPattern, selectAsNewQuery?: boolean) => void;\n};\n\nexport const QueryPattern = (props: Props) => {\n  const { pattern, onPatternSelect, hasNewQueryOption, hasPreviousQuery, selectedPatternName, setSelectedPatternName } =\n    props;\n\n  const styles = useStyles2(getStyles);\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  return (\n    <Card className={styles.card}>\n      <Card.Heading>{pattern.name}</Card.Heading>\n      <div className={styles.rawQueryContainer}>\n        <RawQuery\n          aria-label={`${pattern.name} raw query`}\n          query={promQueryModeller.renderQuery({\n            labels: [],\n            operations: pattern.operations,\n            binaryQueries: pattern.binaryQueries,\n          })}\n          lang={lang}\n          className={styles.rawQuery}\n        />\n      </div>\n      <Card.Actions>\n        {selectedPatternName !== pattern.name ? (\n          <Button\n            size=\"sm\"\n            aria-label=\"use this query button\"\n            onClick={() => {\n              if (hasPreviousQuery) {\n                // If user has previous query, we need to confirm that they want to apply this query pattern\n                setSelectedPatternName(pattern.name);\n              } else {\n                onPatternSelect(pattern);\n              }\n            }}\n          >\n            Use this query\n          </Button>\n        ) : (\n          <>\n            <div className={styles.spacing}>\n              {`If you would like to use this query, ${\n                hasNewQueryOption\n                  ? 'you can either apply this query pattern or create a new query'\n                  : 'this query pattern will be applied to your current query'\n              }.`}\n            </div>\n            <Button size=\"sm\" aria-label=\"back button\" fill=\"outline\" onClick={() => setSelectedPatternName(null)}>\n              Back\n            </Button>\n            <Button\n              size=\"sm\"\n              aria-label=\"apply query starter button\"\n              onClick={() => {\n                onPatternSelect(pattern);\n              }}\n            >\n              Apply query\n            </Button>\n            {hasNewQueryOption && (\n              <Button\n                size=\"sm\"\n                aria-label=\"create new query button\"\n                onClick={() => {\n                  onPatternSelect(pattern, true);\n                }}\n              >\n                Create new query\n              </Button>\n            )}\n          </>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css`\n      width: 49.5%;\n      display: flex;\n      flex-direction: column;\n    `,\n    rawQueryContainer: css`\n      flex-grow: 1;\n    `,\n    rawQuery: css`\n      background-color: ${theme.colors.background.primary};\n      padding: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(1)};\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport React, { useMemo, useState } from 'react';\n\nimport { CoreApp, DataQuery, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Collapse, Modal, useStyles2 } from '@grafana/ui';\nimport { getNextRefIdChar } from 'app/core/utils/query';\n\nimport { PromQuery } from '../types';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { QueryPattern } from './QueryPattern';\nimport { buildVisualQueryFromString } from './parsing';\nimport { PromQueryPattern, PromQueryPatternType } from './types';\n\ntype Props = {\n  isOpen: boolean;\n  query: PromQuery;\n  queries: DataQuery[] | undefined;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: PromQuery) => void;\n  onAddQuery?: (query: PromQuery) => void;\n};\n\nexport const QueryPatternsModal = (props: Props) => {\n  const { isOpen, onClose, onChange, onAddQuery, query, queries, app } = props;\n  const [openTabs, setOpenTabs] = useState<string[]>([]);\n  const [selectedPatternName, setSelectedPatternName] = useState<string | null>(null);\n\n  const styles = useStyles2(getStyles);\n  const hasNewQueryOption = !!onAddQuery;\n  const hasPreviousQuery = useMemo(() => {\n    const visualQuery = buildVisualQueryFromString(query.expr ?? '');\n    // has anything entered in the query, metric, labels, operations, or binary queries\n    const hasOperations = visualQuery.query.operations.length > 0,\n      hasMetric = visualQuery.query.metric,\n      hasLabels = visualQuery.query.labels.length > 0,\n      hasBinaryQueries = visualQuery.query.binaryQueries ? visualQuery.query.binaryQueries.length > 0 : false;\n\n    return hasOperations || hasMetric || hasLabels || hasBinaryQueries;\n  }, [query.expr]);\n\n  const onPatternSelect = (pattern: PromQueryPattern, selectAsNewQuery = false) => {\n    const visualQuery = buildVisualQueryFromString(selectAsNewQuery ? '' : query.expr);\n    reportInteraction('grafana_prom_kickstart_your_query_selected', {\n      app: app ?? '',\n      editorMode: query.editorMode,\n      selectedPattern: pattern.name,\n      preSelectedOperationsCount: visualQuery.query.operations.length,\n      preSelectedLabelsCount: visualQuery.query.labels.length,\n      createNewQuery: hasNewQueryOption && selectAsNewQuery,\n    });\n\n    visualQuery.query.operations = pattern.operations;\n    visualQuery.query.binaryQueries = pattern.binaryQueries;\n    if (hasNewQueryOption && selectAsNewQuery) {\n      onAddQuery({\n        ...query,\n        refId: getNextRefIdChar(queries ?? [query]),\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    } else {\n      onChange({\n        ...query,\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    }\n    setSelectedPatternName(null);\n    onClose();\n  };\n\n  return (\n    <Modal aria-label=\"Kick start your query modal\" isOpen={isOpen} title=\"Kick start your query\" onDismiss={onClose}>\n      <div className={styles.spacing}>\n        Kick start your query by selecting one of these queries. You can then continue to complete your query.\n      </div>\n      {Object.values(PromQueryPatternType).map((patternType) => {\n        return (\n          <Collapse\n            aria-label={`open and close ${patternType} query starter card`}\n            key={patternType}\n            label={`${capitalize(patternType)} query starters`}\n            isOpen={openTabs.includes(patternType)}\n            collapsible={true}\n            onToggle={() =>\n              setOpenTabs((tabs) =>\n                // close tab if it's already open, otherwise open it\n                tabs.includes(patternType) ? tabs.filter((t) => t !== patternType) : [...tabs, patternType]\n              )\n            }\n          >\n            <div className={styles.cardsContainer}>\n              {promQueryModeller\n                .getQueryPatterns()\n                .filter((pattern) => pattern.type === patternType)\n                .map((pattern) => (\n                  <QueryPattern\n                    key={pattern.name}\n                    pattern={pattern}\n                    hasNewQueryOption={hasNewQueryOption}\n                    hasPreviousQuery={hasPreviousQuery}\n                    onPatternSelect={onPatternSelect}\n                    selectedPatternName={selectedPatternName}\n                    setSelectedPatternName={setSelectedPatternName}\n                  />\n                ))}\n            </div>\n          </Collapse>\n        );\n      })}\n      <Button aria-label=\"close kick start your query modal\" variant=\"secondary\" onClick={onClose}>\n        Close\n      </Button>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardsContainer: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: space-between;\n    `,\n    spacing: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import { CoreApp } from '@grafana/data';\nimport store from 'app/core/store';\n\nimport { LegendFormatMode, PromQuery } from '../types';\n\nimport { QueryEditorMode } from './shared/types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'PrometheusQueryEditorModeDefault';\n\nexport function changeEditorMode(query: PromQuery, editorMode: QueryEditorMode, onChange: (query: PromQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nfunction getDefaultEditorMode(expr: string, defaultEditor: QueryEditorMode = QueryEditorMode.Builder): QueryEditorMode {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value: QueryEditorMode = store.get(queryEditorModeDefaultLocalStorageKey);\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n      return value;\n    default:\n      return defaultEditor;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(\n  query: PromQuery,\n  app: CoreApp | undefined,\n  defaultEditor?: QueryEditorMode\n): PromQuery {\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr, defaultEditor) };\n  }\n\n  if (query.expr == null) {\n    result = { ...result, expr: '', legendFormat: LegendFormatMode.Auto };\n  }\n\n  if (query.range == null && query.instant == null) {\n    // Default to range query\n    result = { ...result, range: true };\n\n    // In explore we default to both instant & range\n    if (app === CoreApp.Explore) {\n      result.instant = true;\n    }\n  }\n\n  // Unified Alerting does not support \"both\" for query type – fall back to \"range\".\n  const isBothInstantAndRange = query.instant && query.range;\n  if (app === CoreApp.UnifiedAlerting && isBothInstantAndRange) {\n    result = { ...result, instant: false, range: true };\n  }\n\n  return result;\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  feedbackUrl?: string;\n}\n\nexport function FeedbackLink({ feedbackUrl }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack gap={1}>\n      <a\n        href={feedbackUrl}\n        className={styles.link}\n        title=\"The Metrics Modal is new, please let us know how we can improve it\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        <Icon name=\"comment-alt-message\" /> Give feedback\n      </a>\n    </Stack>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    link: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      ':hover': {\n        color: theme.colors.text.link,\n      },\n    }),\n  };\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getStyles = (theme: GrafanaTheme2, disableTextWrap: boolean) => {\n  return {\n    modal: css`\n      width: 85vw;\n      ${theme.breakpoints.down('md')} {\n        width: 100%;\n      }\n      ${theme.breakpoints.up('xl')} {\n        width: 60%;\n      }\n    `,\n    inputWrapper: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      gap: ${theme.spacing(2)};\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    inputItemFirst: css`\n      flex-basis: 40%;\n    `,\n    inputItem: css`\n      flex-grow: 1;\n      flex-basis: 20%;\n      ${theme.breakpoints.down('md')} {\n        min-width: 100%;\n      }\n    `,\n    selectWrapper: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    selectItem: css`\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n    `,\n    selectItemLabel: css`\n      margin: 0 0 0 ${theme.spacing(1)};\n      align-self: center;\n      color: ${theme.colors.text.secondary};\n    `,\n    resultsHeading: css`\n      margin: 0 0 0 0;\n    `,\n    resultsData: css`\n      margin: 0 0 ${theme.spacing(1)} 0;\n    `,\n    resultsDataCount: css`\n      margin: 0;\n    `,\n    resultsDataFiltered: css`\n      margin: 0;\n      color: ${theme.colors.warning.text};\n    `,\n    alphabetRow: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: space-between;\n      align-items: center;\n      column-gap: ${theme.spacing(1)};\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    alphabetRowToggles: css`\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      flex-wrap: wrap;\n      column-gap: ${theme.spacing(1)};\n    `,\n    results: css`\n      height: calc(80vh - 280px);\n      overflow-y: scroll;\n    `,\n    pageSettingsWrapper: css`\n      padding-top: ${theme.spacing(1.5)};\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      justify-content: space-between;\n      align-items: center;\n      position: sticky;\n    `,\n    pageSettings: css`\n      display: flex;\n      flex-direction: row;\n      flex-wrap: wrap;\n      align-items: center;\n    `,\n    selAlpha: css`\n      cursor: pointer;\n      color: #6e9fff;\n    `,\n    active: css`\n      cursor: pointer;\n    `,\n    gray: css`\n      color: grey;\n      opacity: 50%;\n    `,\n    loadingSpinner: css`\n      display: inline-block;\n      visibility: hidden;\n    `,\n    table: css`\n      white-space: ${disableTextWrap ? 'nowrap' : 'normal'};\n      td {\n        vertical-align: baseline;\n        padding: 0;\n      }\n    `,\n    tableDiv: css`\n      padding: 8px;\n    `,\n    visible: css`\n      visibility: visible;\n    `,\n  };\n};\n","import React from 'react';\n\nimport { useTheme2 } from '@grafana/ui';\n\nimport { getStyles } from './styles';\nimport { MetricData, MetricsData } from './types';\n\nexport type LetterSearchProps = {\n  filteredMetrics: MetricsData;\n  disableTextWrap: boolean;\n  updateLetterSearch: (letter: string) => void;\n  letterSearch: string | null;\n};\n\nexport function LetterSearch(props: LetterSearchProps) {\n  const { filteredMetrics, disableTextWrap, updateLetterSearch, letterSearch } = props;\n\n  const alphabetDictionary = alphabetCheck();\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, disableTextWrap);\n\n  filteredMetrics.forEach((m: MetricData, idx: number) => {\n    const metricFirstLetter = m.value[0].toUpperCase();\n\n    if (alphabet.includes(metricFirstLetter) && !alphabetDictionary[metricFirstLetter]) {\n      alphabetDictionary[metricFirstLetter] += 1;\n    }\n  });\n\n  // return the alphabet components with the correct style and behavior\n  return (\n    <div>\n      {Object.keys(alphabetDictionary).map((letter: string) => {\n        const active: boolean = alphabetDictionary[letter] > 0;\n        // starts with letter search\n        // filter by starts with letter\n        // if same letter searched null out remove letter search\n        function setLetterSearch() {\n          updateLetterSearch(letter);\n        }\n        // selected letter to filter by\n        const selectedClass: string = letterSearch === letter ? styles.selAlpha : '';\n        // these letters are represented in the list of metrics\n        const activeClass: string = active ? styles.active : styles.gray;\n\n        return (\n          <span\n            onClick={active ? setLetterSearch : () => {}}\n            className={`${selectedClass} ${activeClass}`}\n            key={letter}\n            data-testid={'letter-' + letter}\n          >\n            {letter + ' '}\n            {/* {idx !== coll.length - 1 ? '|': ''} */}\n          </span>\n        );\n      })}\n    </div>\n  );\n}\n\nexport const alphabet = [...'ABCDEFGHIJKLMNOPQRSTUVWXYZ'];\n\nfunction alphabetCheck(): { [char: string]: number } {\n  const check: { [char: string]: number } = {};\n\n  alphabet.forEach((char) => (check[char] = 0));\n\n  return check;\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useRef } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { PromVisualQuery } from '../../types';\n\nimport { MetricsModalState } from './state/state';\nimport { MetricData, MetricsData } from './types';\n\ntype ResultsTableProps = {\n  metrics: MetricsData;\n  onChange: (query: PromVisualQuery) => void;\n  onClose: () => void;\n  query: PromVisualQuery;\n  state: MetricsModalState;\n  selectedIdx: number;\n  disableTextWrap: boolean;\n};\n\nexport function ResultsTable(props: ResultsTableProps) {\n  const { metrics, onChange, onClose, query, state, selectedIdx, disableTextWrap } = props;\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, disableTextWrap);\n\n  const tableRef = useRef<HTMLTableElement | null>(null);\n\n  function isSelectedRow(idx: number): boolean {\n    return idx === selectedIdx;\n  }\n\n  function selectMetric(metric: MetricData) {\n    if (metric.value) {\n      onChange({ ...query, metric: metric.value });\n      reportInteraction('grafana_prom_metric_encycopedia_tracking', {\n        metric: metric.value,\n        hasMetadata: state.hasMetadata,\n        totalMetricCount: state.totalMetricCount,\n        fuzzySearchQuery: state.fuzzySearchQuery,\n        fullMetaSearch: state.fullMetaSearch,\n        selectedTypes: state.selectedTypes,\n        letterSearch: state.letterSearch,\n      });\n      onClose();\n    }\n  }\n\n  useEffect(() => {\n    const tr = tableRef.current?.getElementsByClassName('selected-row')[0];\n    tr?.scrollIntoView({ block: 'nearest', inline: 'nearest' });\n  }, [selectedIdx]);\n\n  function metaRows(metric: MetricData) {\n    if (state.fullMetaSearch && metric) {\n      return (\n        <>\n          <td>\n            <Highlighter\n              textToHighlight={metric.type ?? ''}\n              searchWords={state.metaHaystackMatches}\n              autoEscape\n              highlightClassName={styles.matchHighLight}\n            />\n          </td>\n          <td>\n            <Highlighter\n              textToHighlight={metric.description ?? ''}\n              searchWords={state.metaHaystackMatches}\n              autoEscape\n              highlightClassName={styles.matchHighLight}\n            />\n          </td>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <td>{metric.type ?? ''}</td>\n          <td>{metric.description ?? ''}</td>\n        </>\n      );\n    }\n  }\n\n  return (\n    <table className={styles.table} ref={tableRef}>\n      <thead>\n        <tr className={styles.header}>\n          <th>Name</th>\n          {state.hasMetadata && (\n            <>\n              <th>Type</th>\n              <th>Description</th>\n            </>\n          )}\n        </tr>\n      </thead>\n      <tbody>\n        <>\n          {metrics &&\n            metrics.map((metric: MetricData, idx: number) => {\n              return (\n                <tr\n                  key={metric?.value ?? idx}\n                  className={`${styles.row} ${isSelectedRow(idx) ? `${styles.selectedRow} selected-row` : ''}`}\n                  onClick={() => selectMetric(metric)}\n                >\n                  <td>\n                    <Highlighter\n                      textToHighlight={metric?.value ?? ''}\n                      searchWords={state.fullMetaSearch ? state.metaHaystackMatches : state.nameHaystackMatches}\n                      autoEscape\n                      highlightClassName={styles.matchHighLight}\n                    />\n                  </td>\n                  {state.hasMetadata && metaRows(metric)}\n                </tr>\n              );\n            })}\n        </>\n      </tbody>\n    </table>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2, disableTextWrap: boolean) => {\n  const rowHoverBg = theme.colors.emphasize(theme.colors.background.primary, 0.03);\n\n  return {\n    table: css`\n      border-radius: ${theme.shape.borderRadius()};\n      width: 100%;\n      white-space: ${disableTextWrap ? 'nowrap' : 'normal'};\n      td {\n        padding: ${theme.spacing(1)};\n      }\n\n      td,\n      th {\n        min-width: ${theme.spacing(3)};\n      }\n    `,\n    header: css`\n      border-bottom: 1px solid ${theme.colors.border.weak};\n    `,\n    row: css`\n      label: row;\n      cursor: pointer;\n      border-bottom: 1px solid ${theme.colors.border.weak}\n      &:last-child {\n        border-bottom: 0;\n      }\n      :hover {\n        background-color: ${rowHoverBg};\n      }\n    `,\n    selectedRow: css`\n      background-color: ${rowHoverBg};\n    `,\n    matchHighLight: css`\n      background: inherit;\n      color: ${theme.components.textHighlight.text};\n      background-color: ${theme.components.textHighlight.background};\n    `,\n  };\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { PromVisualQuery } from '../../../types';\nimport { HaystackDictionary, MetricsData } from '../types';\n\nexport const DEFAULT_RESULTS_PER_PAGE = 100;\nexport const MAXIMUM_RESULTS_PER_PAGE = 1000;\n\nexport const stateSlice = createSlice({\n  name: 'metrics-modal-state',\n  initialState: initialState(),\n  reducers: {\n    filterMetricsBackend: (\n      state,\n      action: PayloadAction<{\n        metrics: MetricsData;\n        filteredMetricCount: number;\n        isLoading: boolean;\n      }>\n    ) => {\n      state.metrics = action.payload.metrics;\n      state.filteredMetricCount = action.payload.filteredMetricCount;\n      state.isLoading = action.payload.isLoading;\n    },\n    buildMetrics: (state, action: PayloadAction<MetricsModalMetadata>) => {\n      state.isLoading = action.payload.isLoading;\n      state.metrics = action.payload.metrics;\n      state.hasMetadata = action.payload.hasMetadata;\n      state.metaHaystackDictionary = action.payload.metaHaystackDictionary;\n      state.nameHaystackDictionary = action.payload.nameHaystackDictionary;\n      state.totalMetricCount = action.payload.totalMetricCount;\n      state.filteredMetricCount = action.payload.filteredMetricCount;\n    },\n    setIsLoading: (state, action: PayloadAction<boolean>) => {\n      state.isLoading = action.payload;\n    },\n    setFilteredMetricCount: (state, action: PayloadAction<number>) => {\n      state.filteredMetricCount = action.payload;\n    },\n    setResultsPerPage: (state, action: PayloadAction<number>) => {\n      state.resultsPerPage = action.payload;\n    },\n    setPageNum: (state, action: PayloadAction<number>) => {\n      state.pageNum = action.payload;\n    },\n    setFuzzySearchQuery: (state, action: PayloadAction<string>) => {\n      state.fuzzySearchQuery = action.payload;\n      state.pageNum = 1;\n      state.letterSearch = '';\n      state.selectedIdx = 0;\n    },\n    setNameHaystack: (state, action: PayloadAction<string[][]>) => {\n      state.nameHaystackOrder = action.payload[0];\n      state.nameHaystackMatches = action.payload[1];\n    },\n    setMetaHaystack: (state, action: PayloadAction<string[][]>) => {\n      state.metaHaystackOrder = action.payload[0];\n      state.metaHaystackMatches = action.payload[1];\n    },\n    setFullMetaSearch: (state, action: PayloadAction<boolean>) => {\n      state.fullMetaSearch = action.payload;\n      state.pageNum = 1;\n    },\n    setExcludeNullMetadata: (state, action: PayloadAction<boolean>) => {\n      state.excludeNullMetadata = action.payload;\n      state.pageNum = 1;\n    },\n    setSelectedTypes: (state, action: PayloadAction<Array<SelectableValue<string>>>) => {\n      state.selectedTypes = action.payload;\n      state.pageNum = 1;\n    },\n    setLetterSearch: (state, action: PayloadAction<string>) => {\n      state.letterSearch = action.payload;\n      state.pageNum = 1;\n    },\n    setUseBackend: (state, action: PayloadAction<boolean>) => {\n      state.useBackend = action.payload;\n      state.fullMetaSearch = false;\n      state.excludeNullMetadata = false;\n      state.pageNum = 1;\n    },\n    setSelectedIdx: (state, action: PayloadAction<number>) => {\n      state.selectedIdx = action.payload;\n    },\n    setDisableTextWrap: (state) => {\n      state.disableTextWrap = !state.disableTextWrap;\n    },\n    showAdditionalSettings: (state) => {\n      state.showAdditionalSettings = !state.showAdditionalSettings;\n    },\n  },\n});\n\n/**\n * Initial state for the Metrics Modal\n * @returns\n */\nexport function initialState(query?: PromVisualQuery): MetricsModalState {\n  return {\n    isLoading: true,\n    metrics: [],\n    hasMetadata: true,\n    metaHaystackDictionary: {},\n    metaHaystackMatches: [],\n    metaHaystackOrder: [],\n    nameHaystackDictionary: {},\n    nameHaystackOrder: [],\n    nameHaystackMatches: [],\n    totalMetricCount: 0,\n    filteredMetricCount: null,\n    resultsPerPage: DEFAULT_RESULTS_PER_PAGE,\n    pageNum: 1,\n    fuzzySearchQuery: '',\n    fullMetaSearch: query?.fullMetaSearch ?? false,\n    excludeNullMetadata: query?.excludeNullMetadata ?? false,\n    selectedTypes: [],\n    letterSearch: '',\n    useBackend: query?.useBackend ?? false,\n    disableTextWrap: query?.disableTextWrap ?? false,\n    selectedIdx: 0,\n    showAdditionalSettings: false,\n  };\n}\n\n/**\n * The Metrics Modal state object\n */\nexport interface MetricsModalState {\n  /** Used for the loading spinner */\n  isLoading: boolean;\n  /**\n   * Initial collection of metrics.\n   * The frontend filters do not impact this, but\n   * it is reduced by the backend search.\n   */\n  metrics: MetricsData;\n  /** Field for disabling type select and switches that rely on metadata */\n  hasMetadata: boolean;\n  /** Used to display metrics and help with fuzzy order */\n  nameHaystackDictionary: HaystackDictionary;\n  /** Used to sort name fuzzy search by relevance */\n  nameHaystackOrder: string[];\n  /** Used to highlight text in fuzzy matches */\n  nameHaystackMatches: string[];\n  /** Used to display metrics and help with fuzzy order for search across all metadata */\n  metaHaystackDictionary: HaystackDictionary;\n  /** Used to sort meta fuzzy search by relevance */\n  metaHaystackOrder: string[];\n  /** Used to highlight text in fuzzy matches */\n  metaHaystackMatches: string[];\n  /** Total results computed on initialization */\n  totalMetricCount: number;\n  /** Set after filtering metrics */\n  filteredMetricCount: number | null;\n  /** Pagination field for showing results in table */\n  resultsPerPage: number;\n  /** Pagination field */\n  pageNum: number;\n  /** The text query used to match metrics */\n  fuzzySearchQuery: string;\n  /** Enables the fuzzy meatadata search */\n  fullMetaSearch: boolean;\n  /** Excludes results that are missing type and description */\n  excludeNullMetadata: boolean;\n  /** Filter by prometheus type */\n  selectedTypes: Array<SelectableValue<string>>;\n  /** After results are filtered, select a letter to show metrics that start with that letter */\n  letterSearch: string;\n  /** Filter by the series match endpoint instead of the fuzzy search */\n  useBackend: boolean;\n  /** Disable text wrap for descriptions in the results table */\n  disableTextWrap: boolean;\n  /** The selected metric in the table represented by hover style highlighting */\n  selectedIdx: number;\n  /** Display toggle switches for settings */\n  showAdditionalSettings: boolean;\n}\n\n/**\n * Type for the useEffect get metadata function\n */\nexport type MetricsModalMetadata = {\n  isLoading: boolean;\n  metrics: MetricsData;\n  hasMetadata: boolean;\n  metaHaystackDictionary: HaystackDictionary;\n  nameHaystackDictionary: HaystackDictionary;\n  totalMetricCount: number;\n  filteredMetricCount: number | null;\n};\n\n// for updating the settings in the PromQuery model\nexport function getSettings(visQuery: PromVisualQuery): MetricsModalSettings {\n  return {\n    useBackend: visQuery?.useBackend ?? false,\n    disableTextWrap: visQuery?.disableTextWrap ?? false,\n    fullMetaSearch: visQuery?.fullMetaSearch ?? false,\n    excludeNullMetadata: visQuery.excludeNullMetadata ?? false,\n  };\n}\n\nexport type MetricsModalSettings = {\n  useBackend?: boolean;\n  disableTextWrap?: boolean;\n  fullMetaSearch?: boolean;\n  excludeNullMetadata?: boolean;\n};\n","import { AnyAction } from '@reduxjs/toolkit';\n\nimport { PrometheusDatasource } from 'app/plugins/datasource/prometheus/datasource';\nimport { getMetadataHelp, getMetadataType } from 'app/plugins/datasource/prometheus/language_provider';\n\nimport { regexifyLabelValuesQueryString } from '../../../shared/parsingUtils';\nimport { QueryBuilderLabelFilter } from '../../../shared/types';\nimport { PromVisualQuery } from '../../../types';\nimport { HaystackDictionary, MetricData, MetricsData, PromFilterOption } from '../types';\n\nimport { MetricsModalMetadata, MetricsModalState, stateSlice } from './state';\n\nconst { setFilteredMetricCount } = stateSlice.actions;\n\nexport async function setMetrics(\n  datasource: PrometheusDatasource,\n  query: PromVisualQuery,\n  initialMetrics?: string[]\n): Promise<MetricsModalMetadata> {\n  // metadata is set in the metric select now\n  // use this to disable metadata search and display\n  let hasMetadata = true;\n  const metadata = datasource.languageProvider.metricsMetadata;\n  if (metadata && Object.keys(metadata).length === 0) {\n    hasMetadata = false;\n  }\n\n  let nameHaystackDictionaryData: HaystackDictionary = {};\n  let metaHaystackDictionaryData: HaystackDictionary = {};\n\n  // pass in metrics from getMetrics in the query builder, reduced in the metric select\n  let metricsData: MetricsData | undefined;\n\n  metricsData = initialMetrics?.map((m: string) => {\n    const type = getMetadataType(m, datasource.languageProvider.metricsMetadata!);\n    const description = getMetadataHelp(m, datasource.languageProvider.metricsMetadata!);\n\n    // possibly remove the type in favor of the type select\n    const metaDataString = `${m}¦${type}¦${description}`;\n\n    const metricData: MetricData = {\n      value: m,\n      type: type,\n      description: description,\n    };\n\n    nameHaystackDictionaryData[m] = metricData;\n    metaHaystackDictionaryData[metaDataString] = metricData;\n\n    return metricData;\n  });\n\n  return {\n    isLoading: false,\n    hasMetadata: hasMetadata,\n    metrics: metricsData ?? [],\n    metaHaystackDictionary: metaHaystackDictionaryData,\n    nameHaystackDictionary: nameHaystackDictionaryData,\n    totalMetricCount: metricsData?.length ?? 0,\n    filteredMetricCount: metricsData?.length ?? 0,\n  };\n}\n\n/**\n * The filtered and paginated metrics displayed in the modal\n * */\nexport function displayedMetrics(state: MetricsModalState, dispatch: React.Dispatch<AnyAction>) {\n  const filteredSorted: MetricsData = filterMetrics(state);\n\n  if (!state.isLoading && state.filteredMetricCount !== filteredSorted.length) {\n    dispatch(setFilteredMetricCount(filteredSorted.length));\n  }\n\n  return sliceMetrics(filteredSorted, state.pageNum, state.resultsPerPage);\n}\n\n/**\n * Filter the metrics with all the options, fuzzy, type, letter\n * @param metrics\n * @param skipLetterSearch used to show the alphabet letters as clickable before filtering out letters (needs to be refactored)\n * @returns\n */\nexport function filterMetrics(state: MetricsModalState, skipLetterSearch?: boolean): MetricsData {\n  let filteredMetrics: MetricsData = state.metrics;\n\n  if (state.fuzzySearchQuery && !state.useBackend) {\n    if (state.fullMetaSearch) {\n      filteredMetrics = state.metaHaystackOrder.map((needle: string) => state.metaHaystackDictionary[needle]);\n    } else {\n      filteredMetrics = state.nameHaystackOrder.map((needle: string) => state.nameHaystackDictionary[needle]);\n    }\n  }\n\n  if (state.letterSearch && !skipLetterSearch) {\n    filteredMetrics = filteredMetrics.filter((m: MetricData, idx) => {\n      const letters: string[] = [state.letterSearch, state.letterSearch.toLowerCase()];\n      return letters.includes(m.value[0]);\n    });\n  }\n\n  if (state.selectedTypes.length > 0 && !state.useBackend) {\n    filteredMetrics = filteredMetrics.filter((m: MetricData, idx) => {\n      // Matches type\n      const matchesSelectedType = state.selectedTypes.some((t) => t.value === m.type);\n\n      // missing type\n      const hasNoType = !m.type;\n\n      return matchesSelectedType || (hasNoType && !state.excludeNullMetadata);\n    });\n  }\n\n  if (state.excludeNullMetadata) {\n    filteredMetrics = filteredMetrics.filter((m: MetricData) => {\n      return m.type !== undefined && m.description !== undefined;\n    });\n  }\n\n  return filteredMetrics;\n}\n\nexport function calculatePageList(state: MetricsModalState) {\n  if (!state.metrics.length) {\n    return [];\n  }\n\n  const calcResultsPerPage: number = state.resultsPerPage === 0 ? 1 : state.resultsPerPage;\n\n  const pages = Math.floor(filterMetrics(state).length / calcResultsPerPage) + 1;\n\n  return [...Array(pages).keys()].map((i) => i + 1);\n}\n\nexport function sliceMetrics(metrics: MetricsData, pageNum: number, resultsPerPage: number) {\n  const calcResultsPerPage: number = resultsPerPage === 0 ? 1 : resultsPerPage;\n  const start: number = pageNum === 1 ? 0 : (pageNum - 1) * calcResultsPerPage;\n  const end: number = start + calcResultsPerPage;\n  return metrics.slice(start, end);\n}\n\nexport const calculateResultsPerPage = (results: number, defaultResults: number, max: number) => {\n  if (results < 1) {\n    return 1;\n  }\n\n  if (results > max) {\n    return max;\n  }\n\n  return results ?? defaultResults;\n};\n\n/**\n * The backend query that replaces the uFuzzy search when the option 'useBackend' has been selected\n * @param metricText\n * @param labels\n * @param datasource\n * @returns\n */\nexport async function getBackendSearchMetrics(\n  metricText: string,\n  labels: QueryBuilderLabelFilter[],\n  datasource: PrometheusDatasource\n): Promise<Array<{ value: string }>> {\n  const queryString = regexifyLabelValuesQueryString(metricText);\n\n  const labelsParams = labels.map((label) => {\n    return `,${label.label}=\"${label.value}\"`;\n  });\n\n  const params = `label_values({__name__=~\".*${queryString}\"${labels ? labelsParams.join() : ''}},__name__)`;\n\n  const results = datasource.metricFindQuery(params);\n\n  return await results.then((results) => {\n    return results.map((result) => {\n      return {\n        value: result.text,\n      };\n    });\n  });\n}\n\nexport const promTypes: PromFilterOption[] = [\n  {\n    value: 'counter',\n    description:\n      'A cumulative metric that represents a single monotonically increasing counter whose value can only increase or be reset to zero on restart.',\n  },\n  {\n    value: 'gauge',\n    description: 'A metric that represents a single numerical value that can arbitrarily go up and down.',\n  },\n  {\n    value: 'histogram',\n    description:\n      'A histogram samples observations (usually things like request durations or response sizes) and counts them in configurable buckets.',\n  },\n  {\n    value: 'summary',\n    description:\n      'A summary samples observations (usually things like request durations and response sizes) and can calculate configurable quantiles over a sliding time window.',\n  },\n];\n\nexport const placeholders = {\n  browse: 'Search metrics by name',\n  metadataSearchSwitch: 'Search by metadata type and description in addition to name',\n  type: 'Select...',\n  variables: 'Select...',\n  excludeNoMetadata: 'Exclude results with no metadata',\n  setUseBackend: 'Use the backend to browse metrics',\n};\n","import uFuzzy from '@leeoniya/ufuzzy';\nimport { debounce as debounceLodash } from 'lodash';\n\nconst uf = new uFuzzy({\n  intraMode: 1,\n  intraIns: 1,\n  intraSub: 1,\n  intraTrn: 1,\n  intraDel: 1,\n});\n\nexport function fuzzySearch(haystack: string[], query: string, dispatcher: (data: string[][]) => void) {\n  const [idxs, info, order] = uf.search(haystack, query, false, 1e5);\n\n  let haystackOrder: string[] = [];\n  let matchesSet: Set<string> = new Set();\n  if (idxs && order) {\n    /**\n     * get the fuzzy matches for hilighting\n     * @param part\n     * @param matched\n     */\n    const mark = (part: string, matched: boolean) => {\n      if (matched) {\n        matchesSet.add(part);\n      }\n    };\n\n    // Iterate to create the order of needles(queries) and the matches\n    for (let i = 0; i < order.length; i++) {\n      let infoIdx = order[i];\n\n      /** Evaluate the match, get the matches for highlighting */\n      uFuzzy.highlight(haystack[info.idx[infoIdx]], info.ranges[infoIdx], mark);\n      /** Get the order */\n      haystackOrder.push(haystack[info.idx[infoIdx]]);\n    }\n\n    dispatcher([haystackOrder, [...matchesSet]]);\n  }\n}\n\nexport const debouncedFuzzySearch = debounceLodash(fuzzySearch, 300);\n","import { cx } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport React, { useCallback, useEffect, useMemo, useReducer } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { InlineField, Switch, Input, Modal, MultiSelect, Spinner, useTheme2, Pagination, Button } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../../datasource';\nimport { PromVisualQuery } from '../../types';\n\nimport { FeedbackLink } from './FeedbackLink';\nimport { LetterSearch } from './LetterSearch';\nimport { ResultsTable } from './ResultsTable';\nimport {\n  calculatePageList,\n  calculateResultsPerPage,\n  displayedMetrics,\n  filterMetrics,\n  getBackendSearchMetrics,\n  setMetrics,\n  placeholders,\n  promTypes,\n} from './state/helpers';\nimport {\n  DEFAULT_RESULTS_PER_PAGE,\n  initialState,\n  MAXIMUM_RESULTS_PER_PAGE,\n  // MetricsModalReducer,\n  MetricsModalMetadata,\n  stateSlice,\n} from './state/state';\nimport { getStyles } from './styles';\nimport { PromFilterOption } from './types';\nimport { debouncedFuzzySearch } from './uFuzzy';\n\nexport type MetricsModalProps = {\n  datasource: PrometheusDatasource;\n  isOpen: boolean;\n  query: PromVisualQuery;\n  onClose: () => void;\n  onChange: (query: PromVisualQuery) => void;\n  initialMetrics: string[];\n};\n\n// actions\nconst {\n  setIsLoading,\n  buildMetrics,\n  filterMetricsBackend,\n  setResultsPerPage,\n  setPageNum,\n  setFuzzySearchQuery,\n  setNameHaystack,\n  setMetaHaystack,\n  setFullMetaSearch,\n  setExcludeNullMetadata,\n  setSelectedTypes,\n  setLetterSearch,\n  setUseBackend,\n  setSelectedIdx,\n  setDisableTextWrap,\n  showAdditionalSettings,\n} = stateSlice.actions;\n\nexport const MetricsModal = (props: MetricsModalProps) => {\n  const { datasource, isOpen, onClose, onChange, query, initialMetrics } = props;\n\n  const [state, dispatch] = useReducer(stateSlice.reducer, initialState(query));\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, state.disableTextWrap);\n\n  /**\n   * loads metrics and metadata on opening modal and switching off useBackend\n   */\n  const updateMetricsMetadata = useCallback(async () => {\n    // *** Loading Gif\n    dispatch(setIsLoading(true));\n\n    const data: MetricsModalMetadata = await setMetrics(datasource, query, initialMetrics);\n\n    dispatch(\n      buildMetrics({\n        isLoading: false,\n        hasMetadata: data.hasMetadata,\n        metrics: data.metrics,\n        metaHaystackDictionary: data.metaHaystackDictionary,\n        nameHaystackDictionary: data.nameHaystackDictionary,\n        totalMetricCount: data.metrics.length,\n        filteredMetricCount: data.metrics.length,\n      })\n    );\n  }, [query, datasource, initialMetrics]);\n\n  useEffect(() => {\n    updateMetricsMetadata();\n  }, [updateMetricsMetadata]);\n\n  const typeOptions: SelectableValue[] = promTypes.map((t: PromFilterOption) => {\n    return {\n      value: t.value,\n      label: t.value,\n      description: t.description,\n    };\n  });\n\n  /**\n   * The backend debounced search\n   */\n  const debouncedBackendSearch = useMemo(\n    () =>\n      debounce(async (metricText: string) => {\n        dispatch(setIsLoading(true));\n\n        const metrics = await getBackendSearchMetrics(metricText, query.labels, datasource);\n\n        dispatch(\n          filterMetricsBackend({\n            metrics: metrics,\n            filteredMetricCount: metrics.length,\n            isLoading: false,\n          })\n        );\n      }, datasource.getDebounceTimeInMilliseconds()),\n    [datasource, query]\n  );\n\n  function fuzzyNameDispatch(haystackData: string[][]) {\n    dispatch(setNameHaystack(haystackData));\n  }\n\n  function fuzzyMetaDispatch(haystackData: string[][]) {\n    dispatch(setMetaHaystack(haystackData));\n  }\n\n  function fuzzySearchCallback(query: string, fullMetaSearchVal: boolean) {\n    if (state.useBackend && query === '') {\n      // get all metrics data if a user erases everything in the input\n      updateMetricsMetadata();\n    } else if (state.useBackend) {\n      debouncedBackendSearch(query);\n    } else {\n      // search either the names or all metadata\n      // fuzzy search go!\n      if (fullMetaSearchVal) {\n        debouncedFuzzySearch(Object.keys(state.metaHaystackDictionary), query, fuzzyMetaDispatch);\n      } else {\n        debouncedFuzzySearch(Object.keys(state.nameHaystackDictionary), query, fuzzyNameDispatch);\n      }\n    }\n  }\n\n  function keyFunction(e: React.KeyboardEvent<HTMLElement>) {\n    if (e.code === 'ArrowDown' && state.selectedIdx < state.resultsPerPage - 1) {\n      dispatch(setSelectedIdx(state.selectedIdx + 1));\n    } else if (e.code === 'ArrowUp' && state.selectedIdx > 0) {\n      dispatch(setSelectedIdx(state.selectedIdx - 1));\n    } else if (e.code === 'Enter') {\n      const metric = displayedMetrics(state, dispatch)[state.selectedIdx];\n\n      onChange({ ...query, metric: metric.value });\n      reportInteraction('grafana_prom_metric_encycopedia_tracking', {\n        metric: metric.value,\n        hasMetadata: state.hasMetadata,\n        totalMetricCount: state.totalMetricCount,\n        fuzzySearchQuery: state.fuzzySearchQuery,\n        fullMetaSearch: state.fullMetaSearch,\n        selectedTypes: state.selectedTypes,\n        letterSearch: state.letterSearch,\n      });\n      onClose();\n    }\n  }\n\n  return (\n    <Modal\n      data-testid={testIds.metricModal}\n      isOpen={isOpen}\n      title=\"Browse metrics\"\n      onDismiss={onClose}\n      aria-label=\"Browse metrics\"\n      className={styles.modal}\n    >\n      <div className={styles.inputWrapper}>\n        <div className={cx(styles.inputItem, styles.inputItemFirst)}>\n          <EditorField label=\"Search metrics\">\n            <Input\n              autoFocus={true}\n              data-testid={testIds.searchMetric}\n              placeholder={placeholders.browse}\n              value={state.fuzzySearchQuery}\n              onInput={(e) => {\n                const value = e.currentTarget.value ?? '';\n                dispatch(setFuzzySearchQuery(value));\n\n                fuzzySearchCallback(value, state.fullMetaSearch);\n              }}\n              onKeyDown={(e) => {\n                keyFunction(e);\n              }}\n            />\n          </EditorField>\n        </div>\n        <div className={styles.inputItem}>\n          <EditorField label=\"Filter by type\">\n            <MultiSelect\n              data-testid={testIds.selectType}\n              inputId=\"my-select\"\n              options={typeOptions}\n              value={state.selectedTypes}\n              disabled={!state.hasMetadata || state.useBackend}\n              placeholder={placeholders.type}\n              onChange={(v) => {\n                // *** Filter by type\n                // *** always include metrics without metadata but label it as unknown type\n                // Consider tabs select instead of actual select or multi select\n                dispatch(setSelectedTypes(v));\n              }}\n            />\n          </EditorField>\n        </div>\n      </div>\n      {/* <h4 className={styles.resultsHeading}>Results</h4> */}\n      <div className={styles.resultsData}>\n        <div className={styles.resultsDataCount}>\n          Showing {state.filteredMetricCount} of {state.totalMetricCount} results.{' '}\n          <Spinner className={`${styles.loadingSpinner} ${state.isLoading ? styles.visible : ''}`} />\n          <div className={styles.selectWrapper}>\n            <div className={styles.alphabetRow}>\n              <LetterSearch\n                filteredMetrics={filterMetrics(state, true)}\n                disableTextWrap={state.disableTextWrap}\n                updateLetterSearch={(letter: string) => {\n                  if (state.letterSearch === letter) {\n                    dispatch(setLetterSearch(''));\n                  } else {\n                    dispatch(setLetterSearch(letter));\n                  }\n                }}\n                letterSearch={state.letterSearch}\n              />\n              <Button\n                variant=\"secondary\"\n                fill=\"text\"\n                size=\"sm\"\n                onClick={() => dispatch(showAdditionalSettings())}\n                onKeyDown={(e) => {\n                  keyFunction(e);\n                }}\n                data-testid={testIds.showAdditionalSettings}\n              >\n                Additional Settings\n              </Button>\n            </div>\n            {state.showAdditionalSettings && (\n              <>\n                <div className={styles.selectItem}>\n                  <Switch\n                    data-testid={testIds.searchWithMetadata}\n                    value={state.fullMetaSearch}\n                    disabled={state.useBackend || !state.hasMetadata}\n                    onChange={() => {\n                      const newVal = !state.fullMetaSearch;\n                      dispatch(setFullMetaSearch(newVal));\n                      onChange({ ...query, fullMetaSearch: newVal });\n\n                      fuzzySearchCallback(state.fuzzySearchQuery, newVal);\n                    }}\n                    onKeyDown={(e) => {\n                      keyFunction(e);\n                    }}\n                  />\n                  <p className={styles.selectItemLabel}>{placeholders.metadataSearchSwitch}</p>\n                </div>\n                <div className={styles.selectItem}>\n                  <Switch\n                    value={state.excludeNullMetadata}\n                    disabled={state.useBackend || !state.hasMetadata}\n                    onChange={() => {\n                      dispatch(setExcludeNullMetadata(!state.excludeNullMetadata));\n                      onChange({ ...query, excludeNullMetadata: !state.excludeNullMetadata });\n                    }}\n                    onKeyDown={(e) => {\n                      keyFunction(e);\n                    }}\n                  />\n                  <p className={styles.selectItemLabel}>{placeholders.excludeNoMetadata}</p>\n                </div>\n                <div className={styles.selectItem}>\n                  <Switch\n                    value={state.disableTextWrap}\n                    onChange={() => {\n                      dispatch(setDisableTextWrap());\n                      onChange({ ...query, disableTextWrap: !state.disableTextWrap });\n                    }}\n                    onKeyDown={(e) => {\n                      keyFunction(e);\n                    }}\n                  />\n                  <p className={styles.selectItemLabel}>Disable text wrap</p>\n                </div>\n                <div className={styles.selectItem}>\n                  <Switch\n                    data-testid={testIds.setUseBackend}\n                    value={state.useBackend}\n                    onChange={() => {\n                      const newVal = !state.useBackend;\n                      dispatch(setUseBackend(newVal));\n                      onChange({ ...query, useBackend: newVal });\n                      if (newVal === false) {\n                        // rebuild the metrics metadata if we turn off useBackend\n                        updateMetricsMetadata();\n                      } else {\n                        // check if there is text in the browse search and update\n                        if (state.fuzzySearchQuery !== '') {\n                          debouncedBackendSearch(state.fuzzySearchQuery);\n                        }\n                        // otherwise wait for user typing\n                      }\n                    }}\n                    onKeyDown={(e) => {\n                      keyFunction(e);\n                    }}\n                  />\n                  <p className={styles.selectItemLabel}>{placeholders.setUseBackend}</p>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n        {query.labels.length > 0 && (\n          <p className={styles.resultsDataFiltered}>\n            These metrics have been pre-filtered by labels chosen in the label filters.\n          </p>\n        )}\n      </div>\n      <div className={styles.results}>\n        {state.metrics && (\n          <ResultsTable\n            metrics={displayedMetrics(state, dispatch)}\n            onChange={onChange}\n            onClose={onClose}\n            query={query}\n            state={state}\n            selectedIdx={state.selectedIdx}\n            disableTextWrap={state.disableTextWrap}\n          />\n        )}\n      </div>\n\n      <div className={styles.pageSettingsWrapper}>\n        <div className={styles.pageSettings}>\n          <InlineField\n            label=\"# results per page\"\n            tooltip={'The maximum results per page is ' + MAXIMUM_RESULTS_PER_PAGE}\n            labelWidth={20}\n          >\n            <Input\n              data-testid={testIds.resultsPerPage}\n              value={calculateResultsPerPage(state.resultsPerPage, DEFAULT_RESULTS_PER_PAGE, MAXIMUM_RESULTS_PER_PAGE)}\n              placeholder=\"results per page\"\n              width={20}\n              onInput={(e) => {\n                const value = +e.currentTarget.value;\n\n                if (isNaN(value)) {\n                  return;\n                }\n\n                dispatch(setResultsPerPage(value));\n              }}\n            />\n          </InlineField>\n          <Pagination\n            currentPage={state.pageNum ?? 1}\n            numberOfPages={calculatePageList(state).length}\n            onNavigate={(val: number) => {\n              const page = val ?? 1;\n              dispatch(setPageNum(page));\n            }}\n          />\n        </div>\n        <FeedbackLink feedbackUrl=\"https://forms.gle/DEMAJHoAMpe3e54CA\" />\n      </div>\n    </Modal>\n  );\n};\n\nexport const testIds = {\n  metricModal: 'metric-modal',\n  searchMetric: 'search-metric',\n  searchWithMetadata: 'search-with-metadata',\n  selectType: 'select-type',\n  metricCard: 'metric-card',\n  useMetric: 'use-metric',\n  searchPage: 'search-page',\n  resultsPerPage: 'results-per-page',\n  setUseBackend: 'set-use-backend',\n  showAdditionalSettings: 'show-additional-settings',\n};\n","import { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport React, { useCallback, useState } from 'react';\nimport Highlighter from 'react-highlight-words';\n\nimport { GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { AsyncSelect, Button, FormatOptionLabelMeta, useStyles2 } from '@grafana/ui';\nimport { SelectMenuOptions } from '@grafana/ui/src/components/Select/SelectMenu';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { regexifyLabelValuesQueryString } from '../shared/parsingUtils';\nimport { QueryBuilderLabelFilter } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nimport { MetricsModal } from './metrics-modal/MetricsModal';\n\n// We are matching words split with space\nconst splitSeparator = ' ';\n\nexport interface Props {\n  metricLookupDisabled: boolean;\n  query: PromVisualQuery;\n  onChange: (query: PromVisualQuery) => void;\n  onGetMetrics: () => Promise<SelectableValue[]>;\n  datasource: PrometheusDatasource;\n  labelsFilters: QueryBuilderLabelFilter[];\n}\n\nexport const PROMETHEUS_QUERY_BUILDER_MAX_RESULTS = 1000;\n\nconst prometheusMetricEncyclopedia = config.featureToggles.prometheusMetricEncyclopedia;\n\nexport function MetricSelect({\n  datasource,\n  query,\n  onChange,\n  onGetMetrics,\n  labelsFilters,\n  metricLookupDisabled,\n}: Props) {\n  const styles = useStyles2(getStyles);\n  const [state, setState] = useState<{\n    metrics?: Array<SelectableValue<any>>;\n    isLoading?: boolean;\n    metricsModalOpen?: boolean;\n    initialMetrics?: string[];\n  }>({});\n\n  const customFilterOption = useCallback((option: SelectableValue<any>, searchQuery: string) => {\n    const label = option.label ?? option.value;\n    if (!label) {\n      return false;\n    }\n\n    // custom value is not a string label but a react node\n    if (!label.toLowerCase) {\n      return true;\n    }\n\n    const searchWords = searchQuery.split(splitSeparator);\n    return searchWords.reduce((acc, cur) => acc && label.toLowerCase().includes(cur.toLowerCase()), true);\n  }, []);\n\n  const formatOptionLabel = useCallback(\n    (option: SelectableValue<any>, meta: FormatOptionLabelMeta<any>) => {\n      // For newly created custom value we don't want to add highlight\n      if (option['__isNew__']) {\n        return option.label;\n      }\n\n      return (\n        <Highlighter\n          searchWords={meta.inputValue.split(splitSeparator)}\n          textToHighlight={option.label ?? ''}\n          highlightClassName={styles.highlight}\n        />\n      );\n    },\n    [styles.highlight]\n  );\n\n  /**\n   * Reformat the query string and label filters to return all valid results for current query editor state\n   */\n  const formatKeyValueStringsForLabelValuesQuery = (\n    query: string,\n    labelsFilters?: QueryBuilderLabelFilter[]\n  ): string => {\n    const queryString = regexifyLabelValuesQueryString(query);\n\n    return formatPrometheusLabelFiltersToString(queryString, labelsFilters);\n  };\n\n  /**\n   * Gets label_values response from prometheus API for current autocomplete query string and any existing labels filters\n   */\n  const getMetricLabels = (query: string) => {\n    // Since some customers can have millions of metrics, whenever the user changes the autocomplete text we want to call the backend and request all metrics that match the current query string\n    const results = datasource.metricFindQuery(formatKeyValueStringsForLabelValuesQuery(query, labelsFilters));\n    return results.then((results) => {\n      if (results.length > PROMETHEUS_QUERY_BUILDER_MAX_RESULTS) {\n        results.splice(0, results.length - PROMETHEUS_QUERY_BUILDER_MAX_RESULTS);\n      }\n      return results.map((result) => {\n        return {\n          label: result.text,\n          value: result.text,\n        };\n      });\n    });\n  };\n\n  // When metric and label lookup is disabled we won't request labels\n  const metricLookupDisabledSearch = () => Promise.resolve([]);\n\n  const debouncedSearch = debounce(\n    (query: string) => getMetricLabels(query),\n    datasource.getDebounceTimeInMilliseconds()\n  );\n  // No type found for the common select props so typing as any\n  // https://github.com/grafana/grafana/blob/main/packages/grafana-ui/src/components/Select/SelectBase.tsx/#L212-L263\n  // eslint-disable-next-line\n  const CustomOption = (props: any) => {\n    const option = props.data;\n\n    if (option.value === 'BrowseMetrics') {\n      const isFocused = props.isFocused ? styles.focus : '';\n\n      return (\n        <div\n          {...props.innerProps}\n          onKeyDown={(e) => {\n            // if there is no metric and the m.e. is enabled, open the modal\n            if (e.code === 'Enter') {\n              setState({ ...state, metricsModalOpen: true });\n            }\n          }}\n        >\n          {\n            <div className={`${styles.customOption} ${isFocused}`}>\n              <div>\n                <div>{option.label}</div>\n                <div className={styles.customOptionDesc}>{option.description}</div>\n              </div>\n              <Button\n                variant=\"primary\"\n                fill=\"outline\"\n                size=\"sm\"\n                onClick={() => setState({ ...state, metricsModalOpen: true })}\n                icon=\"book\"\n              >\n                Open\n              </Button>\n            </div>\n          }\n        </div>\n      );\n    }\n\n    return SelectMenuOptions(props);\n  };\n\n  return (\n    <>\n      {prometheusMetricEncyclopedia && !datasource.lookupsDisabled && state.metricsModalOpen && (\n        <MetricsModal\n          datasource={datasource}\n          isOpen={state.metricsModalOpen}\n          onClose={() => setState({ ...state, metricsModalOpen: false })}\n          query={query}\n          onChange={onChange}\n          initialMetrics={state.initialMetrics ?? []}\n        />\n      )}\n      <EditorFieldGroup>\n        <EditorField label=\"Metric\">\n          <AsyncSelect\n            inputId=\"prometheus-metric-select\"\n            className={styles.select}\n            value={query.metric ? toOption(query.metric) : undefined}\n            placeholder={'Select metric'}\n            allowCustomValue\n            formatOptionLabel={formatOptionLabel}\n            filterOption={customFilterOption}\n            onOpenMenu={async () => {\n              if (metricLookupDisabled) {\n                return;\n              }\n              setState({ isLoading: true });\n              const metrics = await onGetMetrics();\n              const initialMetrics: string[] = metrics.map((m) => m.value);\n              if (metrics.length > PROMETHEUS_QUERY_BUILDER_MAX_RESULTS) {\n                metrics.splice(0, metrics.length - PROMETHEUS_QUERY_BUILDER_MAX_RESULTS);\n              }\n\n              if (config.featureToggles.prometheusMetricEncyclopedia) {\n                // pass the initial metrics, possibly filtered by labels into the Metrics Modal\n                const metricsModalOption: SelectableValue[] = [\n                  {\n                    value: 'BrowseMetrics',\n                    label: 'Browse metrics',\n                    description: 'Browse and filter metrics and metadata with a fuzzy search',\n                  },\n                ];\n                setState({\n                  metrics: [...metricsModalOption, ...metrics],\n                  isLoading: undefined,\n                  initialMetrics: initialMetrics,\n                });\n              } else {\n                setState({ metrics, isLoading: undefined });\n              }\n            }}\n            loadOptions={metricLookupDisabled ? metricLookupDisabledSearch : debouncedSearch}\n            isLoading={state.isLoading}\n            defaultOptions={state.metrics}\n            onChange={({ value }) => {\n              if (value) {\n                // if there is no metric and the m.e. is enabled, open the modal\n                if (prometheusMetricEncyclopedia && value === 'BrowseMetrics') {\n                  setState({ ...state, metricsModalOpen: true });\n                } else {\n                  onChange({ ...query, metric: value });\n                }\n              }\n            }}\n            components={{ Option: CustomOption }}\n          />\n        </EditorField>\n      </EditorFieldGroup>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  select: css`\n    min-width: 125px;\n  `,\n  highlight: css`\n    label: select__match-highlight;\n    background: inherit;\n    padding: inherit;\n    color: ${theme.colors.warning.contrastText};\n    background-color: ${theme.colors.warning.main};\n  `,\n  customOption: css`\n    padding: 8px;\n    display: flex;\n    justify-content: space-between;\n    cursor: pointer;\n    :hover {\n      background-color: ${theme.colors.emphasize(theme.colors.background.primary, 0.03)};\n    }\n  `,\n  customOptionlabel: css`\n    color: ${theme.colors.text.primary};\n  `,\n  customOptionDesc: css`\n    color: ${theme.colors.text.secondary};\n    font-size: ${theme.typography.size.xs};\n    opacity: 50%;\n  `,\n  focus: css`\n    background-color: ${theme.colors.emphasize(theme.colors.background.primary, 0.03)};\n  `,\n});\n\nexport const formatPrometheusLabelFiltersToString = (\n  queryString: string,\n  labelsFilters: QueryBuilderLabelFilter[] | undefined\n): string => {\n  const filterArray = labelsFilters ? formatPrometheusLabelFilters(labelsFilters) : [];\n\n  return `label_values({__name__=~\".*${queryString}\"${filterArray ? filterArray.join('') : ''}},__name__)`;\n};\n\nexport const formatPrometheusLabelFilters = (labelsFilters: QueryBuilderLabelFilter[]): string[] => {\n  return labelsFilters.map((label) => {\n    return `,${label.label}=\"${label.value}\"`;\n  });\n};\n","import debounce from 'debounce-promise';\nimport React, { useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { AsyncSelect, Select } from '@grafana/ui';\n\nimport { QueryBuilderLabelFilter } from '../shared/types';\n\nimport { PROMETHEUS_QUERY_BUILDER_MAX_RESULTS } from './MetricSelect';\n\nexport interface Props {\n  defaultOp: string;\n  item: Partial<QueryBuilderLabelFilter>;\n  onChange: (value: QueryBuilderLabelFilter) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onDelete: () => void;\n  invalidLabel?: boolean;\n  invalidValue?: boolean;\n  getLabelValuesAutofillSuggestions: (query: string, labelName?: string) => Promise<SelectableValue[]>;\n  debounceDuration: number;\n}\n\nexport function LabelFilterItem({\n  item,\n  defaultOp,\n  onChange,\n  onDelete,\n  onGetLabelNames,\n  onGetLabelValues,\n  invalidLabel,\n  invalidValue,\n  getLabelValuesAutofillSuggestions,\n  debounceDuration,\n}: Props) {\n  const [state, setState] = useState<{\n    labelNames?: SelectableValue[];\n    labelValues?: SelectableValue[];\n    isLoadingLabelNames?: boolean;\n    isLoadingLabelValues?: boolean;\n  }>({});\n  // there's a bug in react-select where the menu doesn't recalculate its position when the options are loaded asynchronously\n  // see https://github.com/grafana/grafana/issues/63558\n  // instead, we explicitly control the menu visibility and prevent showing it until the options have fully loaded\n  const [labelNamesMenuOpen, setLabelNamesMenuOpen] = useState(false);\n  const [labelValuesMenuOpen, setLabelValuesMenuOpen] = useState(false);\n\n  const isMultiSelect = (operator = item.op) => {\n    return operators.find((op) => op.label === operator)?.isMultiValue;\n  };\n\n  const getSelectOptionsFromString = (item?: string): string[] => {\n    if (item) {\n      if (item.indexOf('|') > 0) {\n        return item.split('|');\n      }\n      return [item];\n    }\n    return [];\n  };\n\n  const labelValueSearch = debounce(\n    (query: string) => getLabelValuesAutofillSuggestions(query, item.label),\n    debounceDuration\n  );\n\n  return (\n    <div data-testid=\"prometheus-dimensions-filter-item\">\n      <InputGroup>\n        {/* Label name select, loads all values at once */}\n        <Select\n          placeholder=\"Select label\"\n          aria-label={selectors.components.QueryBuilder.labelSelect}\n          inputId=\"prometheus-dimensions-filter-item-key\"\n          width=\"auto\"\n          value={item.label ? toOption(item.label) : null}\n          allowCustomValue\n          onOpenMenu={async () => {\n            setState({ isLoadingLabelNames: true });\n            const labelNames = await onGetLabelNames(item);\n            setLabelNamesMenuOpen(true);\n            setState({ labelNames, isLoadingLabelNames: undefined });\n          }}\n          onCloseMenu={() => {\n            setLabelNamesMenuOpen(false);\n          }}\n          isOpen={labelNamesMenuOpen}\n          isLoading={state.isLoadingLabelNames ?? false}\n          options={state.labelNames}\n          onChange={(change) => {\n            if (change.label) {\n              onChange({\n                ...item,\n                op: item.op ?? defaultOp,\n                label: change.label,\n                // eslint-ignore\n              } as QueryBuilderLabelFilter);\n            }\n          }}\n          invalid={invalidLabel}\n        />\n\n        {/* Operator select i.e.   = =~ != !~   */}\n        <Select\n          aria-label={selectors.components.QueryBuilder.matchOperatorSelect}\n          className=\"query-segment-operator\"\n          value={toOption(item.op ?? defaultOp)}\n          options={operators}\n          width=\"auto\"\n          onChange={(change) => {\n            if (change.value != null) {\n              onChange({\n                ...item,\n                op: change.value,\n                value: isMultiSelect(change.value) ? item.value : getSelectOptionsFromString(item?.value)[0],\n                // eslint-ignore\n              } as QueryBuilderLabelFilter);\n            }\n          }}\n        />\n\n        {/* Label value async select: autocomplete calls prometheus API */}\n        <AsyncSelect\n          placeholder=\"Select value\"\n          aria-label={selectors.components.QueryBuilder.valueSelect}\n          inputId=\"prometheus-dimensions-filter-item-value\"\n          width=\"auto\"\n          value={\n            isMultiSelect()\n              ? getSelectOptionsFromString(item?.value).map(toOption)\n              : getSelectOptionsFromString(item?.value).map(toOption)[0]\n          }\n          allowCustomValue\n          onOpenMenu={async () => {\n            setState({ isLoadingLabelValues: true });\n            const labelValues = await onGetLabelValues(item);\n            if (labelValues.length > PROMETHEUS_QUERY_BUILDER_MAX_RESULTS) {\n              labelValues.splice(0, labelValues.length - PROMETHEUS_QUERY_BUILDER_MAX_RESULTS);\n            }\n            setLabelValuesMenuOpen(true);\n            setState({\n              ...state,\n              labelValues,\n              isLoadingLabelValues: undefined,\n            });\n          }}\n          onCloseMenu={() => {\n            setLabelValuesMenuOpen(false);\n          }}\n          isOpen={labelValuesMenuOpen}\n          defaultOptions={state.labelValues}\n          isMulti={isMultiSelect()}\n          isLoading={state.isLoadingLabelValues}\n          loadOptions={labelValueSearch}\n          onChange={(change) => {\n            if (change.value) {\n              onChange({\n                ...item,\n                value: change.value,\n                op: item.op ?? defaultOp,\n                // eslint-ignore\n              } as QueryBuilderLabelFilter);\n            } else {\n              const changes = change\n                .map((change: { label?: string }) => {\n                  return change.label;\n                })\n                .join('|');\n              // eslint-ignore\n              onChange({ ...item, value: changes, op: item.op ?? defaultOp } as QueryBuilderLabelFilter);\n            }\n          }}\n          invalid={invalidValue}\n        />\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n      </InputGroup>\n    </div>\n  );\n}\n\nconst operators = [\n  { label: '=', value: '=', isMultiValue: false },\n  { label: '!=', value: '!=', isMultiValue: false },\n  { label: '<', value: '<', isMultiValue: false },\n  { label: '>', value: '>', isMultiValue: false },\n  { label: '=~', value: '=~', isMultiValue: true },\n  { label: '!~', value: '!~', isMultiValue: true },\n];\n","import { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorFieldGroup, EditorField, EditorList } from '@grafana/experimental';\n\nimport { QueryBuilderLabelFilter } from '../shared/types';\n\nimport { LabelFilterItem } from './LabelFilterItem';\n\nexport const MISSING_LABEL_FILTER_ERROR_MESSAGE = 'Select at least 1 label filter (label and value)';\n\nexport interface Props {\n  labelsFilters: QueryBuilderLabelFilter[];\n  onChange: (labelFilters: Array<Partial<QueryBuilderLabelFilter>>) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  /** If set to true, component will show error message until at least 1 filter is selected */\n  labelFilterRequired?: boolean;\n  getLabelValuesAutofillSuggestions: (query: string, labelName?: string) => Promise<SelectableValue[]>;\n  debounceDuration: number;\n}\n\nexport function LabelFilters({\n  labelsFilters,\n  onChange,\n  onGetLabelNames,\n  onGetLabelValues,\n  labelFilterRequired,\n  getLabelValuesAutofillSuggestions,\n  debounceDuration,\n}: Props) {\n  const defaultOp = '=';\n  const [items, setItems] = useState<Array<Partial<QueryBuilderLabelFilter>>>([{ op: defaultOp }]);\n\n  useEffect(() => {\n    if (labelsFilters.length > 0) {\n      setItems(labelsFilters);\n    } else {\n      setItems([{ op: defaultOp }]);\n    }\n  }, [labelsFilters]);\n\n  const onLabelsChange = (newItems: Array<Partial<QueryBuilderLabelFilter>>) => {\n    setItems(newItems);\n\n    // Extract full label filters with both label & value\n    const newLabels = newItems.filter((x) => x.label != null && x.value != null);\n    if (!isEqual(newLabels, labelsFilters)) {\n      onChange(newLabels);\n    }\n  };\n\n  const hasLabelFilter = items.some((item) => item.label && item.value);\n\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Label filters\"\n        error={MISSING_LABEL_FILTER_ERROR_MESSAGE}\n        invalid={labelFilterRequired && !hasLabelFilter}\n      >\n        <EditorList\n          items={items}\n          onChange={onLabelsChange}\n          renderItem={(item: Partial<QueryBuilderLabelFilter>, onChangeItem, onDelete) => (\n            <LabelFilterItem\n              debounceDuration={debounceDuration}\n              item={item}\n              defaultOp={defaultOp}\n              onChange={onChangeItem}\n              onDelete={onDelete}\n              onGetLabelNames={onGetLabelNames}\n              onGetLabelValues={onGetLabelValues}\n              invalidLabel={labelFilterRequired && !item.label}\n              invalidValue={labelFilterRequired && !item.value}\n              getLabelValuesAutofillSuggestions={getLabelValuesAutofillSuggestions}\n            />\n          )}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/experimental';\nimport { AutoSizeInput, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { PromVisualQueryBinary } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\n\nexport interface Props {\n  nestedQuery: PromVisualQueryBinary;\n  datasource: PrometheusDatasource;\n  index: number;\n  onChange: (index: number, update: PromVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport const NestedQuery = React.memo<Props>((props) => {\n  const { nestedQuery, index, datasource, onChange, onRemove, onRunQuery, showExplain } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.card}>\n      <div className={styles.header}>\n        <div className={styles.name}>Operator</div>\n        <Select\n          width=\"auto\"\n          options={operators}\n          value={toOption(nestedQuery.operator)}\n          onChange={(value) => {\n            onChange(index, {\n              ...nestedQuery,\n              operator: value.value!,\n            });\n          }}\n        />\n        <div className={styles.name}>Vector matches</div>\n        <div className={styles.vectorMatchWrapper}>\n          <Select<PromVisualQueryBinary['vectorMatchesType']>\n            width=\"auto\"\n            value={nestedQuery.vectorMatchesType || 'on'}\n            allowCustomValue\n            options={[\n              { value: 'on', label: 'on' },\n              { value: 'ignoring', label: 'ignoring' },\n            ]}\n            onChange={(val) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatchesType: val.value,\n              });\n            }}\n          />\n          <AutoSizeInput\n            className={styles.vectorMatchInput}\n            minWidth={20}\n            defaultValue={nestedQuery.vectorMatches}\n            onCommitChange={(evt) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatches: evt.currentTarget.value,\n                vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n              });\n            }}\n          />\n        </div>\n        <FlexItem grow={1} />\n        <IconButton name=\"times\" size=\"sm\" onClick={() => onRemove(index)} />\n      </div>\n      <div className={styles.body}>\n        <EditorRows>\n          <PromQueryBuilder\n            showExplain={showExplain}\n            query={nestedQuery.query}\n            datasource={datasource}\n            onRunQuery={onRunQuery}\n            onChange={(update) => {\n              onChange(index, { ...nestedQuery, query: update });\n            }}\n          />\n        </EditorRows>\n      </div>\n    </div>\n  );\n});\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from '@grafana/experimental';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromVisualQuery, PromVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface Props {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (query: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport function NestedQueryList(props: Props) {\n  const { query, datasource, onChange, onRunQuery, showExplain } = props;\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: PromVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      ))}\n    </Stack>\n  );\n}\n","import React, { useCallback, useState } from 'react';\n\nimport { DataSourceApi, PanelData, SelectableValue } from '@grafana/data';\nimport { EditorRow } from '@grafana/experimental';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { getMetadataString } from '../../language_provider';\nimport promqlGrammar from '../../promql';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { OperationExplainedBox } from '../shared/OperationExplainedBox';\nimport { OperationList } from '../shared/OperationList';\nimport { OperationListExplained } from '../shared/OperationListExplained';\nimport { OperationsEditorRow } from '../shared/OperationsEditorRow';\nimport { QueryBuilderHints } from '../shared/QueryBuilderHints';\nimport { RawQuery } from '../shared/RawQuery';\nimport { regexifyLabelValuesQueryString } from '../shared/parsingUtils';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nimport { LabelFilters } from './LabelFilters';\nimport { MetricSelect, PROMETHEUS_QUERY_BUILDER_MAX_RESULTS } from './MetricSelect';\nimport { NestedQueryList } from './NestedQueryList';\nimport { EXPLAIN_LABEL_FILTER_CONTENT } from './PromQueryBuilderExplained';\n\nexport interface Props {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport const PromQueryBuilder = React.memo<Props>((props) => {\n  const { datasource, query, onChange, onRunQuery, data, showExplain } = props;\n  const [highlightedOp, setHighlightedOp] = useState<QueryBuilderOperation | undefined>();\n  const onChangeLabels = (labels: QueryBuilderLabelFilter[]) => {\n    onChange({ ...query, labels });\n  };\n\n  /**\n   * Map metric metadata to SelectableValue for Select component and also adds defined template variables to the list.\n   */\n  const withTemplateVariableOptions = useCallback(\n    async (optionsPromise: Promise<SelectableValue[]>): Promise<SelectableValue[]> => {\n      const variables = datasource.getVariables();\n      const options = await optionsPromise;\n      return [\n        ...variables.map((value) => ({ label: value, value })),\n        ...options.map((option) => ({ label: option.value, value: option.value, title: option.description })),\n      ];\n    },\n    [datasource]\n  );\n\n  /**\n   * Function kicked off when user interacts with label in label filters.\n   * Formats a promQL expression and passes that off to helper functions depending on API support\n   * @param forLabel\n   */\n  const onGetLabelNames = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<SelectableValue[]> => {\n    // If no metric we need to use a different method\n    if (!query.metric) {\n      // Todo add caching but inside language provider!\n      await datasource.languageProvider.fetchLabels();\n      return datasource.languageProvider.getLabelKeys().map((k) => ({ value: k }));\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n    const expr = promQueryModeller.renderLabels(labelsToConsider);\n\n    let labelsIndex;\n    if (datasource.hasLabelsMatchAPISupport()) {\n      labelsIndex = await datasource.languageProvider.fetchSeriesLabelsMatch(expr);\n    } else {\n      labelsIndex = await datasource.languageProvider.fetchSeriesLabels(expr);\n    }\n\n    // filter out already used labels\n    return Object.keys(labelsIndex)\n      .filter((labelName) => !labelsToConsider.find((filter) => filter.label === labelName))\n      .map((k) => ({ value: k }));\n  };\n\n  const getLabelValuesAutocompleteSuggestions = (\n    queryString?: string,\n    labelName?: string\n  ): Promise<SelectableValue[]> => {\n    const forLabel = {\n      label: labelName ?? '__name__',\n      op: '=~',\n      value: regexifyLabelValuesQueryString(`.*${queryString}`),\n    };\n    const labelsToConsider = query.labels.filter((x) => x.label !== forLabel.label);\n    labelsToConsider.push(forLabel);\n    if (query.metric) {\n      labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n    }\n    const interpolatedLabelsToConsider = labelsToConsider.map((labelObject) => ({\n      ...labelObject,\n      label: datasource.interpolateString(labelObject.label),\n      value: datasource.interpolateString(labelObject.value),\n    }));\n    const expr = promQueryModeller.renderLabels(interpolatedLabelsToConsider);\n    let response;\n    if (datasource.hasLabelsMatchAPISupport()) {\n      response = getLabelValuesFromLabelValuesAPI(forLabel, expr);\n    } else {\n      response = getLabelValuesFromSeriesAPI(forLabel, expr);\n    }\n\n    return response.then((response: SelectableValue[]) => {\n      if (response.length > PROMETHEUS_QUERY_BUILDER_MAX_RESULTS) {\n        response.splice(0, response.length - PROMETHEUS_QUERY_BUILDER_MAX_RESULTS);\n      }\n      return response;\n    });\n  };\n\n  /**\n   * Helper function to fetch and format label value results from legacy API\n   * @param forLabel\n   * @param promQLExpression\n   */\n  const getLabelValuesFromSeriesAPI = (\n    forLabel: Partial<QueryBuilderLabelFilter>,\n    promQLExpression: string\n  ): Promise<SelectableValue[]> => {\n    if (!forLabel.label) {\n      return Promise.resolve([]);\n    }\n    const result = datasource.languageProvider.fetchSeries(promQLExpression);\n    const forLabelInterpolated = datasource.interpolateString(forLabel.label);\n    return result.then((result) => {\n      // This query returns duplicate values, scrub them out\n      const set = new Set<string>();\n      result.forEach((labelValue) => {\n        const labelNameString = labelValue[forLabelInterpolated];\n        set.add(labelNameString);\n      });\n\n      return Array.from(set).map((labelValues: string) => ({ label: labelValues, value: labelValues }));\n    });\n  };\n\n  /**\n   * Helper function to fetch label values from a promql string expression and a label\n   * @param forLabel\n   * @param promQLExpression\n   */\n  const getLabelValuesFromLabelValuesAPI = (\n    forLabel: Partial<QueryBuilderLabelFilter>,\n    promQLExpression: string\n  ): Promise<SelectableValue[]> => {\n    if (!forLabel.label) {\n      return Promise.resolve([]);\n    }\n    return datasource.languageProvider.fetchSeriesValuesWithMatch(forLabel.label, promQLExpression).then((response) => {\n      return response.map((v) => ({\n        value: v,\n        label: v,\n      }));\n    });\n  };\n\n  /**\n   * Function kicked off when users interact with the value of the label filters\n   * Formats a promQL expression and passes that into helper functions depending on API support\n   * @param forLabel\n   */\n  const onGetLabelValues = async (forLabel: Partial<QueryBuilderLabelFilter>): Promise<SelectableValue[]> => {\n    if (!forLabel.label) {\n      return [];\n    }\n    // If no metric is selected, we can get the raw list of labels\n    if (!query.metric) {\n      return (await datasource.languageProvider.getLabelValues(forLabel.label)).map((v) => ({ value: v }));\n    }\n\n    const labelsToConsider = query.labels.filter((x) => x !== forLabel);\n    labelsToConsider.push({ label: '__name__', op: '=', value: query.metric });\n\n    const interpolatedLabelsToConsider = labelsToConsider.map((labelObject) => ({\n      ...labelObject,\n      label: datasource.interpolateString(labelObject.label),\n      value: datasource.interpolateString(labelObject.value),\n    }));\n\n    const expr = promQueryModeller.renderLabels(interpolatedLabelsToConsider);\n\n    if (datasource.hasLabelsMatchAPISupport()) {\n      return getLabelValuesFromLabelValuesAPI(forLabel, expr);\n    } else {\n      return getLabelValuesFromSeriesAPI(forLabel, expr);\n    }\n  };\n\n  const onGetMetrics = useCallback(() => {\n    return withTemplateVariableOptions(getMetrics(datasource, query));\n  }, [datasource, query, withTemplateVariableOptions]);\n\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  const initHints = datasource.getInitHints();\n\n  return (\n    <>\n      <EditorRow>\n        <MetricSelect\n          query={query}\n          onChange={onChange}\n          onGetMetrics={onGetMetrics}\n          datasource={datasource}\n          labelsFilters={query.labels}\n          metricLookupDisabled={datasource.lookupsDisabled}\n        />\n        <LabelFilters\n          debounceDuration={datasource.getDebounceTimeInMilliseconds()}\n          getLabelValuesAutofillSuggestions={getLabelValuesAutocompleteSuggestions}\n          labelsFilters={query.labels}\n          // eslint-ignore\n          onChange={onChangeLabels as (labelFilters: Array<Partial<QueryBuilderLabelFilter>>) => void}\n          onGetLabelNames={(forLabel) => withTemplateVariableOptions(onGetLabelNames(forLabel))}\n          onGetLabelValues={(forLabel) => withTemplateVariableOptions(onGetLabelValues(forLabel))}\n        />\n      </EditorRow>\n      {initHints.length ? (\n        <div className=\"query-row-break\">\n          <div className=\"prom-query-field-info text-warning\">\n            {initHints[0].label}{' '}\n            {initHints[0].fix ? (\n              <button type=\"button\" className={'text-warning'}>\n                {initHints[0].fix.label}\n              </button>\n            ) : null}\n          </div>\n        </div>\n      ) : null}\n      {showExplain && (\n        <OperationExplainedBox\n          stepNumber={1}\n          title={<RawQuery query={`${query.metric} ${promQueryModeller.renderLabels(query.labels)}`} lang={lang} />}\n        >\n          {EXPLAIN_LABEL_FILTER_CONTENT}\n        </OperationExplainedBox>\n      )}\n      <OperationsEditorRow>\n        <OperationList<PromVisualQuery>\n          queryModeller={promQueryModeller}\n          // eslint-ignore\n          datasource={datasource as DataSourceApi}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          highlightedOp={highlightedOp}\n        />\n        <QueryBuilderHints<PromVisualQuery>\n          datasource={datasource}\n          query={query}\n          onChange={onChange}\n          data={data}\n          queryModeller={promQueryModeller}\n          buildVisualQueryFromString={buildVisualQueryFromString}\n        />\n      </OperationsEditorRow>\n      {showExplain && (\n        <OperationListExplained<PromVisualQuery>\n          lang={lang}\n          query={query}\n          stepNumber={2}\n          queryModeller={promQueryModeller}\n          onMouseEnter={(op) => setHighlightedOp(op)}\n          onMouseLeave={() => setHighlightedOp(undefined)}\n        />\n      )}\n      {query.binaryQueries && query.binaryQueries.length > 0 && (\n        <NestedQueryList\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      )}\n    </>\n  );\n});\n\n/**\n * Returns list of metrics, either all or filtered by query param. It also adds description string to each metric if it\n * exists.\n * @param datasource\n * @param query\n */\nasync function getMetrics(\n  datasource: PrometheusDatasource,\n  query: PromVisualQuery\n): Promise<Array<{ value: string; description?: string }>> {\n  // Makes sure we loaded the metadata for metrics. Usually this is done in the start() method of the provider but we\n  // don't use it with the visual builder and there is no need to run all the start() setup anyway.\n  if (!datasource.languageProvider.metricsMetadata) {\n    await datasource.languageProvider.loadMetricsMetadata();\n  }\n\n  // Error handling for when metrics metadata returns as undefined\n  if (!datasource.languageProvider.metricsMetadata) {\n    datasource.languageProvider.metricsMetadata = {};\n  }\n\n  let metrics;\n  if (query.labels.length > 0) {\n    const expr = promQueryModeller.renderLabels(query.labels);\n    metrics = (await datasource.languageProvider.getSeries(expr, true))['__name__'] ?? [];\n  } else {\n    metrics = (await datasource.languageProvider.getLabelValues('__name__')) ?? [];\n  }\n\n  return metrics.map((m) => ({\n    value: m,\n    description: getMetadataString(m, datasource.languageProvider.metricsMetadata!),\n  }));\n}\n\nPromQueryBuilder.displayName = 'PromQueryBuilder';\n","import React from 'react';\n\nimport { EditorFieldGroup, EditorRow } from '@grafana/experimental';\n\nimport promqlGrammar from '../../promql';\nimport { RawQuery } from '../shared/RawQuery';\n\nexport interface Props {\n  query: string;\n}\n\nexport function QueryPreview({ query }: Props) {\n  if (!query) {\n    return null;\n  }\n\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <RawQuery query={query} lang={{ grammar: promqlGrammar, name: 'promql' }} />\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport React, { useEffect, useReducer } from 'react';\n\nimport { PanelData } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromQuery } from '../../types';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { PromVisualQuery } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\nimport { getSettings, MetricsModalSettings } from './metrics-modal/state/state';\n\nexport interface Props {\n  query: PromQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport interface State {\n  visQuery?: PromVisualQuery;\n  expr: string;\n}\n\nconst prometheusMetricEncyclopedia = config.featureToggles.prometheusMetricEncyclopedia;\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function PromQueryBuilderContainer(props: Props) {\n  const { query, onChange, onRunQuery, datasource, data, showExplain } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, { expr: query.expr });\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n\n    if (prometheusMetricEncyclopedia) {\n      dispatch(\n        setMetricsModalSettings({\n          useBackend: query.useBackend ?? false,\n          disableTextWrap: query.disableTextWrap ?? false,\n          fullMetaSearch: query.fullMetaSearch ?? false,\n          excludeNullMetadata: query.excludeNullMetadata ?? false,\n        })\n      );\n    }\n  }, [query]);\n\n  const onVisQueryChange = (visQuery: PromVisualQuery) => {\n    const expr = promQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n\n    if (prometheusMetricEncyclopedia) {\n      const metricsModalSettings = getSettings(visQuery);\n      onChange({ ...props.query, expr: expr, ...metricsModalSettings });\n    } else {\n      onChange({ ...props.query, expr: expr });\n    }\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <PromQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        data={data}\n        showExplain={showExplain}\n      />\n      {<QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst stateSlice = createSlice({\n  name: 'prom-builder-container',\n  initialState: { expr: '' } as State,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: PromVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload ?? '');\n\n        state.visQuery = parseResult.query;\n      }\n    },\n    setMetricsModalSettings: (state, action: PayloadAction<MetricsModalSettings>) => {\n      if (state.visQuery && prometheusMetricEncyclopedia) {\n        state.visQuery.useBackend = action.payload.useBackend;\n        state.visQuery.disableTextWrap = action.payload.disableTextWrap;\n        state.visQuery.fullMetaSearch = action.payload.fullMetaSearch;\n        state.visQuery.excludeNullMetadata = action.payload.excludeNullMetadata;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged, setMetricsModalSettings } = stateSlice.actions;\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, InlineLabel, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\ninterface Props {\n  onChange: (exemplar: boolean) => void;\n  datasource: PrometheusDatasource;\n  query: PromQuery;\n  'data-testid'?: string;\n}\n\nexport function PromExemplarField({ datasource, onChange, query, ...rest }: Props) {\n  const [error, setError] = useState<string | null>(null);\n  const styles = useStyles2(getStyles);\n  const prevError = usePrevious(error);\n\n  useEffect(() => {\n    if (!datasource.exemplarsAvailable) {\n      setError('Exemplars for this query are not available');\n      onChange(false);\n    } else if (query.instant && !query.range) {\n      setError('Exemplars are not available for instant queries');\n      onChange(false);\n    } else {\n      setError(null);\n      // If error is cleared, we want to change exemplar to true\n      if (prevError && !error) {\n        onChange(true);\n      }\n    }\n  }, [datasource.exemplarsAvailable, query.instant, query.range, onChange, prevError, error]);\n\n  const iconButtonStyles = cx(\n    {\n      [styles.activeIcon]: !!query.exemplar,\n    },\n    styles.eyeIcon\n  );\n\n  return (\n    <InlineLabel width=\"auto\" data-testid={rest['data-testid']}>\n      <Tooltip content={error ?? ''}>\n        <div className={styles.iconWrapper}>\n          Exemplars\n          <IconButton\n            name=\"eye\"\n            tooltip={!!query.exemplar ? 'Disable query with exemplars' : 'Enable query with exemplars'}\n            disabled={!!error}\n            className={iconButtonStyles}\n            onClick={() => {\n              onChange(!query.exemplar);\n            }}\n          />\n        </div>\n      </Tooltip>\n    </InlineLabel>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    eyeIcon: css`\n      margin-left: ${theme.spacing(2)};\n    `,\n    activeIcon: css`\n      color: ${theme.colors.primary.main};\n    `,\n    iconWrapper: css`\n      display: flex;\n      align-items: center;\n    `,\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport React, { memo, useCallback } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { InlineFormLabel, RadioButtonGroup } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\nimport { PromExemplarField } from './PromExemplarField';\n\nexport interface PromExploreExtraFieldProps {\n  query: PromQuery;\n  onChange: (value: PromQuery) => void;\n  onRunQuery: () => void;\n  datasource: PrometheusDatasource;\n}\n\nexport const PromExploreExtraField = memo(({ query, datasource, onChange, onRunQuery }: PromExploreExtraFieldProps) => {\n  const rangeOptions = getQueryTypeOptions(true);\n  const prevQuery = usePrevious(query);\n\n  const onExemplarChange = useCallback(\n    (exemplar: boolean) => {\n      if (!isEqual(query, prevQuery) || exemplar !== query.exemplar) {\n        onChange({ ...query, exemplar });\n      }\n    },\n    [prevQuery, query, onChange]\n  );\n\n  function onChangeQueryStep(interval: string) {\n    onChange({ ...query, interval });\n  }\n\n  function onStepChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    if (e.currentTarget.value !== query.interval) {\n      onChangeQueryStep(e.currentTarget.value);\n    }\n  }\n\n  function onReturnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter' && e.shiftKey) {\n      onRunQuery();\n    }\n  }\n\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  return (\n    <div aria-label=\"Prometheus extra field\" className=\"gf-form-inline\" data-testid={testIds.extraFieldEditor}>\n      {/*Query type field*/}\n      <div\n        data-testid={testIds.queryTypeField}\n        className={cx(\n          'gf-form explore-input-margin',\n          css`\n            flex-wrap: nowrap;\n          `\n        )}\n        aria-label=\"Query type field\"\n      >\n        <InlineFormLabel width=\"auto\">Query type</InlineFormLabel>\n\n        <RadioButtonGroup\n          options={rangeOptions}\n          value={query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range'}\n          onChange={onQueryTypeChange}\n        />\n      </div>\n      {/*Step field*/}\n      <div\n        data-testid={testIds.stepField}\n        className={cx(\n          'gf-form',\n          css`\n            flex-wrap: nowrap;\n          `\n        )}\n        aria-label=\"Step field\"\n      >\n        <InlineFormLabel\n          width={6}\n          tooltip={\n            'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: s)'\n          }\n        >\n          Min step\n        </InlineFormLabel>\n        <input\n          type={'text'}\n          className=\"gf-form-input width-4\"\n          placeholder={'auto'}\n          onChange={onStepChange}\n          onKeyDown={onReturnKeyDown}\n          value={query.interval ?? ''}\n        />\n      </div>\n\n      <PromExemplarField onChange={onExemplarChange} datasource={datasource} query={query} />\n    </div>\n  );\n});\n\nPromExploreExtraField.displayName = 'PromExploreExtraField';\n\nexport function getQueryTypeOptions(includeBoth: boolean) {\n  const rangeOptions = [\n    { value: 'range', label: 'Range', description: 'Run query over a range of time' },\n    {\n      value: 'instant',\n      label: 'Instant',\n      description: 'Run query against a single point in time. For this query, the \"To\" time is used',\n    },\n  ];\n\n  if (includeBoth) {\n    rangeOptions.push({ value: 'both', label: 'Both', description: 'Run an Instant query and a Range query' });\n  }\n\n  return rangeOptions;\n}\n\nexport function getQueryTypeChangeHandler(query: PromQuery, onChange: (update: PromQuery) => void) {\n  return (queryType: string) => {\n    if (queryType === 'instant') {\n      onChange({ ...query, instant: true, range: false, exemplar: false });\n    } else if (queryType === 'range') {\n      onChange({ ...query, instant: false, range: true });\n    } else {\n      onChange({ ...query, instant: true, range: true });\n    }\n  };\n}\n\nexport const testIds = {\n  extraFieldEditor: 'prom-editor-extra-field',\n  stepField: 'prom-editor-extra-field-step',\n  queryTypeField: 'prom-editor-extra-field-query-type',\n};\n","import React, { useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/experimental';\nimport { Select, AutoSizeInput } from '@grafana/ui';\n\nimport { LegendFormatMode } from '../../types';\n\nexport interface Props {\n  legendFormat: string | undefined;\n  onChange: (legendFormat: string) => void;\n  onRunQuery: () => void;\n}\n\nconst legendModeOptions = [\n  {\n    label: 'Auto',\n    value: LegendFormatMode.Auto,\n    description: 'Only includes unique labels',\n  },\n  { label: 'Verbose', value: LegendFormatMode.Verbose, description: 'All label names and values' },\n  { label: 'Custom', value: LegendFormatMode.Custom, description: 'Provide a naming template' },\n];\n\n/**\n * Tests for this component are on the parent level (PromQueryBuilderOptions).\n */\nexport const PromQueryLegendEditor = React.memo<Props>(({ legendFormat, onChange, onRunQuery }) => {\n  const mode = getLegendMode(legendFormat);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n    let newFormat = evt.currentTarget.value;\n    if (newFormat.length === 0) {\n      newFormat = LegendFormatMode.Auto;\n    }\n\n    if (newFormat !== legendFormat) {\n      onChange(newFormat);\n      onRunQuery();\n    }\n  };\n\n  const onLegendModeChanged = (value: SelectableValue<LegendFormatMode>) => {\n    switch (value.value!) {\n      case LegendFormatMode.Auto:\n        onChange(LegendFormatMode.Auto);\n        break;\n      case LegendFormatMode.Custom:\n        onChange('{{label_name}}');\n        setTimeout(() => {\n          inputRef.current?.focus();\n          inputRef.current?.setSelectionRange(2, 12, 'forward');\n        }, 10);\n        break;\n      case LegendFormatMode.Verbose:\n        onChange('');\n        break;\n    }\n    onRunQuery();\n  };\n\n  return (\n    <EditorField\n      label=\"Legend\"\n      tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n    >\n      <>\n        {mode === LegendFormatMode.Custom && (\n          <AutoSizeInput\n            id=\"legendFormat\"\n            minWidth={22}\n            placeholder=\"auto\"\n            defaultValue={legendFormat}\n            onCommitChange={onLegendFormatChanged}\n            ref={inputRef}\n          />\n        )}\n        {mode !== LegendFormatMode.Custom && (\n          <Select\n            inputId=\"legend.mode\"\n            isSearchable={false}\n            placeholder=\"Select legend mode\"\n            options={legendModeOptions}\n            width={22}\n            onChange={onLegendModeChanged}\n            value={legendModeOptions.find((x) => x.value === mode)}\n          />\n        )}\n      </>\n    </EditorField>\n  );\n});\n\nPromQueryLegendEditor.displayName = 'PromQueryLegendEditor';\n\nfunction getLegendMode(legendFormat: string | undefined) {\n  // This special value means the new smart minimal series naming\n  if (legendFormat === LegendFormatMode.Auto) {\n    return LegendFormatMode.Auto;\n  }\n\n  // Missing or empty legend format is the old verbose behavior\n  if (legendFormat == null || legendFormat === '') {\n    return LegendFormatMode.Verbose;\n  }\n\n  return LegendFormatMode.Custom;\n}\n\nexport function getLegendModeLabel(legendFormat: string | undefined) {\n  const mode = getLegendMode(legendFormat);\n  if (mode !== LegendFormatMode.Custom) {\n    return legendModeOptions.find((x) => x.value === mode)?.label;\n  }\n  return legendFormat;\n}\n","import React, { SyntheticEvent } from 'react';\n\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow, EditorSwitch } from '@grafana/experimental';\nimport { AutoSizeInput, RadioButtonGroup, Select } from '@grafana/ui';\n\nimport { getQueryTypeChangeHandler, getQueryTypeOptions } from '../../components/PromExploreExtraField';\nimport { PromQueryFormat } from '../../dataquery.gen';\nimport { PromQuery } from '../../types';\nimport { QueryOptionGroup } from '../shared/QueryOptionGroup';\n\nimport { FORMAT_OPTIONS, INTERVAL_FACTOR_OPTIONS } from './PromQueryEditorSelector';\nimport { getLegendModeLabel, PromQueryLegendEditor } from './PromQueryLegendEditor';\n\nexport interface UIOptions {\n  exemplars: boolean;\n  type: boolean;\n  format: boolean;\n  minStep: boolean;\n  legend: boolean;\n  resolution: boolean;\n}\n\nexport interface Props {\n  query: PromQuery;\n  app?: CoreApp;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const PromQueryBuilderOptions = React.memo<Props>(({ query, app, onChange, onRunQuery }) => {\n  const onChangeFormat = (value: SelectableValue<PromQueryFormat>) => {\n    onChange({ ...query, format: value.value });\n    onRunQuery();\n  };\n\n  const onChangeStep = (evt: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, interval: evt.currentTarget.value });\n    onRunQuery();\n  };\n\n  const queryTypeOptions = getQueryTypeOptions(app === CoreApp.Explore || app === CoreApp.PanelEditor);\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  const onExemplarChange = (event: SyntheticEvent<HTMLInputElement>) => {\n    const isEnabled = event.currentTarget.checked;\n    onChange({ ...query, exemplar: isEnabled });\n    onRunQuery();\n  };\n\n  const onIntervalFactorChange = (value: SelectableValue<number>) => {\n    onChange({ ...query, intervalFactor: value.value });\n    onRunQuery();\n  };\n\n  const formatOption = FORMAT_OPTIONS.find((option) => option.value === query.format) || FORMAT_OPTIONS[0];\n  const queryTypeValue = getQueryTypeValue(query);\n  const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryTypeValue)!.label;\n\n  return (\n    <EditorRow>\n      <QueryOptionGroup\n        title=\"Options\"\n        collapsedInfo={getCollapsedInfo(query, formatOption.label!, queryTypeLabel, app)}\n      >\n        <PromQueryLegendEditor\n          legendFormat={query.legendFormat}\n          onChange={(legendFormat) => onChange({ ...query, legendFormat })}\n          onRunQuery={onRunQuery}\n        />\n        <EditorField\n          label=\"Min step\"\n          tooltip={\n            <>\n              An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n              <code>$__interval</code> and <code>$__rate_interval</code> variables.\n            </>\n          }\n        >\n          <AutoSizeInput\n            type=\"text\"\n            aria-label=\"Set lower limit for the step parameter\"\n            placeholder={'auto'}\n            minWidth={10}\n            onCommitChange={onChangeStep}\n            defaultValue={query.interval}\n          />\n        </EditorField>\n        <EditorField label=\"Format\">\n          <Select value={formatOption} allowCustomValue onChange={onChangeFormat} options={FORMAT_OPTIONS} />\n        </EditorField>\n        <EditorField label=\"Type\">\n          <RadioButtonGroup options={queryTypeOptions} value={queryTypeValue} onChange={onQueryTypeChange} />\n        </EditorField>\n        {shouldShowExemplarSwitch(query, app) && (\n          <EditorField label=\"Exemplars\">\n            <EditorSwitch value={query.exemplar || false} onChange={onExemplarChange} />\n          </EditorField>\n        )}\n        {query.intervalFactor && query.intervalFactor > 1 && (\n          <EditorField label=\"Resolution\">\n            <Select\n              aria-label=\"Select resolution\"\n              isSearchable={false}\n              options={INTERVAL_FACTOR_OPTIONS}\n              onChange={onIntervalFactorChange}\n              value={INTERVAL_FACTOR_OPTIONS.find((option) => option.value === query.intervalFactor)}\n            />\n          </EditorField>\n        )}\n      </QueryOptionGroup>\n    </EditorRow>\n  );\n});\n\nfunction shouldShowExemplarSwitch(query: PromQuery, app?: CoreApp) {\n  if (app === CoreApp.UnifiedAlerting || !query.range) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getQueryTypeValue(query: PromQuery) {\n  return query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range';\n}\n\nfunction getCollapsedInfo(query: PromQuery, formatOption: string, queryType: string, app?: CoreApp): string[] {\n  const items: string[] = [];\n\n  items.push(`Legend: ${getLegendModeLabel(query.legendFormat)}`);\n  items.push(`Format: ${formatOption}`);\n  items.push(`Step: ${query.interval ?? 'auto'}`);\n  items.push(`Type: ${queryType}`);\n\n  if (shouldShowExemplarSwitch(query, app)) {\n    if (query.exemplar) {\n      items.push(`Exemplars: true`);\n    } else {\n      items.push(`Exemplars: false`);\n    }\n  }\n  return items;\n}\n\nPromQueryBuilderOptions.displayName = 'PromQueryBuilderOptions';\n","import { isEqual, map } from 'lodash';\nimport React, { SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { CoreApp, LoadingState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorHeader, EditorRows, FlexItem, Space } from '@grafana/experimental';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal } from '@grafana/ui';\n\nimport { PromQueryEditorProps } from '../../components/types';\nimport { PromQueryFormat } from '../../dataquery.gen';\nimport { PromQuery } from '../../types';\nimport { QueryPatternsModal } from '../QueryPatternsModal';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { QueryEditorModeToggle } from '../shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from '../shared/QueryHeaderSwitch';\nimport { promQueryEditorExplainKey, useFlag } from '../shared/hooks/useFlag';\nimport { QueryEditorMode } from '../shared/types';\nimport { changeEditorMode, getQueryWithDefaults } from '../state';\n\nimport { PromQueryBuilderContainer } from './PromQueryBuilderContainer';\nimport { PromQueryBuilderOptions } from './PromQueryBuilderOptions';\nimport { PromQueryCodeEditor } from './PromQueryCodeEditor';\n\nexport const FORMAT_OPTIONS: Array<SelectableValue<PromQueryFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Heatmap', value: 'heatmap' },\n];\n\nexport const INTERVAL_FACTOR_OPTIONS: Array<SelectableValue<number>> = map([1, 2, 3, 4, 5, 10], (value: number) => ({\n  value,\n  label: '1/' + value,\n}));\n\ntype Props = PromQueryEditorProps;\n\nexport const PromQueryEditorSelector = React.memo<Props>((props) => {\n  const {\n    onChange,\n    onRunQuery,\n    data,\n    app,\n    onAddQuery,\n    datasource: { defaultEditor },\n    queries,\n  } = props;\n\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [queryPatternsModalOpen, setQueryPatternsModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const { flag: explain, setFlag: setExplain } = useFlag(promQueryEditorExplainKey);\n\n  const query = getQueryWithDefaults(props.query, app, defaultEditor);\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: QueryEditorMode) => {\n      reportInteraction('user_grafana_prometheus_editor_mode_clicked', {\n        newEditor: newMetricEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newMetricEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can lose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newMetricEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = (query: PromQuery) => {\n    if (!isEqual(query, props.query)) {\n      setDataIsStale(true);\n    }\n    onChange(query);\n  };\n\n  const onShowExplainChange = (e: SyntheticEvent<HTMLInputElement>) => {\n    setExplain(e.currentTarget.checked);\n  };\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Query parsing\"\n        body=\"There were errors while trying to parse the query. Continuing to visual builder may lose some parts of the query.\"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          changeEditorMode(query, QueryEditorMode.Builder, onChange);\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <QueryPatternsModal\n        isOpen={queryPatternsModalOpen}\n        onClose={() => setQueryPatternsModalOpen(false)}\n        query={query}\n        queries={queries}\n        app={app}\n        onChange={onChange}\n        onAddQuery={onAddQuery}\n      />\n      <EditorHeader>\n        <Button\n          aria-label={selectors.components.QueryBuilder.queryPatterns}\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={() => setQueryPatternsModalOpen((prevValue) => !prevValue)}\n        >\n          Kick start your query\n        </Button>\n        <QueryHeaderSwitch label=\"Explain\" value={explain} onChange={onShowExplainChange} />\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && app !== CoreApp.Correlations && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'fa fa-spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            Run queries\n          </Button>\n        )}\n        <QueryEditorModeToggle mode={editorMode} onChange={onEditorModeChange} />\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && (\n          <PromQueryCodeEditor {...props} query={query} showExplain={explain} onChange={onChangeInternal} />\n        )}\n        {editorMode === QueryEditorMode.Builder && (\n          <PromQueryBuilderContainer\n            query={query}\n            datasource={props.datasource}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            data={data}\n            showExplain={explain}\n          />\n        )}\n        <PromQueryBuilderOptions query={query} app={props.app} onChange={onChange} onRunQuery={onRunQuery} />\n      </EditorRows>\n    </>\n  );\n});\n\nPromQueryEditorSelector.displayName = 'PromQueryEditorSelector';\n","import React from 'react';\n\nimport PromQueryField from './PromQueryField';\nimport { PromQueryEditorProps } from './types';\n\nexport function PromQueryEditorForAlerting(props: PromQueryEditorProps) {\n  const { datasource, query, range, data, onChange, onRunQuery } = props;\n\n  return (\n    <PromQueryField\n      datasource={datasource}\n      query={query}\n      onRunQuery={onRunQuery}\n      onChange={onChange}\n      history={[]}\n      range={range}\n      data={data}\n      data-testid={testIds.editor}\n    />\n  );\n}\n\nexport const testIds = {\n  editor: 'prom-editor-cloud-alerting',\n};\n","import React, { memo } from 'react';\n\nimport { CoreApp } from '@grafana/data';\n\nimport { PromQueryEditorSelector } from '../querybuilder/components/PromQueryEditorSelector';\n\nimport { PromQueryEditorForAlerting } from './PromQueryEditorForAlerting';\nimport { PromQueryEditorProps } from './types';\n\nexport function PromQueryEditorByApp(props: PromQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <PromQueryEditorForAlerting {...props} />;\n    default:\n      return <PromQueryEditorSelector {...props} />;\n  }\n}\n\nexport default memo(PromQueryEditorByApp);\n","import React from 'react';\n\nimport { DataSourceJsonData, DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { InlineField, Switch, useTheme2 } from '@grafana/ui';\n\nimport { docsTip, overhaulStyles } from './ConfigEditor';\n\nexport interface Props<T extends DataSourceJsonData>\n  extends Pick<DataSourcePluginOptionsEditorProps<T>, 'options' | 'onOptionsChange'> {}\n\nexport interface AlertingConfig extends DataSourceJsonData {\n  manageAlerts?: boolean;\n}\n\nexport function AlertingSettingsOverhaul<T extends AlertingConfig>({\n  options,\n  onOptionsChange,\n}: Props<T>): JSX.Element {\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Alerting</h3>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineField\n              labelWidth={30}\n              label=\"Manage alerts via Alerting UI\"\n              disabled={options.readOnly}\n              tooltip={\n                <>\n                  Manage alert rules for this data source. To manage other alerting resources, add an Alertmanager data\n                  source. {docsTip()}\n                </>\n              }\n              interactive={true}\n              className={styles.switchField}\n            >\n              <Switch\n                value={options.jsonData.manageAlerts !== false}\n                onChange={(event) =>\n                  onOptionsChange({\n                    ...options,\n                    jsonData: { ...options.jsonData, manageAlerts: event!.currentTarget.checked },\n                  })\n                }\n              />\n            </InlineField>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import { SelectableValue } from '@grafana/data';\n\nexport enum AzureCloud {\n  Public = 'AzureCloud',\n  China = 'AzureChinaCloud',\n  USGovernment = 'AzureUSGovernment',\n  None = '',\n}\n\nexport const KnownAzureClouds: Array<SelectableValue<AzureCloud>> = [\n  { value: AzureCloud.Public, label: 'Azure' },\n  { value: AzureCloud.China, label: 'Azure China' },\n  { value: AzureCloud.USGovernment, label: 'Azure US Government' },\n];\n\nexport type AzureAuthType = 'msi' | 'clientsecret';\n\nexport type ConcealedSecret = symbol;\n\ninterface AzureCredentialsBase {\n  authType: AzureAuthType;\n  defaultSubscriptionId?: string;\n}\n\nexport interface AzureManagedIdentityCredentials extends AzureCredentialsBase {\n  authType: 'msi';\n}\n\nexport interface AzureClientSecretCredentials extends AzureCredentialsBase {\n  authType: 'clientsecret';\n  azureCloud?: string;\n  tenantId?: string;\n  clientId?: string;\n  clientSecret?: string | ConcealedSecret;\n}\n\nexport type AzureCredentials = AzureManagedIdentityCredentials | AzureClientSecretCredentials;\n\nexport function isCredentialsComplete(credentials: AzureCredentials): boolean {\n  switch (credentials.authType) {\n    case 'msi':\n      return true;\n    case 'clientsecret':\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && credentials.clientSecret);\n  }\n}\n","import { DataSourceSettings } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { AzureCloud, AzureCredentials, ConcealedSecret } from './AzureCredentials';\n\nconst concealed: ConcealedSecret = Symbol('Concealed client secret');\n\nfunction getDefaultAzureCloud(): string {\n  return config.azure.cloud || AzureCloud.Public;\n}\n\nfunction getSecret(options: DataSourceSettings<any, any>): undefined | string | ConcealedSecret {\n  if (options.secureJsonFields.azureClientSecret) {\n    // The secret is concealed on server\n    return concealed;\n  } else {\n    const secret = options.secureJsonData?.azureClientSecret;\n    return typeof secret === 'string' && secret.length > 0 ? secret : undefined;\n  }\n}\n\nexport function hasCredentials(options: DataSourceSettings<any, any>): boolean {\n  return !!options.jsonData.azureCredentials;\n}\n\nexport function getDefaultCredentials(): AzureCredentials {\n  if (config.azure.managedIdentityEnabled) {\n    return { authType: 'msi' };\n  } else {\n    return { authType: 'clientsecret', azureCloud: getDefaultAzureCloud() };\n  }\n}\n\nexport function getCredentials(options: DataSourceSettings<any, any>): AzureCredentials {\n  const credentials = options.jsonData.azureCredentials as AzureCredentials | undefined;\n\n  // If no credentials saved, then return empty credentials\n  // of type based on whether the managed identity enabled\n  if (!credentials) {\n    return getDefaultCredentials();\n  }\n\n  switch (credentials.authType) {\n    case 'msi':\n      if (config.azure.managedIdentityEnabled) {\n        return {\n          authType: 'msi',\n        };\n      } else {\n        // If authentication type is managed identity but managed identities were disabled in Grafana config,\n        // then we should fallback to an empty app registration (client secret) configuration\n        return {\n          authType: 'clientsecret',\n          azureCloud: getDefaultAzureCloud(),\n        };\n      }\n    case 'clientsecret':\n      return {\n        authType: 'clientsecret',\n        azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n        tenantId: credentials.tenantId,\n        clientId: credentials.clientId,\n        clientSecret: getSecret(options),\n      };\n  }\n}\n\nexport function updateCredentials(\n  options: DataSourceSettings<any, any>,\n  credentials: AzureCredentials\n): DataSourceSettings<any, any> {\n  switch (credentials.authType) {\n    case 'msi':\n      if (!config.azure.managedIdentityEnabled) {\n        throw new Error('Managed Identity authentication is not enabled in Grafana config.');\n      }\n\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType: 'msi',\n          },\n        },\n      };\n\n      return options;\n\n    case 'clientsecret':\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType: 'clientsecret',\n            azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n            tenantId: credentials.tenantId,\n            clientId: credentials.clientId,\n          },\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          azureClientSecret:\n            typeof credentials.clientSecret === 'string' && credentials.clientSecret.length > 0\n              ? credentials.clientSecret\n              : undefined,\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          azureClientSecret: typeof credentials.clientSecret === 'symbol',\n        },\n      };\n\n      return options;\n  }\n}\n\nexport function setDefaultCredentials(options: DataSourceSettings<any, any>): Partial<DataSourceSettings<any, any>> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureCredentials: getDefaultCredentials(),\n    },\n  };\n}\n\nexport function resetCredentials(options: DataSourceSettings<any, any>): Partial<DataSourceSettings<any, any>> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureAuth: undefined,\n      azureCredentials: undefined,\n      azureEndpointResourceId: undefined,\n    },\n  };\n}\n","import React, { ChangeEvent, useEffect, useReducer, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, Button } from '@grafana/ui/src/components';\nimport { Input } from '@grafana/ui/src/components/Forms/Legacy/Input/Input';\nimport { Select } from '@grafana/ui/src/components/Forms/Legacy/Select/Select';\n\nimport { AzureAuthType, AzureCredentials, isCredentialsComplete } from './AzureCredentials';\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  credentials: AzureCredentials;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange: (updatedCredentials: AzureCredentials) => void;\n  getSubscriptions?: () => Promise<SelectableValue[]>;\n  disabled?: boolean;\n}\n\nconst authTypeOptions: Array<SelectableValue<AzureAuthType>> = [\n  {\n    value: 'msi',\n    label: 'Managed Identity',\n  },\n  {\n    value: 'clientsecret',\n    label: 'App Registration',\n  },\n];\n\nexport const AzureCredentialsForm = (props: Props) => {\n  const { credentials, azureCloudOptions, onCredentialsChange, getSubscriptions, disabled } = props;\n  const hasRequiredFields = isCredentialsComplete(credentials);\n\n  const [subscriptions, setSubscriptions] = useState<Array<SelectableValue<string>>>([]);\n  const [loadSubscriptionsClicked, onLoadSubscriptions] = useReducer((val) => val + 1, 0);\n  useEffect(() => {\n    if (!getSubscriptions || !hasRequiredFields) {\n      updateSubscriptions([]);\n      return;\n    }\n    let canceled = false;\n    getSubscriptions().then((result) => {\n      if (!canceled) {\n        updateSubscriptions(result, loadSubscriptionsClicked);\n      }\n    });\n    return () => {\n      canceled = true;\n    };\n    // This effect is intended to be called only once initially and on Load Subscriptions click\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadSubscriptionsClicked]);\n\n  const updateSubscriptions = (received: Array<SelectableValue<string>>, autoSelect = false) => {\n    setSubscriptions(received);\n    if (getSubscriptions) {\n      if (autoSelect && !credentials.defaultSubscriptionId && received.length > 0) {\n        // Selecting the default subscription if subscriptions received but no default subscription selected\n        onSubscriptionChange(received[0]);\n      } else if (credentials.defaultSubscriptionId) {\n        const found = received.find((opt) => opt.value === credentials.defaultSubscriptionId);\n        if (!found) {\n          // Unselecting the default subscription if it isn't found among the received subscriptions\n          onSubscriptionChange(undefined);\n        }\n      }\n    }\n  };\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    if (onCredentialsChange) {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        authType: selected.value || 'msi',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onAzureCloudChange = (selected: SelectableValue<string>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        azureCloud: selected.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        tenantId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientId: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: event.target.value,\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (onCredentialsChange && credentials.authType === 'clientsecret') {\n      setSubscriptions([]);\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: '',\n        defaultSubscriptionId: undefined,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onSubscriptionChange = (selected: SelectableValue<string> | undefined) => {\n    if (onCredentialsChange) {\n      const updated: AzureCredentials = {\n        ...credentials,\n        defaultSubscriptionId: selected?.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      {props.managedIdentityEnabled && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-12\" tooltip=\"Choose the type of authentication to Azure services\">\n              Authentication\n            </InlineFormLabel>\n            <Select\n              className=\"width-15\"\n              value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n              options={authTypeOptions}\n              onChange={onAuthTypeChange}\n              isDisabled={disabled}\n            />\n          </div>\n        </div>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud\">\n                  Azure Cloud\n                </InlineFormLabel>\n                <Select\n                  className=\"width-15\"\n                  value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                  options={azureCloudOptions}\n                  onChange={onAzureCloudChange}\n                  isDisabled={disabled}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Directory (tenant) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.tenantId || ''}\n                  onChange={onTenantIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application (client) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className=\"width-30\"\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientId || ''}\n                  onChange={onClientIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          {typeof credentials.clientSecret === 'symbol' ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel htmlFor=\"azure-client-secret\" className=\"width-12\">\n                  Client Secret\n                </InlineFormLabel>\n                <Input id=\"azure-client-secret\" className=\"width-25\" placeholder=\"configured\" disabled />\n              </div>\n              {!disabled && (\n                <div className=\"gf-form\">\n                  <div className=\"max-width-30 gf-form-inline\">\n                    <Button variant=\"secondary\" type=\"button\" onClick={onClientSecretReset}>\n                      reset\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className=\"width-30\"\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={credentials.clientSecret || ''}\n                    onChange={onClientSecretChange}\n                    disabled={disabled}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n      {getSubscriptions && (\n        <>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Default Subscription</InlineFormLabel>\n              <div className=\"width-25\">\n                <Select\n                  value={\n                    credentials.defaultSubscriptionId\n                      ? subscriptions.find((opt) => opt.value === credentials.defaultSubscriptionId)\n                      : undefined\n                  }\n                  options={subscriptions}\n                  onChange={onSubscriptionChange}\n                  isDisabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <div className=\"max-width-30 gf-form-inline\">\n                <Button\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  type=\"button\"\n                  onClick={onLoadSubscriptions}\n                  disabled={!hasRequiredFields}\n                >\n                  Load Subscriptions\n                </Button>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AzureCredentialsForm;\n","import React, { FormEvent, useMemo, useState } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input } from '@grafana/ui';\nimport { HttpSettingsBaseProps } from '@grafana/ui/src/components/DataSourceSettings/types';\n\nimport { KnownAzureClouds, AzureCredentials } from './AzureCredentials';\nimport { getCredentials, updateCredentials } from './AzureCredentialsConfig';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\n\nexport const AzureAuthSettings = (props: HttpSettingsBaseProps) => {\n  const { dataSourceConfig, onChange } = props;\n\n  const [overrideAudienceAllowed] = useState<boolean>(\n    config.featureToggles.prometheusAzureOverrideAudience || !!dataSourceConfig.jsonData.azureEndpointResourceId\n  );\n  const [overrideAudienceChecked, setOverrideAudienceChecked] = useState<boolean>(\n    !!dataSourceConfig.jsonData.azureEndpointResourceId\n  );\n\n  const credentials = useMemo(() => getCredentials(dataSourceConfig), [dataSourceConfig]);\n\n  const onCredentialsChange = (credentials: AzureCredentials): void => {\n    onChange(updateCredentials(dataSourceConfig, credentials));\n  };\n\n  const onOverrideAudienceChange = (ev: FormEvent<HTMLInputElement>): void => {\n    setOverrideAudienceChecked(ev.currentTarget.checked);\n    if (!ev.currentTarget.checked) {\n      onChange({\n        ...dataSourceConfig,\n        jsonData: { ...dataSourceConfig.jsonData, azureEndpointResourceId: undefined },\n      });\n    }\n  };\n\n  const onResourceIdChange = (ev: FormEvent<HTMLInputElement>): void => {\n    if (overrideAudienceChecked) {\n      onChange({\n        ...dataSourceConfig,\n        jsonData: { ...dataSourceConfig.jsonData, azureEndpointResourceId: ev.currentTarget.value },\n      });\n    }\n  };\n\n  return (\n    <>\n      <h6>Azure authentication</h6>\n      <AzureCredentialsForm\n        managedIdentityEnabled={config.azure.managedIdentityEnabled}\n        credentials={credentials}\n        azureCloudOptions={KnownAzureClouds}\n        onCredentialsChange={onCredentialsChange}\n        disabled={dataSourceConfig.readOnly}\n      />\n      {overrideAudienceAllowed && (\n        <>\n          <h6>Azure configuration</h6>\n          <div className=\"gf-form-group\">\n            <InlineFieldRow>\n              <InlineField labelWidth={26} label=\"Override AAD audience\" disabled={dataSourceConfig.readOnly}>\n                <InlineSwitch value={overrideAudienceChecked} onChange={onOverrideAudienceChange} />\n              </InlineField>\n            </InlineFieldRow>\n            {overrideAudienceChecked && (\n              <InlineFieldRow>\n                <InlineField labelWidth={26} label=\"Resource ID\" disabled={dataSourceConfig.readOnly}>\n                  <Input\n                    className=\"width-30\"\n                    value={dataSourceConfig.jsonData.azureEndpointResourceId || ''}\n                    onChange={onResourceIdChange}\n                  />\n                </InlineField>\n              </InlineFieldRow>\n            )}\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default AzureAuthSettings;\n","import React, { useState } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, Input, Switch, useTheme2 } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\nimport { docsTip, overhaulStyles, PROM_CONFIG_LABEL_WIDTH } from './ConfigEditor';\n\ntype Props = {\n  value: ExemplarTraceIdDestination;\n  onChange: (value: ExemplarTraceIdDestination) => void;\n  onDelete: () => void;\n  disabled?: boolean;\n};\n\nexport default function ExemplarSetting({ value, onChange, onDelete, disabled }: Props) {\n  const [isInternalLink, setIsInternalLink] = useState(Boolean(value.datasourceUid));\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  return (\n    <div className=\"gf-form-group\">\n      <InlineField\n        label=\"Internal link\"\n        labelWidth={PROM_CONFIG_LABEL_WIDTH}\n        disabled={disabled}\n        tooltip={\n          <>\n            Enable this option if you have an internal link. When enabled, this reveals the data source selector. Select\n            the backend tracing data store for your exemplar data. {docsTip()}\n          </>\n        }\n        interactive={true}\n        className={styles.switchField}\n      >\n        <>\n          <Switch\n            value={isInternalLink}\n            aria-label={selectors.components.DataSource.Prometheus.configPage.internalLinkSwitch}\n            onChange={(ev) => setIsInternalLink(ev.currentTarget.checked)}\n          />\n        </>\n      </InlineField>\n\n      {isInternalLink ? (\n        <InlineField\n          label=\"Data source\"\n          labelWidth={PROM_CONFIG_LABEL_WIDTH}\n          tooltip={<>The data source the exemplar is going to navigate to. {docsTip()}</>}\n          disabled={disabled}\n          interactive={true}\n        >\n          <DataSourcePicker\n            tracing={true}\n            current={value.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds) =>\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n                url: undefined,\n              })\n            }\n          />\n        </InlineField>\n      ) : (\n        <InlineField\n          label=\"URL\"\n          labelWidth={PROM_CONFIG_LABEL_WIDTH}\n          tooltip={<>The URL of the trace backend the user would go to see its trace. {docsTip()}</>}\n          disabled={disabled}\n          interactive={true}\n        >\n          <Input\n            placeholder=\"https://example.com/${__value.raw}\"\n            spellCheck={false}\n            width={40}\n            value={value.url}\n            onChange={(event) =>\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n                url: event.currentTarget.value,\n              })\n            }\n          />\n        </InlineField>\n      )}\n\n      <InlineField\n        label=\"URL Label\"\n        labelWidth={PROM_CONFIG_LABEL_WIDTH}\n        tooltip={<>Use to override the button label on the exemplar traceID field. {docsTip()}</>}\n        disabled={disabled}\n        interactive={true}\n      >\n        <Input\n          placeholder=\"Go to example.com\"\n          spellCheck={false}\n          width={40}\n          value={value.urlDisplayLabel}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              urlDisplayLabel: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n      <InlineField\n        label=\"Label name\"\n        labelWidth={PROM_CONFIG_LABEL_WIDTH}\n        tooltip={<>The name of the field in the labels object that should be used to get the traceID. {docsTip()}</>}\n        disabled={disabled}\n        interactive={true}\n      >\n        <Input\n          placeholder=\"traceID\"\n          spellCheck={false}\n          width={40}\n          value={value.name}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              name: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n      {!disabled && (\n        <InlineField label=\"Remove exemplar link\" labelWidth={PROM_CONFIG_LABEL_WIDTH} disabled={disabled}>\n          <Button\n            variant=\"destructive\"\n            title=\"Remove exemplar link\"\n            icon=\"times\"\n            onClick={(event) => {\n              event.preventDefault();\n              onDelete();\n            }}\n          />\n        </InlineField>\n      )}\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\nimport { overhaulStyles } from './ConfigEditor';\nimport ExemplarSetting from './ExemplarSetting';\n\ntype Props = {\n  options?: ExemplarTraceIdDestination[];\n  onChange: (value: ExemplarTraceIdDestination[]) => void;\n  disabled?: boolean;\n};\n\nexport function ExemplarsSettings({ options, onChange, disabled }: Props) {\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n  return (\n    <div className={styles.sectionBottomPadding}>\n      <h3 className=\"page-heading\">Exemplars</h3>\n\n      {options &&\n        options.map((option, index) => {\n          return (\n            <ExemplarSetting\n              key={index}\n              value={option}\n              onChange={(newField) => {\n                const newOptions = [...options];\n                newOptions.splice(index, 1, newField);\n                onChange(newOptions);\n              }}\n              onDelete={() => {\n                const newOptions = [...options];\n                newOptions.splice(index, 1);\n                onChange(newOptions);\n              }}\n              disabled={disabled}\n            />\n          );\n        })}\n\n      {!disabled && (\n        <Button\n          variant=\"secondary\"\n          aria-label={selectors.components.DataSource.Prometheus.configPage.exemplarsAddButton}\n          className={css`\n            margin-bottom: 10px;\n          `}\n          icon=\"plus\"\n          onClick={(event) => {\n            event.preventDefault();\n            const newOptions = [...(options || []), { name: 'traceID' }];\n            onChange(newOptions);\n          }}\n        >\n          Add\n        </Button>\n      )}\n      {disabled && !options && <i>No exemplars configurations</i>}\n    </div>\n  );\n}\n","export const PromFlavorVersions: { [index: string]: Array<{ value?: string; label: string }> } = {\n  Prometheus: [\n    { value: undefined, label: 'Please select' },\n    { value: '2.0.0', label: '< 2.14.x' },\n    { value: '2.14.0', label: '2.14.x' },\n    { value: '2.15.0', label: '2.15.x' },\n    { value: '2.16.0', label: '2.16.x' },\n    { value: '2.17.0', label: '2.17.x' },\n    { value: '2.18.0', label: '2.18.x' },\n    { value: '2.19.0', label: '2.19.x' },\n    { value: '2.20.0', label: '2.20.x' },\n    { value: '2.21.0', label: '2.21.x' },\n    { value: '2.22.0', label: '2.22.x' },\n    { value: '2.23.0', label: '2.23.x' },\n    { value: '2.24.0', label: '2.24.x' },\n    { value: '2.25.0', label: '2.25.x' },\n    { value: '2.26.0', label: '2.26.x' },\n    { value: '2.27.0', label: '2.27.x' },\n    { value: '2.28.0', label: '2.28.x' },\n    { value: '2.29.0', label: '2.29.x' },\n    { value: '2.30.0', label: '2.30.x' },\n    { value: '2.31.0', label: '2.31.x' },\n    { value: '2.32.0', label: '2.32.x' },\n    { value: '2.33.0', label: '2.33.x' },\n    { value: '2.34.0', label: '2.34.x' },\n    { value: '2.35.0', label: '2.35.x' },\n    { value: '2.36.0', label: '2.36.x' },\n    { value: '2.37.0', label: '2.37.x' },\n    { value: '2.38.0', label: '2.38.x' },\n    { value: '2.39.0', label: '2.39.x' },\n    { value: '2.40.0', label: '2.40.x' },\n\n    // This value will be returned for future versions of prometheus until we add new entries to this object\n    { value: '2.40.1', label: '> 2.40.x' },\n  ],\n  Mimir: [\n    { value: undefined, label: 'Please select' },\n    { value: '2.0.0', label: '2.0.x' },\n    { value: '2.1.0', label: '2.1.x' },\n    { value: '2.2.0', label: '2.2.x' },\n    { value: '2.3.0', label: '2.3.x' },\n    { value: '2.4.0', label: '> 2.3.x' },\n  ],\n  Thanos: [\n    { value: undefined, label: 'Please select' },\n    { value: '0.0.0', label: '< 0.16.x' },\n    { value: '0.16.0', label: '0.16.x' },\n    { value: '0.17.0', label: '0.17.x' },\n    { value: '0.18.0', label: '0.18.x' },\n    { value: '0.19.0', label: '0.19.x' },\n    { value: '0.20.0', label: '0.20.x' },\n    { value: '0.21.0', label: '0.21.x' },\n    { value: '0.22.0', label: '0.22.x' },\n    { value: '0.23.0', label: '0.23.x' },\n    { value: '0.24.0', label: '0.24.x' },\n    { value: '0.25.0', label: '0.25.x' },\n    { value: '0.26.0', label: '0.26.x' },\n    { value: '0.27.0', label: '0.27.x' },\n    { value: '0.28.0', label: '0.28.x' },\n    { value: '0.29.0', label: '> 0.28.x' },\n  ],\n  Cortex: [\n    { value: undefined, label: 'Please select' },\n    { value: '0.0.0', label: '< 1.0.0' },\n    { value: '1.0.0', label: '1.0.0' },\n    { value: '1.1.0', label: '1.1.x' },\n    { value: '1.2.0', label: '1.2.x' },\n    { value: '1.3.0', label: '1.3.x' },\n    { value: '1.4.0', label: '1.4.x' },\n    { value: '1.5.0', label: '1.5.x' },\n    { value: '1.6.0', label: '1.6.x' },\n    { value: '1.7.0', label: '1.7.x' },\n    { value: '1.8.0', label: '1.8.x' },\n    { value: '1.9.0', label: '1.9.x' },\n    { value: '1.10.0', label: '1.10.x' },\n    { value: '1.11.0', label: '1.11.x' },\n    { value: '1.13.0', label: '1.13.x' },\n    { value: '1.14.0', label: '> 1.13.x' },\n  ],\n};\n","import React, { SyntheticEvent, useState } from 'react';\nimport semver from 'semver/preload';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  DataSourceSettings as DataSourceSettingsType,\n  onUpdateDatasourceJsonDataOptionChecked,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime/src';\nimport { InlineField, Input, Select, Switch, useTheme2 } from '@grafana/ui';\n\nimport config from '../../../../core/config';\nimport { useUpdateDatasource } from '../../../../features/datasources/state';\nimport { PromApplication, PromBuildInfoResponse } from '../../../../types/unified-alerting-dto';\nimport { QueryEditorMode } from '../querybuilder/shared/types';\nimport { defaultPrometheusQueryOverlapWindow } from '../querycache/QueryCache';\nimport { PrometheusCacheLevel, PromOptions } from '../types';\n\nimport { docsTip, overhaulStyles, PROM_CONFIG_LABEL_WIDTH, validateInput } from './ConfigEditor';\nimport { ExemplarsSettings } from './ExemplarsSettings';\nimport { PromFlavorVersions } from './PromFlavorVersions';\n\nconst httpOptions = [\n  { value: 'POST', label: 'POST' },\n  { value: 'GET', label: 'GET' },\n];\n\nconst editorOptions = [\n  { value: QueryEditorMode.Builder, label: 'Builder' },\n  { value: QueryEditorMode.Code, label: 'Code' },\n];\n\nconst cacheValueOptions = [\n  { value: PrometheusCacheLevel.Low, label: 'Low' },\n  { value: PrometheusCacheLevel.Medium, label: 'Medium' },\n  { value: PrometheusCacheLevel.High, label: 'High' },\n  { value: PrometheusCacheLevel.None, label: 'None' },\n];\n\ntype PrometheusSelectItemsType = Array<{ value: PromApplication; label: PromApplication }>;\n\nconst prometheusFlavorSelectItems: PrometheusSelectItemsType = [\n  { value: PromApplication.Prometheus, label: PromApplication.Prometheus },\n  { value: PromApplication.Cortex, label: PromApplication.Cortex },\n  { value: PromApplication.Mimir, label: PromApplication.Mimir },\n  { value: PromApplication.Thanos, label: PromApplication.Thanos },\n];\n\ntype Props = Pick<DataSourcePluginOptionsEditorProps<PromOptions>, 'options' | 'onOptionsChange'>;\n\n// single duration input\nexport const DURATION_REGEX = /^$|^\\d+(ms|[Mwdhmsy])$/;\n\n// multiple duration input\nexport const MULTIPLE_DURATION_REGEX = /(\\d+)(.+)/;\n\nconst durationError = 'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s';\n/**\n * Returns the closest version to what the user provided that we have in our PromFlavorVersions for the currently selected flavor\n * Bugs: It will only reject versions that are a major release apart, so Mimir 2.x might get selected for Prometheus 2.8 if the user selects an incorrect flavor\n * Advantages: We don't need to maintain a list of every possible version for each release\n *\n * This function will return the closest version from PromFlavorVersions that is equal or lower to the version argument,\n * unless the versions are a major release apart.\n */\nconst getVersionString = (version: string, flavor?: string): string | undefined => {\n  if (!flavor || !PromFlavorVersions[flavor]) {\n    return;\n  }\n  const flavorVersionValues = PromFlavorVersions[flavor];\n\n  // As long as it's assured we're using versions which are sorted, we could just filter out the values greater than the target version, and then check the last element in the array\n  const versionsLessThanOrEqual = flavorVersionValues\n    ?.filter((el) => !!el.value && semver.lte(el.value, version))\n    .map((el) => el.value);\n\n  const closestVersion = versionsLessThanOrEqual[versionsLessThanOrEqual.length - 1];\n\n  if (closestVersion) {\n    const differenceBetweenActualAndClosest = semver.diff(closestVersion, version);\n\n    // Only return versions if the target is close to the actual.\n    if (['patch', 'prepatch', 'prerelease', null].includes(differenceBetweenActualAndClosest)) {\n      return closestVersion;\n    }\n  }\n\n  return;\n};\n\nconst unableToDeterminePrometheusVersion = (error?: Error): void => {\n  console.warn('Error fetching version from buildinfo API, must manually select version!', error);\n};\n\n/**\n * I don't like the daisy chain of network requests, and that we have to save on behalf of the user, but currently\n * the backend doesn't allow for the prometheus client url to be passed in from the frontend, so we currently need to save it\n * to the database before consumption.\n *\n * Since the prometheus version fields are below the url field, we can expect users to populate this field before\n * hitting save and test at the bottom of the page. For this case we need to save the current fields before calling the\n * resource to auto-detect the version.\n *\n * @param options\n * @param onOptionsChange\n * @param onUpdate\n */\nconst setPrometheusVersion = (\n  options: DataSourceSettingsType<PromOptions>,\n  onOptionsChange: (options: DataSourceSettingsType<PromOptions>) => void,\n  onUpdate: (dataSource: DataSourceSettingsType<PromOptions>) => Promise<DataSourceSettingsType<PromOptions>>\n) => {\n  // This will save the current state of the form, as the url is needed for this API call to function\n  onUpdate(options)\n    .then((updatedOptions) => {\n      getBackendSrv()\n        .get(`/api/datasources/uid/${updatedOptions.uid}/resources/version-detect`)\n        .then((rawResponse: PromBuildInfoResponse) => {\n          const rawVersionStringFromApi = rawResponse.data?.version ?? '';\n          if (rawVersionStringFromApi && semver.valid(rawVersionStringFromApi)) {\n            const parsedVersion = getVersionString(rawVersionStringFromApi, updatedOptions.jsonData.prometheusType);\n            // If we got a successful response, let's update the backend with the version right away if it's new\n            if (parsedVersion) {\n              onUpdate({\n                ...updatedOptions,\n                jsonData: {\n                  ...updatedOptions.jsonData,\n                  prometheusVersion: parsedVersion,\n                },\n              }).then((updatedUpdatedOptions) => {\n                onOptionsChange(updatedUpdatedOptions);\n              });\n            }\n          } else {\n            unableToDeterminePrometheusVersion();\n          }\n        });\n    })\n    .catch((error) => {\n      unableToDeterminePrometheusVersion(error);\n    });\n};\n\nexport const PromSettings = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  // This update call is typed as void, but it returns a response which we need\n  const onUpdate = useUpdateDatasource();\n\n  // We are explicitly adding httpMethod so, it is correctly displayed in dropdown.\n  // This way, it is more predictable for users.\n  if (!options.jsonData.httpMethod) {\n    options.jsonData.httpMethod = 'POST';\n  }\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  type ValidDuration = {\n    timeInterval: string;\n    queryTimeout: string;\n    incrementalQueryOverlapWindow: string;\n  };\n\n  const [validDuration, updateValidDuration] = useState<ValidDuration>({\n    timeInterval: '',\n    queryTimeout: '',\n    incrementalQueryOverlapWindow: '',\n  });\n\n  return (\n    <>\n      <h3 className=\"page-heading\">Interval behaviour</h3>\n      <div className=\"gf-form-group\">\n        {/* Scrape interval */}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineField\n              label=\"Scrape interval\"\n              labelWidth={PROM_CONFIG_LABEL_WIDTH}\n              tooltip={\n                <>\n                  This interval is how frequently Prometheus scrapes targets. Set this to the typical scrape and\n                  evaluation interval configured in your Prometheus config file. If you set this to a greater value than\n                  your Prometheus config file interval, Grafana will evaluate the data according to this interval and\n                  you will see less data points. Defaults to 15s. {docsTip()}\n                </>\n              }\n              interactive={true}\n              disabled={options.readOnly}\n            >\n              <>\n                <Input\n                  className=\"width-20\"\n                  value={options.jsonData.timeInterval}\n                  spellCheck={false}\n                  placeholder=\"15s\"\n                  onChange={onChangeHandler('timeInterval', options, onOptionsChange)}\n                  onBlur={(e) => updateValidDuration({ ...validDuration, timeInterval: e.currentTarget.value })}\n                />\n                {validateInput(validDuration.timeInterval, DURATION_REGEX, durationError)}\n              </>\n            </InlineField>\n          </div>\n        </div>\n        {/* Query Timeout */}\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineField\n              label=\"Query timeout\"\n              labelWidth={PROM_CONFIG_LABEL_WIDTH}\n              tooltip={<>Set the Prometheus query timeout. {docsTip()}</>}\n              interactive={true}\n              disabled={options.readOnly}\n            >\n              <>\n                <Input\n                  className=\"width-20\"\n                  value={options.jsonData.queryTimeout}\n                  onChange={onChangeHandler('queryTimeout', options, onOptionsChange)}\n                  spellCheck={false}\n                  placeholder=\"60s\"\n                  onBlur={(e) => updateValidDuration({ ...validDuration, queryTimeout: e.currentTarget.value })}\n                />\n                {validateInput(validDuration.queryTimeout, DURATION_REGEX, durationError)}\n              </>\n            </InlineField>\n          </div>\n        </div>\n      </div>\n\n      <h3 className=\"page-heading\">Query editor</h3>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form\">\n          <InlineField\n            label=\"Default editor\"\n            labelWidth={PROM_CONFIG_LABEL_WIDTH}\n            tooltip={<>Set default editor option for all users of this data source. {docsTip()}</>}\n            interactive={true}\n            disabled={options.readOnly}\n          >\n            <Select\n              aria-label={`Default Editor (Code or Builder)`}\n              options={editorOptions}\n              value={\n                editorOptions.find((o) => o.value === options.jsonData.defaultEditor) ??\n                editorOptions.find((o) => o.value === QueryEditorMode.Builder)\n              }\n              onChange={onChangeHandler('defaultEditor', options, onOptionsChange)}\n              width={40}\n            />\n          </InlineField>\n        </div>\n        <div className=\"gf-form\">\n          <InlineField\n            labelWidth={PROM_CONFIG_LABEL_WIDTH}\n            label=\"Disable metrics lookup\"\n            tooltip={\n              <>\n                Checking this option will disable the metrics chooser and metric/label support in the query field&apos;s\n                autocomplete. This helps if you have performance issues with bigger Prometheus instances. {docsTip()}\n              </>\n            }\n            interactive={true}\n            disabled={options.readOnly}\n            className={styles.switchField}\n          >\n            <Switch\n              value={options.jsonData.disableMetricsLookup ?? false}\n              onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'disableMetricsLookup')}\n            />\n          </InlineField>\n        </div>\n      </div>\n\n      <h3 className=\"page-heading\">Performance</h3>\n      {!options.jsonData.prometheusType && !options.jsonData.prometheusVersion && options.readOnly && (\n        <div className={styles.versionMargin}>\n          For more information on configuring prometheus type and version in data sources, see the{' '}\n          <a\n            className={styles.textUnderline}\n            href=\"https://grafana.com/docs/grafana/latest/administration/provisioning/\"\n          >\n            provisioning documentation\n          </a>\n          .\n        </div>\n      )}\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineField\n              label=\"Prometheus type\"\n              labelWidth={PROM_CONFIG_LABEL_WIDTH}\n              tooltip={\n                <>\n                  Set this to the type of your prometheus database, e.g. Prometheus, Cortex, Mimir or Thanos. Changing\n                  this field will save your current settings, and attempt to detect the version. Certain types of\n                  Prometheus support or do not support various APIs. For example, some types support regex matching for\n                  label queries to improve performance. Some types have an API for metadata. If you set this incorrectly\n                  you may experience odd behavior when querying metrics and labels. Please check your Prometheus\n                  documentation to ensure you enter the correct type. {docsTip()}\n                </>\n              }\n              interactive={true}\n              disabled={options.readOnly}\n            >\n              <Select\n                aria-label=\"Prometheus type\"\n                options={prometheusFlavorSelectItems}\n                value={prometheusFlavorSelectItems.find((o) => o.value === options.jsonData.prometheusType)}\n                onChange={onChangeHandler(\n                  'prometheusType',\n                  {\n                    ...options,\n                    jsonData: { ...options.jsonData, prometheusVersion: undefined },\n                  },\n                  (options) => {\n                    // Check buildinfo api and set default version if we can\n                    setPrometheusVersion(options, onOptionsChange, onUpdate);\n                    return onOptionsChange({\n                      ...options,\n                      jsonData: { ...options.jsonData, prometheusVersion: undefined },\n                    });\n                  }\n                )}\n                width={40}\n              />\n            </InlineField>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          {options.jsonData.prometheusType && (\n            <div className=\"gf-form\">\n              <InlineField\n                label={`${options.jsonData.prometheusType} version`}\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    Use this to set the version of your {options.jsonData.prometheusType} instance if it is not\n                    automatically configured. {docsTip()}\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <Select\n                  aria-label={`${options.jsonData.prometheusType} type`}\n                  options={PromFlavorVersions[options.jsonData.prometheusType]}\n                  value={PromFlavorVersions[options.jsonData.prometheusType]?.find(\n                    (o) => o.value === options.jsonData.prometheusVersion\n                  )}\n                  onChange={onChangeHandler('prometheusVersion', options, onOptionsChange)}\n                  width={40}\n                />\n              </InlineField>\n            </div>\n          )}\n        </div>\n        {config.featureToggles.prometheusResourceBrowserCache && (\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <InlineField\n                label=\"Cache level\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    Sets the browser caching level for editor queries. Higher cache settings are recommended for high\n                    cardinality data sources.\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <Select\n                  width={40}\n                  onChange={onChangeHandler('cacheLevel', options, onOptionsChange)}\n                  options={cacheValueOptions}\n                  value={\n                    cacheValueOptions.find((o) => o.value === options.jsonData.cacheLevel) ?? PrometheusCacheLevel.Low\n                  }\n                />\n              </InlineField>\n            </div>\n          </div>\n        )}\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form max-width-30\">\n            <InlineField\n              label=\"Incremental querying (beta)\"\n              labelWidth={PROM_CONFIG_LABEL_WIDTH}\n              tooltip={\n                <>\n                  This feature will change the default behavior of relative queries to always request fresh data from\n                  the prometheus instance, instead query results will be cached, and only new records are requested.\n                  Turn this on to decrease database and network load.\n                </>\n              }\n              interactive={true}\n              className={styles.switchField}\n              disabled={options.readOnly}\n            >\n              <Switch\n                value={options.jsonData.incrementalQuerying ?? false}\n                onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'incrementalQuerying')}\n              />\n            </InlineField>\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          {options.jsonData.incrementalQuerying && (\n            <InlineField\n              label=\"Query overlap window\"\n              labelWidth={PROM_CONFIG_LABEL_WIDTH}\n              tooltip={\n                <>\n                  Set a duration like 10m or 120s or 0s. Default of 10 minutes. This duration will be added to the\n                  duration of each incremental request.\n                </>\n              }\n              interactive={true}\n              disabled={options.readOnly}\n            >\n              <>\n                <Input\n                  onBlur={(e) =>\n                    updateValidDuration({ ...validDuration, incrementalQueryOverlapWindow: e.currentTarget.value })\n                  }\n                  className=\"width-25\"\n                  value={options.jsonData.incrementalQueryOverlapWindow ?? defaultPrometheusQueryOverlapWindow}\n                  onChange={onChangeHandler('incrementalQueryOverlapWindow', options, onOptionsChange)}\n                  spellCheck={false}\n                />\n                {validateInput(validDuration.incrementalQueryOverlapWindow, MULTIPLE_DURATION_REGEX, durationError)}\n              </>\n            </InlineField>\n          )}\n        </div>\n      </div>\n\n      <h3 className=\"page-heading\">Other</h3>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form max-width-30\">\n            <InlineField\n              label=\"Custom query parameters\"\n              labelWidth={PROM_CONFIG_LABEL_WIDTH}\n              tooltip={\n                <>\n                  Add custom parameters to the Prometheus query URL. For example timeout, partial_response, dedup, or\n                  max_source_resolution. Multiple parameters should be concatenated together with an ‘&’. {docsTip()}\n                </>\n              }\n              interactive={true}\n              disabled={options.readOnly}\n            >\n              <Input\n                className=\"width-20\"\n                value={options.jsonData.customQueryParameters}\n                onChange={onChangeHandler('customQueryParameters', options, onOptionsChange)}\n                spellCheck={false}\n                placeholder=\"Example: max_source_resolution=5m&timeout=10\"\n              />\n            </InlineField>\n          </div>\n        </div>\n        <div className=\"gf-form-inline\">\n          {/* HTTP Method */}\n          <div className=\"gf-form\">\n            <InlineField\n              labelWidth={PROM_CONFIG_LABEL_WIDTH}\n              tooltip={\n                <>\n                  You can use either POST or GET HTTP method to query your Prometheus data source. POST is the\n                  recommended method as it allows bigger queries. Change this to GET if you have a Prometheus version\n                  older than 2.1 or if POST requests are restricted in your network. {docsTip()}\n                </>\n              }\n              interactive={true}\n              label=\"HTTP method\"\n              disabled={options.readOnly}\n            >\n              <Select\n                width={40}\n                aria-label=\"Select HTTP method\"\n                options={httpOptions}\n                value={httpOptions.find((o) => o.value === options.jsonData.httpMethod)}\n                onChange={onChangeHandler('httpMethod', options, onOptionsChange)}\n              />\n            </InlineField>\n          </div>\n        </div>\n      </div>\n      <ExemplarsSettings\n        options={options.jsonData.exemplarTraceIdDestinations}\n        onChange={(exemplarOptions) =>\n          updateDatasourcePluginJsonDataOption(\n            { onOptionsChange, options },\n            'exemplarTraceIdDestinations',\n            exemplarOptions\n          )\n        }\n        disabled={options.readOnly}\n      />\n    </>\n  );\n};\n\nexport const getValueFromEventItem = (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n  if (!eventItem) {\n    return '';\n  }\n\n  if (eventItem.hasOwnProperty('currentTarget')) {\n    return eventItem.currentTarget.value;\n  }\n\n  return (eventItem as SelectableValue<string>).value;\n};\n\nconst onChangeHandler =\n  (key: keyof PromOptions, options: Props['options'], onOptionsChange: Props['onOptionsChange']) =>\n  (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [key]: getValueFromEventItem(eventItem),\n      },\n    });\n  };\n","import { css } from '@emotion/css';\nimport React, { useRef } from 'react';\n\nimport { SIGV4ConnectionConfig } from '@grafana/aws-sdk';\nimport { DataSourcePluginOptionsEditorProps, DataSourceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, DataSourceHttpSettings, FieldValidationMessage, useTheme2 } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nimport { PromOptions } from '../types';\n\nimport { AlertingSettingsOverhaul } from './AlertingSettingsOverhaul';\nimport { AzureAuthSettings } from './AzureAuthSettings';\nimport { hasCredentials, setDefaultCredentials, resetCredentials } from './AzureCredentialsConfig';\nimport { PromSettings } from './PromSettings';\n\nexport const PROM_CONFIG_LABEL_WIDTH = 30;\n\nexport type Props = DataSourcePluginOptionsEditorProps<PromOptions>;\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  // use ref so this is evaluated only first time it renders and the select does not disappear suddenly.\n  const showAccessOptions = useRef(props.options.access === 'direct');\n\n  const azureAuthSettings = {\n    azureAuthSupported: config.azureAuthEnabled,\n    getAzureAuthEnabled: (config: DataSourceSettings<any, any>): boolean => hasCredentials(config),\n    setAzureAuthEnabled: (config: DataSourceSettings<any, any>, enabled: boolean) =>\n      enabled ? setDefaultCredentials(config) : resetCredentials(config),\n    azureSettingsUI: AzureAuthSettings,\n  };\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  return (\n    <>\n      {options.access === 'direct' && (\n        <Alert title=\"Error\" severity=\"error\">\n          Browser access mode in the Prometheus data source is no longer available. Switch to server access mode.\n        </Alert>\n      )}\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:9090\"\n        dataSourceConfig={options}\n        showAccessOptions={showAccessOptions.current}\n        onChange={onOptionsChange}\n        sigV4AuthToggleEnabled={config.sigV4AuthEnabled}\n        azureAuthSettings={azureAuthSettings}\n        renderSigV4Editor={<SIGV4ConnectionConfig {...props}></SIGV4ConnectionConfig>}\n        secureSocksDSProxyEnabled={config.secureSocksDSProxyEnabled}\n        urlLabel=\"Prometheus server URL\"\n        urlDocs={docsTip()}\n      />\n      <>\n        <hr className={styles.hrTopSpace} />\n        <h3 className={styles.sectionHeaderPadding}>Additional settings</h3>\n        <p className={`${styles.secondaryGrey} ${styles.subsectionText}`}>\n          Additional settings are optional settings that can be configured for more control over your data source.\n        </p>\n\n        <AlertingSettingsOverhaul<PromOptions> options={options} onOptionsChange={onOptionsChange} />\n\n        <PromSettings options={options} onOptionsChange={onOptionsChange} />\n      </>\n    </>\n  );\n};\n/**\n * Use this to return a url in a tooltip in a field. Don't forget to make the field interactive to be able to click on the tooltip\n * @param url\n * @returns\n */\nexport function docsTip(url?: string) {\n  const docsUrl = 'https://grafana.com/docs/grafana/latest/datasources/prometheus/#configure-the-data-source';\n\n  return (\n    <a href={url ? url : docsUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n      Visit docs for more details here.\n    </a>\n  );\n}\n\nexport const validateInput = (\n  input: string,\n  pattern: string | RegExp,\n  errorMessage?: string\n): boolean | JSX.Element => {\n  const defaultErrorMessage = 'Value is not valid';\n  if (input && !input.match(pattern)) {\n    return <FieldValidationMessage>{errorMessage ? errorMessage : defaultErrorMessage}</FieldValidationMessage>;\n  } else {\n    return true;\n  }\n};\n\nexport function overhaulStyles(theme: GrafanaTheme2) {\n  return {\n    additionalSettings: css`\n      margin-bottom: 25px;\n    `,\n    secondaryGrey: css`\n      color: ${theme.colors.secondary.text};\n      opacity: 65%;\n    `,\n    inlineError: css`\n      margin: 0px 0px 4px 245px;\n    `,\n    switchField: css`\n      align-items: center;\n    `,\n    sectionHeaderPadding: css`\n      padding-top: 32px;\n    `,\n    sectionBottomPadding: css`\n      padding-bottom: 28px;\n    `,\n    subsectionText: css`\n      font-size: 12px;\n    `,\n    hrBottomSpace: css`\n      margin-bottom: 56px;\n    `,\n    hrTopSpace: css`\n      margin-top: 50px;\n    `,\n    textUnderline: css`\n      text-decoration: underline;\n    `,\n    versionMargin: css`\n      margin-bottom: 12px;\n    `,\n  };\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport PromCheatSheet from './components/PromCheatSheet';\nimport PromQueryEditorByApp from './components/PromQueryEditorByApp';\nimport { ConfigEditor } from './configuration/ConfigEditor';\nimport { PrometheusDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(PrometheusDatasource)\n  .setQueryEditor(PromQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(PromCheatSheet);\n","/**\n * Shared types that can be reused by Loki and other data sources\n */\n\nimport { ComponentType } from 'react';\n\nimport { DataSourceApi, RegistryItem, SelectableValue } from '@grafana/data';\n\nexport interface QueryBuilderLabelFilter {\n  label: string;\n  op: string;\n  value: string;\n}\n\nexport interface QueryBuilderOperation {\n  id: string;\n  params: QueryBuilderOperationParamValue[];\n}\n\nexport interface QueryWithOperations {\n  operations: QueryBuilderOperation[];\n}\n\nexport interface QueryBuilderOperationDef<T = any> extends RegistryItem {\n  documentation?: string;\n  params: QueryBuilderOperationParamDef[];\n  defaultParams: QueryBuilderOperationParamValue[];\n  category: string;\n  hideFromList?: boolean;\n  alternativesKey?: string;\n  /** Can be used to control operation placement when adding a new operations, lower are placed first */\n  orderRank?: number;\n  renderer: QueryBuilderOperationRenderer;\n  addOperationHandler: QueryBuilderAddOperationHandler<T>;\n  paramChangedHandler?: QueryBuilderOnParamChangedHandler;\n  explainHandler?: QueryBuilderExplainOperationHandler;\n  changeTypeHandler?: (op: QueryBuilderOperation, newDef: QueryBuilderOperationDef<T>) => QueryBuilderOperation;\n}\n\nexport type QueryBuilderAddOperationHandler<T> = (\n  def: QueryBuilderOperationDef,\n  query: T,\n  modeller: VisualQueryModeller\n) => T;\n\nexport type QueryBuilderExplainOperationHandler = (op: QueryBuilderOperation, def?: QueryBuilderOperationDef) => string;\n\nexport type QueryBuilderOnParamChangedHandler = (\n  index: number,\n  operation: QueryBuilderOperation,\n  operationDef: QueryBuilderOperationDef\n) => QueryBuilderOperation;\n\nexport type QueryBuilderOperationRenderer = (\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) => string;\n\nexport type QueryBuilderOperationParamValue = string | number | boolean;\n\nexport interface QueryBuilderOperationParamDef {\n  name: string;\n  type: 'string' | 'number' | 'boolean';\n  options?: string[] | number[] | Array<SelectableValue<string>>;\n  hideName?: boolean;\n  restParam?: boolean;\n  optional?: boolean;\n  placeholder?: string;\n  description?: string;\n  minWidth?: number;\n  editor?: ComponentType<QueryBuilderOperationParamEditorProps>;\n  runQueryOnEnter?: boolean;\n}\n\nexport interface QueryBuilderOperationEditorProps {\n  operation: QueryBuilderOperation;\n  index: number;\n  query: any;\n  datasource: DataSourceApi;\n  queryModeller: VisualQueryModeller;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\nexport interface QueryBuilderOperationParamEditorProps {\n  value?: QueryBuilderOperationParamValue;\n  paramDef: QueryBuilderOperationParamDef;\n  /** Parameter index */\n  index: number;\n  operation: QueryBuilderOperation;\n  operationIndex: number;\n  query: any;\n  datasource: DataSourceApi;\n  onChange: (index: number, value: QueryBuilderOperationParamValue) => void;\n  onRunQuery: () => void;\n}\n\nexport enum QueryEditorMode {\n  Code = 'code',\n  Builder = 'builder',\n}\n\nexport interface VisualQueryModeller {\n  getOperationsForCategory(category: string): QueryBuilderOperationDef[];\n  getAlternativeOperations(key: string): QueryBuilderOperationDef[];\n  getCategories(): string[];\n  getOperationDef(id: string): QueryBuilderOperationDef | undefined;\n}\n"],"names":["createRangeOperation","name","isRangeOperationWithGrouping","params","getRangeVectorParamDef","defaultParams","paramChangedHandler","operationWithRangeVectorRenderer","addLokiOperation","op","def","opDocs","x","createRangeOperationWithGrouping","rangeOperation","getRangeAggregationWithGroupingRenderer","aggregation","grouping","model","innerExpr","restParamIndex","param","restParams","rangeVector","quantile","labelFilterRenderer","isConflictingFilter","operation","queryOperations","operationIsNegative","queryOperation","candidate","pipelineRenderer","isRangeVectorFunction","getIndexOfOrLast","operations","queryModeller","condition","index","opDef","query","modeller","newOperation","existingRangeVectorFunction","placeToInsert","addNestedQueryHandler","getLineFilterRenderer","caseInsensitive","LokiQueryPatternType","LokiVisualQueryOperationCategory","LokiOperationId","LokiOperationOrder","lokiOperators","CHEAT_SHEET_ITEMS","props","item","e","QueryPattern","pattern","onPatternSelect","hasNewQueryOption","hasPreviousQuery","selectedPatternName","setSelectedPatternName","styles","getStyles","lang","promql","Card","RawQuery","Button","theme","QueryPatternsModal","isOpen","onClose","onChange","onAddQuery","queries","app","openTabs","setOpenTabs","visualQuery","hasOperations","hasMetric","hasLabels","hasBinaryQueries","selectAsNewQuery","Modal","patternType","Collapse","tabs","t","queryEditorModeDefaultLocalStorageKey","changeEditorMode","editorMode","store","getDefaultEditorMode","expr","defaultEditor","value","getQueryWithDefaults","result","isBothInstantAndRange","FeedbackLink","feedbackUrl","Icon","disableTextWrap","LetterSearch","filteredMetrics","updateLetterSearch","letterSearch","alphabetDictionary","alphabetCheck","m","idx","metricFirstLetter","alphabet","letter","active","setLetterSearch","selectedClass","activeClass","check","char","ResultsTable","metrics","state","selectedIdx","tableRef","isSelectedRow","selectMetric","metric","metaRows","rowHoverBg","DEFAULT_RESULTS_PER_PAGE","MAXIMUM_RESULTS_PER_PAGE","stateSlice","initialState","action","getSettings","visQuery","setFilteredMetricCount","setMetrics","datasource","initialMetrics","hasMetadata","metadata","nameHaystackDictionaryData","metaHaystackDictionaryData","metricsData","type","description","metaDataString","metricData","displayedMetrics","dispatch","filteredSorted","filterMetrics","sliceMetrics","skipLetterSearch","needle","matchesSelectedType","hasNoType","calculatePageList","calcResultsPerPage","pages","i","pageNum","resultsPerPage","start","end","calculateResultsPerPage","results","defaultResults","max","getBackendSearchMetrics","metricText","labels","queryString","labelsParams","label","promTypes","placeholders","uf","fuzzySearch","haystack","dispatcher","idxs","info","order","haystackOrder","matchesSet","mark","part","matched","infoIdx","debouncedFuzzySearch","setIsLoading","buildMetrics","filterMetricsBackend","setResultsPerPage","setPageNum","setFuzzySearchQuery","setNameHaystack","setMetaHaystack","setFullMetaSearch","setExcludeNullMetadata","setSelectedTypes","setUseBackend","setSelectedIdx","setDisableTextWrap","showAdditionalSettings","MetricsModal","updateMetricsMetadata","data","typeOptions","debouncedBackendSearch","fuzzyNameDispatch","haystackData","fuzzyMetaDispatch","fuzzySearchCallback","fullMetaSearchVal","keyFunction","testIds","Input","v","Spinner","Switch","newVal","InlineField","Pagination","val","splitSeparator","PROMETHEUS_QUERY_BUILDER_MAX_RESULTS","prometheusMetricEncyclopedia","config","MetricSelect","onGetMetrics","labelsFilters","metricLookupDisabled","setState","customFilterOption","option","searchQuery","acc","cur","formatOptionLabel","meta","formatKeyValueStringsForLabelValuesQuery","formatPrometheusLabelFiltersToString","getMetricLabels","metricLookupDisabledSearch","debouncedSearch","CustomOption","isFocused","SelectMenu","filterArray","formatPrometheusLabelFilters","LabelFilterItem","defaultOp","onDelete","onGetLabelNames","onGetLabelValues","invalidLabel","invalidValue","getLabelValuesAutofillSuggestions","debounceDuration","labelNamesMenuOpen","setLabelNamesMenuOpen","labelValuesMenuOpen","setLabelValuesMenuOpen","isMultiSelect","operator","operators","getSelectOptionsFromString","labelValueSearch","Select","selectors","labelNames","change","labelValues","changes","MISSING_LABEL_FILTER_ERROR_MESSAGE","LabelFilters","labelFilterRequired","items","setItems","onLabelsChange","newItems","newLabels","hasLabelFilter","onChangeItem","NestedQuery","nestedQuery","onRemove","onRunQuery","showExplain","AutoSizeInput","evt","IconButton","PromQueryBuilder","update","NestedQueryList","nestedQueries","onNestedQueryUpdate","updatedList","highlightedOp","setHighlightedOp","onChangeLabels","withTemplateVariableOptions","optionsPromise","variables","options","forLabel","k","labelsToConsider","labelsIndex","labelName","filter","getLabelValuesAutocompleteSuggestions","interpolatedLabelsToConsider","labelObject","response","getLabelValuesFromLabelValuesAPI","getLabelValuesFromSeriesAPI","promQLExpression","forLabelInterpolated","set","labelValue","labelNameString","getMetrics","initHints","OperationExplainedBox","OperationsEditorRow","OperationList","QueryBuilderHints","OperationListExplained","QueryPreview","PromQueryBuilderContainer","exprChanged","setMetricsModalSettings","onVisQueryChange","visualQueryChange","metricsModalSettings","parseResult","PromExemplarField","rest","error","setError","prevError","usePrevious","iconButtonStyles","InlineLabel","Tooltip","PromExploreExtraField","rangeOptions","getQueryTypeOptions","prevQuery","onExemplarChange","exemplar","onChangeQueryStep","interval","onStepChange","onReturnKeyDown","onQueryTypeChange","getQueryTypeChangeHandler","RadioButtonGroup","includeBoth","queryType","legendModeOptions","PromQueryLegendEditor","legendFormat","mode","getLegendMode","inputRef","onLegendFormatChanged","newFormat","onLegendModeChanged","getLegendModeLabel","PromQueryBuilderOptions","onChangeFormat","onChangeStep","queryTypeOptions","event","isEnabled","onIntervalFactorChange","formatOption","FORMAT_OPTIONS","queryTypeValue","getQueryTypeValue","queryTypeLabel","QueryOptionGroup","getCollapsedInfo","shouldShowExemplarSwitch","INTERVAL_FACTOR_OPTIONS","PromQueryEditorSelector","parseModalOpen","setParseModalOpen","queryPatternsModalOpen","setQueryPatternsModalOpen","dataIsStale","setDataIsStale","explain","setExplain","useFlag","onEditorModeChange","newMetricEditorMode","onChangeInternal","onShowExplainChange","ConfirmModal","prevValue","QueryHeaderSwitch","QueryEditorModeToggle","PromQueryCodeEditor","PromQueryEditorForAlerting","range","PromQueryField","PromQueryEditorByApp","AlertingSettingsOverhaul","onOptionsChange","overhaulStyles","docsTip","AzureCloud","KnownAzureClouds","isCredentialsComplete","credentials","concealed","getDefaultAzureCloud","getSecret","secret","hasCredentials","getDefaultCredentials","getCredentials","updateCredentials","setDefaultCredentials","resetCredentials","authTypeOptions","AzureCredentialsForm","azureCloudOptions","onCredentialsChange","getSubscriptions","disabled","hasRequiredFields","subscriptions","setSubscriptions","loadSubscriptionsClicked","onLoadSubscriptions","updateSubscriptions","canceled","received","autoSelect","onSubscriptionChange","opt","onAuthTypeChange","selected","updated","onAzureCloudChange","onTenantIdChange","onClientIdChange","onClientSecretChange","onClientSecretReset","AzureAuthSettings","dataSourceConfig","overrideAudienceAllowed","overrideAudienceChecked","setOverrideAudienceChecked","onOverrideAudienceChange","ev","onResourceIdChange","InlineFieldRow","ExemplarSetting","isInternalLink","setIsInternalLink","PROM_CONFIG_LABEL_WIDTH","DataSourcePicker","ds","ExemplarsSettings","newField","newOptions","PromFlavorVersions","httpOptions","editorOptions","cacheValueOptions","prometheusFlavorSelectItems","DURATION_REGEX","MULTIPLE_DURATION_REGEX","durationError","getVersionString","version","flavor","versionsLessThanOrEqual","el","closestVersion","differenceBetweenActualAndClosest","unableToDeterminePrometheusVersion","setPrometheusVersion","onUpdate","updatedOptions","rawResponse","rawVersionStringFromApi","parsedVersion","updatedUpdatedOptions","PromSettings","validDuration","updateValidDuration","onChangeHandler","validateInput","o","exemplarOptions","getValueFromEventItem","eventItem","key","ConfigEditor","showAccessOptions","azureAuthSettings","enabled","Alert","DataSourceHttpSettings","url","docsUrl","input","errorMessage","defaultErrorMessage","FieldValidationMessage","QueryEditorMode"],"sourceRoot":""}