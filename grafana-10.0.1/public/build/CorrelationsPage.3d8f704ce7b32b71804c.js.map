{"version":3,"file":"CorrelationsPage.3d8f704ce7b32b71804c.js","mappings":"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","sources":["webpack://grafana/./public/app/features/correlations/components/Wizard/wizardContext.tsx","webpack://grafana/./public/app/features/correlations/components/Wizard/WizardContent.tsx","webpack://grafana/./public/app/features/correlations/components/Wizard/Wizard.tsx","webpack://grafana/./public/app/features/correlations/Forms/correlationsFormContext.tsx","webpack://grafana/./public/app/features/correlations/Forms/utils.ts","webpack://grafana/./public/app/features/correlations/Forms/ConfigureCorrelationBasicInfoForm.tsx","webpack://grafana/./public/app/features/correlations/Forms/TransformationsEditor.tsx","webpack://grafana/./public/app/features/correlations/Forms/ConfigureCorrelationSourceForm.tsx","webpack://grafana/./public/app/features/correlations/Forms/QueryEditorField.tsx","webpack://grafana/./public/app/features/correlations/Forms/ConfigureCorrelationTargetForm.tsx","webpack://grafana/./public/app/features/correlations/Forms/CorrelationFormNavigation.tsx","webpack://grafana/./public/app/features/correlations/Forms/AddCorrelationForm.tsx","webpack://grafana/./public/app/features/correlations/Forms/EditCorrelationForm.tsx","webpack://grafana/./public/app/features/correlations/components/EmptyCorrelationsCTA.tsx","webpack://grafana/./public/app/features/correlations/CorrelationsPage.tsx","webpack://grafana/./public/app/features/correlations/useCorrelations.ts"],"sourcesContent":["import React, { createContext, PropsWithChildren, useContext, useState } from 'react';\nimport { FieldValues } from 'react-hook-form';\n\nexport type WizardContextProps<T> = {\n  currentPage: number;\n  nextPage: () => void;\n  prevPage: () => void;\n  isLastPage: boolean;\n  onSubmit: (data: T) => void;\n  CurrentPageComponent: React.ComponentType;\n};\n\nexport const WizardContext = createContext<WizardContextProps<FieldValues> | undefined>(undefined);\n\n/**\n * Dependencies provided to Wizard component required to build WizardContext\n */\ntype WizardContextProviderDeps<T> = {\n  pages: React.ComponentType[];\n  onSubmit: (data: T) => void;\n};\n\n/**\n * Context providing current state and logic of a Wizard. Can be used by pages and navigation components.\n */\nexport function WizardContextProvider<T>(props: PropsWithChildren<WizardContextProviderDeps<T>>) {\n  const [currentPage, setCurrentPage] = useState(0);\n  const { pages, onSubmit, children } = props;\n\n  return (\n    <WizardContext.Provider\n      value={{\n        currentPage,\n        CurrentPageComponent: pages[currentPage],\n        isLastPage: currentPage === pages.length - 1,\n        nextPage: () => setCurrentPage(currentPage + 1),\n        prevPage: () => setCurrentPage(currentPage - 1),\n        // @ts-expect-error\n        onSubmit,\n      }}\n    >\n      {children}\n    </WizardContext.Provider>\n  );\n}\n\nexport const useWizardContext = () => {\n  const ctx = useContext(WizardContext);\n\n  if (!ctx) {\n    throw new Error('useWizardContext must be used within a WizardContextProvider');\n  }\n  return ctx;\n};\n","import React from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { useWizardContext } from './wizardContext';\n\ntype Props = {\n  navigation: React.ComponentType;\n};\n\nexport function WizardContent(props: Props) {\n  const { navigation } = props;\n  const { handleSubmit } = useFormContext();\n  const { CurrentPageComponent, isLastPage, nextPage, onSubmit } = useWizardContext();\n\n  const NavigationComponent = navigation;\n\n  return (\n    <form\n      onSubmit={handleSubmit((data) => {\n        if (isLastPage) {\n          onSubmit(data);\n        } else {\n          nextPage();\n        }\n      })}\n    >\n      <CurrentPageComponent />\n      <NavigationComponent />\n    </form>\n  );\n}\n","import React from 'react';\nimport { useForm, FormProvider, FieldValues } from 'react-hook-form';\n\nimport { WizardContent } from './WizardContent';\nimport { WizardProps } from './types';\nimport { WizardContextProvider } from './wizardContext';\n\nexport function Wizard<T extends FieldValues>(props: WizardProps<T>) {\n  const { defaultValues, pages, onSubmit, navigation } = props;\n  const formMethods = useForm<T>({ defaultValues });\n  return (\n    <FormProvider {...formMethods}>\n      <WizardContextProvider pages={pages} onSubmit={onSubmit}>\n        <WizardContent navigation={navigation} />\n      </WizardContextProvider>\n    </FormProvider>\n  );\n}\n","import React, { createContext, PropsWithChildren, useContext } from 'react';\n\nimport { Correlation } from '../types';\n\nexport type CorrelationsFormContextData = {\n  loading: boolean;\n  correlation?: Correlation;\n  readOnly: boolean;\n};\n\nexport const CorrelationsFormContext = createContext<CorrelationsFormContextData>({\n  loading: false,\n  correlation: undefined,\n  readOnly: false,\n});\n\ntype Props = {\n  data: CorrelationsFormContextData;\n};\n\nexport const CorrelationsFormContextProvider = (props: PropsWithChildren<Props>) => {\n  const { data, children } = props;\n  return <CorrelationsFormContext.Provider value={data}>{children}</CorrelationsFormContext.Provider>;\n};\n\nexport const useCorrelationsFormContext = () => {\n  return useContext(CorrelationsFormContext);\n};\n","import { Correlation } from '../types';\n\ntype CorrelationBaseData = Pick<Correlation, 'uid' | 'sourceUID' | 'targetUID'>;\n\nexport const getInputId = (inputName: string, correlation?: CorrelationBaseData) => {\n  if (!correlation) {\n    return inputName;\n  }\n\n  return `${inputName}_${correlation.sourceUID}-${correlation.uid}`;\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, FieldSet, Input, TextArea, useStyles2 } from '@grafana/ui';\n\nimport { useCorrelationsFormContext } from './correlationsFormContext';\nimport { FormDTO } from './types';\nimport { getInputId } from './utils';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  label: css`\n    max-width: ${theme.spacing(80)};\n  `,\n  description: css`\n    max-width: ${theme.spacing(80)};\n  `,\n});\n\nexport const ConfigureCorrelationBasicInfoForm = () => {\n  const { register, formState } = useFormContext<FormDTO>();\n  const styles = useStyles2(getStyles);\n  const { correlation, readOnly } = useCorrelationsFormContext();\n\n  return (\n    <>\n      <FieldSet label=\"Define correlation name (1/3)\">\n        <p>The name of the correlation is used as the label of the link.</p>\n        <input type=\"hidden\" {...register('config.type')} />\n        <Field\n          label=\"Label\"\n          description=\"This name is be used as the label of the link button\"\n          className={styles.label}\n          invalid={!!formState.errors.label}\n          error={formState.errors.label?.message}\n        >\n          <Input\n            id={getInputId('label', correlation)}\n            {...register('label', { required: { value: true, message: 'This field is required.' } })}\n            readOnly={readOnly}\n            placeholder=\"e.g. Tempo traces\"\n          />\n        </Field>\n\n        <Field\n          label=\"Description\"\n          description=\"Optional description with more information about the link\"\n          // the Field component automatically adds margin to itself, so we are forced to workaround it by overriding  its styles\n          className={cx(styles.description)}\n        >\n          <TextArea id={getInputId('description', correlation)} {...register('description')} readOnly={readOnly} />\n        </Field>\n      </FieldSet>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { compact, fill } from 'lodash';\nimport React, { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SupportedTransformationType } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport {\n  Button,\n  Field,\n  FieldArray,\n  Icon,\n  IconButton,\n  Input,\n  InputControl,\n  Label,\n  Select,\n  Tooltip,\n  useStyles2,\n} from '@grafana/ui';\n\ntype Props = { readOnly: boolean };\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  heading: css`\n    font-size: ${theme.typography.h5.fontSize};\n    font-weight: ${theme.typography.fontWeightRegular};\n  `,\n  // set fixed position from the top instead of centring as the container\n  // may get bigger when the for is invalid\n  removeButton: css`\n    margin-top: 25px;\n  `,\n});\n\nexport const TransformationsEditor = (props: Props) => {\n  const { control, formState, register, setValue, watch, getValues } = useFormContext();\n  const { readOnly } = props;\n  const [keptVals, setKeptVals] = useState<Array<{ expression?: string; mapValue?: string }>>([]);\n\n  const styles = useStyles2(getStyles);\n\n  const transformOptions = getTransformOptions();\n  return (\n    <>\n      <input type=\"hidden\" {...register('id')} />\n      <FieldArray name=\"config.transformations\" control={control}>\n        {({ fields, append, remove }) => (\n          <>\n            <Stack direction=\"column\" alignItems=\"flex-start\">\n              <div className={styles.heading}>Transformations</div>\n              {fields.length === 0 && <div> No transformations defined.</div>}\n              {fields.length > 0 && (\n                <div>\n                  {fields.map((fieldVal, index) => {\n                    return (\n                      <Stack direction=\"row\" key={fieldVal.id} alignItems=\"top\">\n                        <Field\n                          label={\n                            <Stack gap={0.5}>\n                              <Label htmlFor={`config.transformations.${fieldVal.id}-${index}.type`}>Type</Label>\n                              <Tooltip\n                                content={\n                                  <div>\n                                    <p>The type of transformation that will be applied to the source data.</p>\n                                  </div>\n                                }\n                              >\n                                <Icon name=\"info-circle\" size=\"sm\" />\n                              </Tooltip>\n                            </Stack>\n                          }\n                          invalid={!!formState.errors?.config?.transformations?.[index]?.type}\n                          error={formState.errors?.config?.transformations?.[index]?.type?.message}\n                          validationMessageHorizontalOverflow={true}\n                        >\n                          <InputControl\n                            render={({ field: { onChange, ref, ...field } }) => {\n                              // input control field is not manipulated with remove, use value from control\n                              return (\n                                <Select\n                                  {...field}\n                                  value={fieldVal.type}\n                                  onChange={(value) => {\n                                    if (!readOnly) {\n                                      const currentValues = getValues().config.transformations[index];\n                                      let keptValsCopy = fill(Array(index + 1), {});\n                                      keptVals.forEach((keptVal, i) => (keptValsCopy[i] = keptVal));\n                                      keptValsCopy[index] = {\n                                        expression: currentValues.expression,\n                                        mapValue: currentValues.mapValue,\n                                      };\n\n                                      setKeptVals(keptValsCopy);\n\n                                      const newValueDetails = getSupportedTransTypeDetails(value.value);\n\n                                      if (newValueDetails.showExpression) {\n                                        setValue(\n                                          `config.transformations.${index}.expression`,\n                                          keptVals[index]?.expression || ''\n                                        );\n                                      } else {\n                                        setValue(`config.transformations.${index}.expression`, '');\n                                      }\n\n                                      if (newValueDetails.showMapValue) {\n                                        setValue(\n                                          `config.transformations.${index}.mapValue`,\n                                          keptVals[index]?.mapValue || ''\n                                        );\n                                      } else {\n                                        setValue(`config.transformations.${index}.mapValue`, '');\n                                      }\n\n                                      onChange(value.value);\n                                    }\n                                  }}\n                                  options={transformOptions}\n                                  width={25}\n                                  inputId={`config.transformations.${fieldVal.id}-${index}.type`}\n                                />\n                              );\n                            }}\n                            control={control}\n                            name={`config.transformations.${index}.type`}\n                            rules={{ required: { value: true, message: 'Please select a transformation type' } }}\n                          />\n                        </Field>\n                        <Field\n                          label={\n                            <Stack gap={0.5}>\n                              <Label htmlFor={`config.transformations.${fieldVal.id}.field`}>Field</Label>\n                              <Tooltip\n                                content={\n                                  <div>\n                                    <p>\n                                      Optional. The field to transform. If not specified, the transformation will be\n                                      applied to the results field.\n                                    </p>\n                                  </div>\n                                }\n                              >\n                                <Icon name=\"info-circle\" size=\"sm\" />\n                              </Tooltip>\n                            </Stack>\n                          }\n                        >\n                          <Input\n                            {...register(`config.transformations.${index}.field`)}\n                            readOnly={readOnly}\n                            defaultValue={fieldVal.field}\n                            label=\"field\"\n                            id={`config.transformations.${fieldVal.id}.field`}\n                          />\n                        </Field>\n                        <Field\n                          label={\n                            <Stack gap={0.5}>\n                              <Label htmlFor={`config.transformations.${fieldVal.id}.expression`}>\n                                Expression\n                                {getSupportedTransTypeDetails(watch(`config.transformations.${index}.type`))\n                                  .requireExpression\n                                  ? ' *'\n                                  : ''}\n                              </Label>\n                              <Tooltip\n                                content={\n                                  <div>\n                                    <p>\n                                      Required for regular expression. The expression the transformation will use.\n                                      Logfmt does not use further specifications.\n                                    </p>\n                                  </div>\n                                }\n                              >\n                                <Icon name=\"info-circle\" size=\"sm\" />\n                              </Tooltip>\n                            </Stack>\n                          }\n                          invalid={!!formState.errors?.config?.transformations?.[index]?.expression}\n                          error={formState.errors?.config?.transformations?.[index]?.expression?.message}\n                        >\n                          <Input\n                            {...register(`config.transformations.${index}.expression`, {\n                              required: getSupportedTransTypeDetails(watch(`config.transformations.${index}.type`))\n                                .requireExpression\n                                ? 'Please define an expression'\n                                : undefined,\n                            })}\n                            defaultValue={fieldVal.expression}\n                            readOnly={readOnly}\n                            disabled={\n                              !getSupportedTransTypeDetails(watch(`config.transformations.${index}.type`))\n                                .showExpression\n                            }\n                            id={`config.transformations.${fieldVal.id}.expression`}\n                          />\n                        </Field>\n                        <Field\n                          label={\n                            <Stack gap={0.5}>\n                              <Label htmlFor={`config.transformations.${fieldVal.id}.mapValue`}>Map value</Label>\n                              <Tooltip\n                                content={\n                                  <div>\n                                    <p>\n                                      Optional. Defines the name of the variable. This is currently only valid for\n                                      regular expressions with a single, unnamed capture group.\n                                    </p>\n                                  </div>\n                                }\n                              >\n                                <Icon name=\"info-circle\" size=\"sm\" />\n                              </Tooltip>\n                            </Stack>\n                          }\n                        >\n                          <Input\n                            {...register(`config.transformations.${index}.mapValue`)}\n                            defaultValue={fieldVal.mapValue}\n                            readOnly={readOnly}\n                            disabled={\n                              !getSupportedTransTypeDetails(watch(`config.transformations.${index}.type`)).showMapValue\n                            }\n                            id={`config.transformations.${fieldVal.id}.mapValue`}\n                          />\n                        </Field>\n                        {!readOnly && (\n                          <div className={styles.removeButton}>\n                            <IconButton\n                              type=\"button\"\n                              tooltip=\"Remove transformation\"\n                              name={'trash-alt'}\n                              onClick={() => {\n                                remove(index);\n                                const keptValsCopy: Array<{ expression?: string; mapValue?: string } | undefined> = [\n                                  ...keptVals,\n                                ];\n                                keptValsCopy[index] = undefined;\n                                setKeptVals(compact(keptValsCopy));\n                              }}\n                              ariaLabel=\"Remove transformation\"\n                            >\n                              Remove\n                            </IconButton>\n                          </div>\n                        )}\n                      </Stack>\n                    );\n                  })}\n                </div>\n              )}\n              {!readOnly && (\n                <Button\n                  icon=\"plus\"\n                  onClick={() => append({ type: undefined }, { shouldFocus: false })}\n                  variant=\"secondary\"\n                  type=\"button\"\n                >\n                  Add transformation\n                </Button>\n              )}\n            </Stack>\n          </>\n        )}\n      </FieldArray>\n    </>\n  );\n};\n\ninterface SupportedTransformationTypeDetails {\n  label: string;\n  value: string;\n  description?: string;\n  showExpression: boolean;\n  showMapValue: boolean;\n  requireExpression?: boolean;\n}\n\nfunction getSupportedTransTypeDetails(transType: SupportedTransformationType): SupportedTransformationTypeDetails {\n  switch (transType) {\n    case SupportedTransformationType.Logfmt:\n      return {\n        label: 'Logfmt',\n        value: SupportedTransformationType.Logfmt,\n        description: 'Parse provided field with logfmt to get variables',\n        showExpression: false,\n        showMapValue: false,\n      };\n    case SupportedTransformationType.Regex:\n      return {\n        label: 'Regular expression',\n        value: SupportedTransformationType.Regex,\n        description:\n          'Field will be parsed with regex. Use named capture groups to return multiple variables, or a single unnamed capture group to add variable to named map value.',\n        showExpression: true,\n        showMapValue: true,\n        requireExpression: true,\n      };\n    default:\n      return { label: transType, value: transType, showExpression: false, showMapValue: false };\n  }\n}\n\nconst getTransformOptions = () => {\n  return Object.values(SupportedTransformationType).map((transformationType) => {\n    const transType = getSupportedTransTypeDetails(transformationType);\n    return {\n      label: transType.label,\n      value: transType.value,\n      description: transType.description,\n    };\n  });\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Card, Field, FieldSet, Input, useStyles2 } from '@grafana/ui';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { getVariableUsageInfo } from '../../explore/utils/links';\n\nimport { TransformationsEditor } from './TransformationsEditor';\nimport { useCorrelationsFormContext } from './correlationsFormContext';\nimport { getInputId } from './utils';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  label: css`\n    max-width: ${theme.spacing(80)};\n  `,\n  variable: css`\n    font-family: ${theme.typography.fontFamilyMonospace};\n    font-weight: ${theme.typography.fontWeightMedium};\n  `,\n});\n\nexport const ConfigureCorrelationSourceForm = () => {\n  const { control, formState, register, getValues } = useFormContext();\n  const styles = useStyles2(getStyles);\n  const withDsUID = (fn: Function) => (ds: DataSourceInstanceSettings) => fn(ds.uid);\n\n  const { correlation, readOnly } = useCorrelationsFormContext();\n\n  const currentTargetQuery = getValues('config.target');\n  const variables = getVariableUsageInfo(currentTargetQuery, {}).variables.map(\n    (variable) => variable.variableName + (variable.fieldPath ? `.${variable.fieldPath}` : '')\n  );\n  return (\n    <>\n      <FieldSet label=\"Configure source data source (3/3)\">\n        <p>\n          Links are displayed with results of the selected origin source data. They show along with the value of the\n          provided <em>results field</em>.\n        </p>\n        <Controller\n          control={control}\n          name=\"sourceUID\"\n          rules={{\n            required: { value: true, message: 'This field is required.' },\n            validate: {\n              writable: (uid: string) =>\n                !getDatasourceSrv().getInstanceSettings(uid)?.readOnly || \"Source can't be a read-only data source.\",\n            },\n          }}\n          render={({ field: { onChange, value } }) => (\n            <Field\n              label=\"Source\"\n              description=\"Results from selected source data source have links displayed in the panel\"\n              htmlFor=\"source\"\n              invalid={!!formState.errors.sourceUID}\n              error={formState.errors.sourceUID?.message}\n            >\n              <DataSourcePicker\n                onChange={withDsUID(onChange)}\n                noDefault\n                current={value}\n                inputId=\"source\"\n                width={32}\n                disabled={correlation !== undefined}\n              />\n            </Field>\n          )}\n        />\n\n        <Field\n          label=\"Results field\"\n          description=\"The link will be shown next to the value of this field\"\n          className={styles.label}\n          invalid={!!formState.errors?.config?.field}\n          error={formState.errors?.config?.field?.message}\n        >\n          <Input\n            id={getInputId('field', correlation)}\n            {...register('config.field', { required: 'This field is required.' })}\n            readOnly={readOnly}\n          />\n        </Field>\n        {variables.length > 0 && (\n          <Card>\n            <Card.Heading>Variables used in the target query</Card.Heading>\n            <Card.Description>\n              You have used following variables in the target query:{' '}\n              {variables.map((name, i) => (\n                <span className={styles.variable} key={i}>\n                  {name}\n                  {i < variables.length - 1 ? ', ' : ''}\n                </span>\n              ))}\n              <br />A data point needs to provide values to all variables as fields or as transformations output to make\n              the correlation button appear in the visualization.\n              <br />\n              Note: Not every variable needs to be explicitly defined below. A transformation such as{' '}\n              <span className={styles.variable}>logfmt</span> will create variables for every key/value pair.\n            </Card.Description>\n          </Card>\n        )}\n        <TransformationsEditor readOnly={readOnly} />\n      </FieldSet>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { Controller } from 'react-hook-form';\nimport { useAsync } from 'react-use';\n\nimport { CoreApp, DataQuery, getDefaultTimeRange, GrafanaTheme2 } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport {\n  Field,\n  LoadingPlaceholder,\n  Alert,\n  Button,\n  HorizontalGroup,\n  Icon,\n  FieldValidationMessage,\n  useStyles2,\n} from '@grafana/ui';\n\nimport { generateKey } from '../../../core/utils/explore';\nimport { QueryTransaction } from '../../../types';\nimport { runRequest } from '../../query/state/runRequest';\n\ninterface Props {\n  dsUid?: string;\n  name: string;\n  invalid?: boolean;\n  error?: string;\n}\n\nfunction getStyle(theme: GrafanaTheme2) {\n  return {\n    valid: css`\n      color: ${theme.colors.success.text};\n    `,\n  };\n}\n\nexport const QueryEditorField = ({ dsUid, invalid, error, name }: Props) => {\n  const [isValidQuery, setIsValidQuery] = useState<boolean | undefined>(undefined);\n\n  const style = useStyles2(getStyle);\n\n  const {\n    value: datasource,\n    loading: dsLoading,\n    error: dsError,\n  } = useAsync(async () => {\n    if (!dsUid) {\n      return;\n    }\n    return getDataSourceSrv().get(dsUid);\n  }, [dsUid]);\n\n  const QueryEditor = datasource?.components?.QueryEditor;\n\n  const handleValidation = (value: DataQuery) => {\n    const interval = '1s';\n    const intervalMs = 1000;\n    const id = generateKey();\n    const queries = [{ ...value, refId: 'A' }];\n\n    const transaction: QueryTransaction = {\n      queries,\n      request: {\n        app: CoreApp.Correlations,\n        timezone: 'utc',\n        startTime: Date.now(),\n        interval,\n        intervalMs,\n        targets: queries,\n        range: getDefaultTimeRange(),\n        requestId: 'correlations_' + id,\n        scopedVars: {\n          __interval: { text: interval, value: interval },\n          __interval_ms: { text: intervalMs, value: intervalMs },\n        },\n      },\n      id,\n      done: false,\n    };\n\n    if (datasource) {\n      runRequest(datasource, transaction.request).subscribe((panelData) => {\n        if (\n          !panelData ||\n          panelData.state === 'Error' ||\n          (panelData.state === 'Done' && panelData.series.length === 0)\n        ) {\n          setIsValidQuery(false);\n        } else if (\n          panelData.state === 'Done' &&\n          panelData.series.length > 0 &&\n          Boolean(panelData.series.find((element) => element.length > 0))\n        ) {\n          setIsValidQuery(true);\n        } else {\n          setIsValidQuery(undefined);\n        }\n      });\n    }\n  };\n\n  return (\n    <Field\n      label=\"Query\"\n      description={\n        <span>\n          Define the query that is run when the link is clicked. You can use{' '}\n          <a\n            href=\"https://grafana.com/docs/grafana/latest/panels-visualizations/configure-data-links/\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            variables\n          </a>{' '}\n          to access specific field values.\n        </span>\n      }\n      invalid={invalid}\n      error={error}\n    >\n      <Controller\n        name={name}\n        rules={{\n          validate: {\n            hasQueryEditor: () =>\n              QueryEditor !== undefined || 'The selected target data source must export a query editor.',\n          },\n        }}\n        render={({ field: { value, onChange } }) => {\n          if (dsLoading) {\n            return <LoadingPlaceholder text=\"Loading query editor...\" />;\n          }\n          if (dsError) {\n            return <Alert title=\"Error loading data source\">The selected data source could not be loaded.</Alert>;\n          }\n          if (!datasource) {\n            return (\n              <Alert title=\"No data source selected\" severity=\"info\">\n                Please select a target data source first.\n              </Alert>\n            );\n          }\n          if (!QueryEditor) {\n            return <Alert title=\"Data source does not export a query editor.\"></Alert>;\n          }\n          return (\n            <>\n              <QueryEditor\n                app={CoreApp.Correlations}\n                onRunQuery={() => handleValidation(value)}\n                onChange={(value) => {\n                  setIsValidQuery(undefined);\n                  onChange(value);\n                }}\n                datasource={datasource}\n                query={value}\n              />\n              <HorizontalGroup justify=\"flex-end\">\n                {isValidQuery ? (\n                  <div className={style.valid}>\n                    <Icon name=\"check\" /> This query is valid.\n                  </div>\n                ) : isValidQuery === false ? (\n                  <FieldValidationMessage>This query is not valid.</FieldValidationMessage>\n                ) : null}\n                <Button variant=\"secondary\" icon={'check'} type=\"button\" onClick={() => handleValidation(value)}>\n                  Validate query\n                </Button>\n              </HorizontalGroup>\n            </>\n          );\n        }}\n      />\n    </Field>\n  );\n};\n","import React from 'react';\nimport { Controller, useFormContext, useWatch } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Field, FieldSet } from '@grafana/ui';\n\nimport { QueryEditorField } from './QueryEditorField';\nimport { useCorrelationsFormContext } from './correlationsFormContext';\n\nexport const ConfigureCorrelationTargetForm = () => {\n  const { control, formState } = useFormContext();\n  const withDsUID = (fn: Function) => (ds: DataSourceInstanceSettings) => fn(ds.uid);\n  const { correlation } = useCorrelationsFormContext();\n  const targetUID: string | undefined = useWatch({ name: 'targetUID' }) || correlation?.targetUID;\n\n  return (\n    <>\n      <FieldSet label=\"Setup target query (2/3)\">\n        <p>Clicking on a link runs a provided target query.</p>\n        <Controller\n          control={control}\n          name=\"targetUID\"\n          rules={{ required: { value: true, message: 'This field is required.' } }}\n          render={({ field: { onChange, value } }) => (\n            <Field\n              label=\"Target\"\n              description=\"Specify which data source is queried when the link is clicked\"\n              htmlFor=\"target\"\n              invalid={!!formState.errors.targetUID}\n              error={formState.errors.targetUID?.message}\n            >\n              <DataSourcePicker\n                onChange={withDsUID(onChange)}\n                noDefault\n                current={value}\n                inputId=\"target\"\n                width={32}\n                disabled={correlation !== undefined}\n              />\n            </Field>\n          )}\n        />\n\n        <QueryEditorField\n          name=\"config.target\"\n          dsUid={targetUID}\n          invalid={!!formState.errors?.config?.target}\n          error={formState.errors?.config?.target?.message}\n        />\n      </FieldSet>\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Button, HorizontalGroup } from '@grafana/ui';\n\nimport { useWizardContext } from '../components/Wizard/wizardContext';\n\nimport { useCorrelationsFormContext } from './correlationsFormContext';\n\nexport const CorrelationFormNavigation = () => {\n  const { currentPage, prevPage, isLastPage } = useWizardContext();\n  const { readOnly, loading, correlation } = useCorrelationsFormContext();\n\n  const LastPageNext = !readOnly && (\n    <Button variant=\"primary\" icon={loading ? 'fa fa-spinner' : 'save'} type=\"submit\" disabled={loading}>\n      {correlation === undefined ? 'Add' : 'Save'}\n    </Button>\n  );\n\n  const NextPage = (\n    <Button variant=\"secondary\" type=\"submit\">\n      Next\n    </Button>\n  );\n\n  return (\n    <HorizontalGroup justify=\"flex-end\">\n      {currentPage > 0 ? (\n        <Button variant=\"secondary\" onClick={prevPage}>\n          Back\n        </Button>\n      ) : undefined}\n\n      {isLastPage ? LastPageNext : NextPage}\n    </HorizontalGroup>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { PanelContainer, useStyles2 } from '@grafana/ui';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\n\nimport { Wizard } from '../components/Wizard';\nimport { useCorrelations } from '../useCorrelations';\n\nimport { ConfigureCorrelationBasicInfoForm } from './ConfigureCorrelationBasicInfoForm';\nimport { ConfigureCorrelationSourceForm } from './ConfigureCorrelationSourceForm';\nimport { ConfigureCorrelationTargetForm } from './ConfigureCorrelationTargetForm';\nimport { CorrelationFormNavigation } from './CorrelationFormNavigation';\nimport { CorrelationsFormContextProvider } from './correlationsFormContext';\nimport { FormDTO } from './types';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  panelContainer: css`\n    position: relative;\n    padding: ${theme.spacing(1)};\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  infoBox: css`\n    margin-top: 20px; // give space for close button\n  `,\n});\n\ninterface Props {\n  onClose: () => void;\n  onCreated: () => void;\n}\n\nexport const AddCorrelationForm = ({ onClose, onCreated }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const {\n    create: { execute, loading, error, value },\n  } = useCorrelations();\n\n  useEffect(() => {\n    if (!error && !loading && value) {\n      onCreated();\n    }\n  }, [error, loading, value, onCreated]);\n\n  const defaultValues: Partial<FormDTO> = { config: { type: 'query', target: {}, field: '' } };\n\n  return (\n    <PanelContainer className={styles.panelContainer}>\n      <CloseButton onClick={onClose} />\n      <CorrelationsFormContextProvider data={{ loading, readOnly: false, correlation: undefined }}>\n        <Wizard<FormDTO>\n          defaultValues={defaultValues}\n          pages={[ConfigureCorrelationBasicInfoForm, ConfigureCorrelationTargetForm, ConfigureCorrelationSourceForm]}\n          navigation={CorrelationFormNavigation}\n          onSubmit={execute}\n        />\n      </CorrelationsFormContextProvider>\n    </PanelContainer>\n  );\n};\n","import React, { useEffect } from 'react';\n\nimport { Wizard } from '../components/Wizard';\nimport { Correlation } from '../types';\nimport { useCorrelations } from '../useCorrelations';\n\nimport { ConfigureCorrelationBasicInfoForm } from './ConfigureCorrelationBasicInfoForm';\nimport { ConfigureCorrelationSourceForm } from './ConfigureCorrelationSourceForm';\nimport { ConfigureCorrelationTargetForm } from './ConfigureCorrelationTargetForm';\nimport { CorrelationFormNavigation } from './CorrelationFormNavigation';\nimport { CorrelationsFormContextProvider } from './correlationsFormContext';\nimport { EditFormDTO } from './types';\n\ninterface Props {\n  onUpdated: () => void;\n  correlation: Correlation;\n  readOnly?: boolean;\n}\n\nexport const EditCorrelationForm = ({ onUpdated, correlation, readOnly = false }: Props) => {\n  const {\n    update: { execute, loading, error, value },\n  } = useCorrelations();\n\n  const onSubmit = (data: EditFormDTO) => {\n    return execute({ ...data, sourceUID: correlation.sourceUID, uid: correlation.uid });\n  };\n\n  useEffect(() => {\n    if (!error && !loading && value) {\n      onUpdated();\n    }\n  }, [error, loading, value, onUpdated]);\n\n  return (\n    <CorrelationsFormContextProvider data={{ loading, readOnly, correlation }}>\n      <Wizard<EditFormDTO>\n        defaultValues={correlation}\n        pages={[ConfigureCorrelationBasicInfoForm, ConfigureCorrelationTargetForm, ConfigureCorrelationSourceForm]}\n        onSubmit={readOnly ? (e) => () => {} : onSubmit}\n        navigation={CorrelationFormNavigation}\n      />\n    </CorrelationsFormContextProvider>\n  );\n};\n","import React from 'react';\n\nimport { Card } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\ninterface Props {\n  onClick?: () => void;\n  canWriteCorrelations: boolean;\n}\nexport const EmptyCorrelationsCTA = ({ onClick, canWriteCorrelations }: Props) => {\n  // TODO: if there are no datasources show a different message\n\n  return canWriteCorrelations ? (\n    <EmptyListCTA\n      title=\"You haven't defined any correlation yet.\"\n      buttonIcon=\"gf-glue\"\n      onClick={onClick}\n      buttonTitle=\"Add correlation\"\n      proTip=\"you can also define correlations via datasource provisioning\"\n    />\n  ) : (\n    <Card>\n      <Card.Heading>There are no correlations configured yet.</Card.Heading>\n      <Card.Description>Please contact your administrator to create new correlations.</Card.Description>\n    </Card>\n  );\n};\n","import { css } from '@emotion/css';\nimport { negate } from 'lodash';\nimport React, { memo, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { isFetchError, reportInteraction } from '@grafana/runtime';\nimport {\n  Badge,\n  Button,\n  DeleteButton,\n  LoadingPlaceholder,\n  useStyles2,\n  Alert,\n  InteractiveTable,\n  type Column,\n  type CellProps,\n  type SortByFn,\n} from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { AccessControlAction } from 'app/types';\n\nimport { AddCorrelationForm } from './Forms/AddCorrelationForm';\nimport { EditCorrelationForm } from './Forms/EditCorrelationForm';\nimport { EmptyCorrelationsCTA } from './components/EmptyCorrelationsCTA';\nimport type { RemoveCorrelationParams } from './types';\nimport { CorrelationData, useCorrelations } from './useCorrelations';\n\nconst sortDatasource: SortByFn<CorrelationData> = (a, b, column) =>\n  a.values[column].name.localeCompare(b.values[column].name);\n\nconst isSourceReadOnly = ({ source }: Pick<CorrelationData, 'source'>) => source.readOnly;\n\nconst loaderWrapper = css`\n  display: flex;\n  justify-content: center;\n`;\n\nexport default function CorrelationsPage() {\n  const navModel = useNavModel('correlations');\n  const [isAdding, setIsAddingValue] = useState(false);\n\n  const setIsAdding = (value: boolean) => {\n    setIsAddingValue(value);\n    if (value) {\n      reportInteraction('grafana_correlations_adding_started');\n    }\n  };\n\n  const {\n    remove,\n    get: { execute: fetchCorrelations, ...get },\n  } = useCorrelations();\n\n  useEffect(() => {\n    fetchCorrelations();\n    // we only want to fetch data on first render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const canWriteCorrelations = contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n\n  const handleAdded = useCallback(() => {\n    reportInteraction('grafana_correlations_added');\n    fetchCorrelations();\n    setIsAdding(false);\n  }, [fetchCorrelations]);\n\n  const handleUpdated = useCallback(() => {\n    reportInteraction('grafana_correlations_edited');\n    fetchCorrelations();\n  }, [fetchCorrelations]);\n\n  const handleDelete = useCallback(\n    (params: RemoveCorrelationParams) => {\n      remove.execute(params);\n    },\n    [remove]\n  );\n\n  // onDelete - triggers when deleting a correlation\n  useEffect(() => {\n    if (remove.value) {\n      reportInteraction('grafana_correlations_deleted');\n    }\n  }, [remove.value]);\n\n  useEffect(() => {\n    if (!remove.error && !remove.loading && remove.value) {\n      fetchCorrelations();\n    }\n  }, [remove.error, remove.loading, remove.value, fetchCorrelations]);\n\n  const RowActions = useCallback(\n    ({\n      row: {\n        original: {\n          source: { uid: sourceUID, readOnly },\n          uid,\n        },\n      },\n    }: CellProps<CorrelationData, void>) =>\n      !readOnly && (\n        <DeleteButton\n          aria-label=\"delete correlation\"\n          onConfirm={() => handleDelete({ sourceUID, uid })}\n          closeOnConfirm\n        />\n      ),\n    [handleDelete]\n  );\n\n  const columns = useMemo<Array<Column<CorrelationData>>>(\n    () => [\n      {\n        id: 'info',\n        cell: InfoCell,\n        disableGrow: true,\n        visible: (data) => data.some(isSourceReadOnly),\n      },\n      {\n        id: 'source',\n        header: 'Source',\n        cell: DataSourceCell,\n        sortType: sortDatasource,\n      },\n      {\n        id: 'target',\n        header: 'Target',\n        cell: DataSourceCell,\n        sortType: sortDatasource,\n      },\n      { id: 'label', header: 'Label', sortType: 'alphanumeric' },\n      {\n        id: 'actions',\n        cell: RowActions,\n        disableGrow: true,\n        visible: (data) => canWriteCorrelations && data.some(negate(isSourceReadOnly)),\n      },\n    ],\n    [RowActions, canWriteCorrelations]\n  );\n\n  const data = useMemo(() => get.value, [get.value]);\n  const showEmptyListCTA = data?.length === 0 && !isAdding && !get.error;\n  const addButton = canWriteCorrelations && data?.length !== 0 && data !== undefined && !isAdding && (\n    <Button icon=\"plus\" onClick={() => setIsAdding(true)}>\n      Add new\n    </Button>\n  );\n\n  return (\n    <Page\n      navModel={navModel}\n      subTitle=\"Define how data living in different data sources relates to each other.\"\n      actions={addButton}\n    >\n      <Page.Contents>\n        <div>\n          {!data && get.loading && (\n            <div className={loaderWrapper}>\n              <LoadingPlaceholder text=\"loading...\" />\n            </div>\n          )}\n\n          {showEmptyListCTA && (\n            <EmptyCorrelationsCTA canWriteCorrelations={canWriteCorrelations} onClick={() => setIsAdding(true)} />\n          )}\n\n          {\n            // This error is not actionable, it'd be nice to have a recovery button\n            get.error && (\n              <Alert severity=\"error\" title=\"Error fetching correlation data\" topSpacing={2}>\n                {(isFetchError(get.error) && get.error.data?.message) ||\n                  'An unknown error occurred while fetching correlation data. Please try again.'}\n              </Alert>\n            )\n          }\n\n          {isAdding && <AddCorrelationForm onClose={() => setIsAdding(false)} onCreated={handleAdded} />}\n\n          {data && data.length >= 1 && (\n            <InteractiveTable\n              renderExpandedRow={(correlation) => (\n                <ExpendedRow\n                  correlation={correlation}\n                  onUpdated={handleUpdated}\n                  readOnly={isSourceReadOnly({ source: correlation.source }) || !canWriteCorrelations}\n                />\n              )}\n              columns={columns}\n              data={data}\n              getRowId={(correlation) => `${correlation.source.uid}-${correlation.uid}`}\n            />\n          )}\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\ninterface ExpandedRowProps {\n  correlation: CorrelationData;\n  readOnly: boolean;\n  onUpdated: () => void;\n}\nfunction ExpendedRow({ correlation: { source, target, ...correlation }, readOnly, onUpdated }: ExpandedRowProps) {\n  useEffect(\n    () => reportInteraction('grafana_correlations_details_expanded'),\n    // we only want to fire this on first render\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  return (\n    <EditCorrelationForm\n      correlation={{ ...correlation, sourceUID: source.uid, targetUID: target.uid }}\n      onUpdated={onUpdated}\n      readOnly={readOnly}\n    />\n  );\n}\n\nconst getDatasourceCellStyles = (theme: GrafanaTheme2) => ({\n  root: css`\n    display: flex;\n    align-items: center;\n  `,\n  dsLogo: css`\n    margin-right: ${theme.spacing()};\n    height: 16px;\n    width: 16px;\n  `,\n});\n\nconst DataSourceCell = memo(\n  function DataSourceCell({\n    cell: { value },\n  }: CellProps<CorrelationData, CorrelationData['source'] | CorrelationData['target']>) {\n    const styles = useStyles2(getDatasourceCellStyles);\n\n    return (\n      <span className={styles.root}>\n        <img src={value.meta.info.logos.small} alt=\"\" className={styles.dsLogo} />\n        {value.name}\n      </span>\n    );\n  },\n  ({ cell: { value } }, { cell: { value: prevValue } }) => {\n    return value.type === prevValue.type && value.name === prevValue.name;\n  }\n);\n\nconst noWrap = css`\n  white-space: nowrap;\n`;\n\nconst InfoCell = memo(\n  function InfoCell({ ...props }: CellProps<CorrelationData, void>) {\n    const readOnly = props.row.original.source.readOnly;\n\n    if (readOnly) {\n      return <Badge text=\"Read only\" color=\"purple\" className={noWrap} />;\n    } else {\n      return null;\n    }\n  },\n  (props, prevProps) => props.row.original.source.readOnly === prevProps.row.original.source.readOnly\n);\n","import { useAsyncFn } from 'react-use';\nimport { lastValueFrom } from 'rxjs';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { getDataSourceSrv, FetchResponse } from '@grafana/runtime';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\n\nimport {\n  Correlation,\n  CreateCorrelationParams,\n  CreateCorrelationResponse,\n  RemoveCorrelationParams,\n  RemoveCorrelationResponse,\n  UpdateCorrelationParams,\n  UpdateCorrelationResponse,\n} from './types';\n\nexport interface CorrelationData extends Omit<Correlation, 'sourceUID' | 'targetUID'> {\n  source: DataSourceInstanceSettings;\n  target: DataSourceInstanceSettings;\n}\n\nconst toEnrichedCorrelationData = ({ sourceUID, targetUID, ...correlation }: Correlation): CorrelationData => ({\n  ...correlation,\n  source: getDataSourceSrv().getInstanceSettings(sourceUID)!,\n  target: getDataSourceSrv().getInstanceSettings(targetUID)!,\n});\n\nconst toEnrichedCorrelationsData = (correlations: Correlation[]) => correlations.map(toEnrichedCorrelationData);\nfunction getData<T>(response: FetchResponse<T>) {\n  return response.data;\n}\n\n/**\n * hook for managing correlations data.\n * TODO: ideally this hook shouldn't have any side effect like showing notifications on error\n * and let consumers handle them. It works nicely with the correlations settings page, but when we'll\n * expose this we'll have to remove those side effects.\n */\nexport const useCorrelations = () => {\n  const { backend } = useGrafana();\n\n  const [getInfo, get] = useAsyncFn<() => Promise<CorrelationData[]>>(\n    () =>\n      lastValueFrom(\n        backend.fetch<Correlation[]>({ url: '/api/datasources/correlations', method: 'GET', showErrorAlert: false })\n      )\n        .then(getData)\n        .then(toEnrichedCorrelationsData),\n    [backend]\n  );\n\n  const [createInfo, create] = useAsyncFn<(params: CreateCorrelationParams) => Promise<CorrelationData>>(\n    ({ sourceUID, ...correlation }) =>\n      backend\n        .post<CreateCorrelationResponse>(`/api/datasources/uid/${sourceUID}/correlations`, correlation)\n        .then((response) => {\n          return toEnrichedCorrelationData(response.result);\n        }),\n    [backend]\n  );\n\n  const [removeInfo, remove] = useAsyncFn<(params: RemoveCorrelationParams) => Promise<{ message: string }>>(\n    ({ sourceUID, uid }) =>\n      backend.delete<RemoveCorrelationResponse>(`/api/datasources/uid/${sourceUID}/correlations/${uid}`),\n    [backend]\n  );\n\n  const [updateInfo, update] = useAsyncFn<(params: UpdateCorrelationParams) => Promise<CorrelationData>>(\n    ({ sourceUID, uid, ...correlation }) =>\n      backend\n        .patch<UpdateCorrelationResponse>(`/api/datasources/uid/${sourceUID}/correlations/${uid}`, correlation)\n        .then((response) => toEnrichedCorrelationData(response.result)),\n    [backend]\n  );\n\n  return {\n    create: {\n      execute: create,\n      ...createInfo,\n    },\n    update: {\n      execute: update,\n      ...updateInfo,\n    },\n    get: {\n      execute: get,\n      ...getInfo,\n    },\n    remove: {\n      execute: remove,\n      ...removeInfo,\n    },\n  };\n};\n"],"names":["WizardContext","WizardContextProvider","props","currentPage","setCurrentPage","pages","onSubmit","children","useWizardContext","ctx","WizardContent","navigation","handleSubmit","CurrentPageComponent","isLastPage","nextPage","NavigationComponent","data","Wizard","defaultValues","formMethods","CorrelationsFormContext","CorrelationsFormContextProvider","useCorrelationsFormContext","getInputId","inputName","correlation","getStyles","theme","ConfigureCorrelationBasicInfoForm","register","formState","styles","readOnly","FieldSet","Field","Input","TextArea","TransformationsEditor","control","setValue","watch","getValues","keptVals","setKeptVals","transformOptions","getTransformOptions","FieldArray","fields","append","remove","fieldVal","index","Label","Tooltip","Icon","InputControl","onChange","ref","field","Select","value","currentValues","keptValsCopy","keptVal","i","newValueDetails","getSupportedTransTypeDetails","IconButton","Button","transType","transformationType","ConfigureCorrelationSourceForm","withDsUID","fn","ds","currentTargetQuery","variables","variable","uid","DataSourcePicker","Card","name","getStyle","QueryEditorField","dsUid","invalid","error","isValidQuery","setIsValidQuery","style","datasource","dsLoading","dsError","useAsync","QueryEditor","handleValidation","interval","id","queries","transaction","runRequest","panelData","element","LoadingPlaceholder","Alert","FieldValidationMessage","ConfigureCorrelationTargetForm","targetUID","CorrelationFormNavigation","prevPage","loading","LastPageNext","NextPage","AddCorrelationForm","onClose","onCreated","execute","useCorrelations","PanelContainer","CloseButton","EditCorrelationForm","onUpdated","e","EmptyCorrelationsCTA","onClick","canWriteCorrelations","EmptyListCTA","sortDatasource","a","b","column","isSourceReadOnly","source","loaderWrapper","CorrelationsPage","navModel","useNavModel","isAdding","setIsAddingValue","setIsAdding","fetchCorrelations","get","handleAdded","handleUpdated","handleDelete","params","RowActions","sourceUID","DeleteButton","columns","InfoCell","DataSourceCell","showEmptyListCTA","addButton","Page","InteractiveTable","ExpendedRow","target","getDatasourceCellStyles","prevValue","noWrap","Badge","prevProps","toEnrichedCorrelationData","toEnrichedCorrelationsData","correlations","getData","response","backend","getInfo","createInfo","create","removeInfo","updateInfo","update"],"sourceRoot":""}