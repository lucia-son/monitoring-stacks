{"version":3,"file":"AlertAmRoutes.a22d5525323501788672.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyAreaWithCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Filters.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/AlertGroupsSummary.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/routeTree.ts","webpack://grafana/./public/app/features/alerting/unified/utils/amroutes.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationDocs.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/formStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/timingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditDefaultPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useMuteTimingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditNotificationPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Modals.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/notification-policies.ts","webpack://grafana/./public/app/features/alerting/unified/components/MetaText.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Strong.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Policy.tsx","webpack://grafana/./public/app/features/alerting/unified/NotificationPolicies.tsx","webpack://grafana/./public/app/features/alerting/unified/api/receiversApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/GrafanaAlertmanagerDeliveryWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Label.tsx","webpack://grafana/./public/app/features/alerting/unified/components/NoAlertManagerWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Provisioning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/api/onCallApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/onCall/onCall.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/grafanaApp.ts","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSources.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const EmptyArea = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={styles.container}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(4)};\n      text-align: center;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { ButtonHTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, LinkButton, useStyles2 } from '@grafana/ui';\n\nimport { EmptyArea } from './EmptyArea';\n\nexport interface EmptyAreaWithCTAProps {\n  buttonLabel: string;\n  href?: string;\n  onButtonClick?: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n  showButton?: boolean;\n}\n\nexport const EmptyAreaWithCTA = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n  href,\n  showButton = true,\n}: EmptyAreaWithCTAProps) => {\n  const styles = useStyles2(getStyles);\n\n  const commonProps = {\n    className: styles.button,\n    icon: buttonIcon,\n    size: buttonSize,\n    variant: buttonVariant,\n  };\n\n  return (\n    <EmptyArea>\n      <>\n        <p className={styles.text}>{text}</p>\n        {showButton &&\n          (href ? (\n            <LinkButton href={href} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </LinkButton>\n          ) : (\n            <Button onClick={onButtonClick} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </Button>\n          ))}\n      </>\n    </EmptyArea>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(4)};\n      text-align: center;\n    `,\n    text: css`\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    button: css`\n      margin: ${theme.spacing(2, 0, 1)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { IconButton, LinkButton, Link, useStyles2, ConfirmModal } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertManagerCortexConfig, MuteTimeInterval, TimeInterval } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { Authorize } from '../../components/Authorize';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { deleteMuteTimingAction } from '../../state/actions';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport {\n  getTimeString,\n  getWeekdayString,\n  getDaysOfMonthString,\n  getMonthsString,\n  getYearsString,\n} from '../../utils/alertmanager';\nimport { makeAMLink } from '../../utils/misc';\nimport { AsyncRequestState, initialAsyncRequestState } from '../../utils/redux';\nimport { DynamicTable, DynamicTableItemProps, DynamicTableColumnProps } from '../DynamicTable';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\n\ninterface Props {\n  alertManagerSourceName: string;\n  muteTimingNames?: string[];\n  hideActions?: boolean;\n}\n\nexport const MuteTimingsTable = ({ alertManagerSourceName, muteTimingNames, hideActions }: Props) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n  const [muteTimingName, setMuteTimingName] = useState<string>('');\n  const { result }: AsyncRequestState<AlertManagerCortexConfig> =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const items = useMemo((): Array<DynamicTableItemProps<MuteTimeInterval>> => {\n    const muteTimings = result?.alertmanager_config?.mute_time_intervals ?? [];\n    const muteTimingsProvenances = result?.alertmanager_config?.muteTimeProvenances ?? {};\n\n    return muteTimings\n      .filter(({ name }) => (muteTimingNames ? muteTimingNames.includes(name) : true))\n      .map((mute) => {\n        return {\n          id: mute.name,\n          data: {\n            ...mute,\n            provenance: muteTimingsProvenances[mute.name],\n          },\n        };\n      });\n  }, [\n    result?.alertmanager_config?.mute_time_intervals,\n    result?.alertmanager_config?.muteTimeProvenances,\n    muteTimingNames,\n  ]);\n\n  const columns = useColumns(alertManagerSourceName, hideActions, setMuteTimingName);\n\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <span>\n          Enter specific time intervals when not to send notifications or freeze notifications for recurring periods of\n          time.\n        </span>\n        <Spacer />\n        {!hideActions && items.length > 0 && (\n          <Authorize actions={[permissions.create]}>\n            <LinkButton\n              className={styles.addMuteButton}\n              icon=\"plus\"\n              variant=\"primary\"\n              href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n            >\n              Add mute timing\n            </LinkButton>\n          </Authorize>\n        )}\n      </Stack>\n      {items.length > 0 ? (\n        <DynamicTable items={items} cols={columns} />\n      ) : !hideActions ? (\n        <EmptyAreaWithCTA\n          text=\"You haven't created any mute timings yet\"\n          buttonLabel=\"Add mute timing\"\n          buttonIcon=\"plus\"\n          buttonSize=\"lg\"\n          href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          showButton={contextSrv.hasPermission(permissions.create)}\n        />\n      ) : (\n        <p>No mute timings configured</p>\n      )}\n      {!hideActions && (\n        <ConfirmModal\n          isOpen={!!muteTimingName}\n          title=\"Delete mute timing\"\n          body={`Are you sure you would like to delete \"${muteTimingName}\"`}\n          confirmText=\"Delete\"\n          onConfirm={() => dispatch(deleteMuteTimingAction(alertManagerSourceName, muteTimingName))}\n          onDismiss={() => setMuteTimingName('')}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction useColumns(alertManagerSourceName: string, hideActions = false, setMuteTimingName: (name: string) => void) {\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n\n  const userHasEditPermissions = contextSrv.hasPermission(permissions.update);\n  const userHasDeletePermissions = contextSrv.hasPermission(permissions.delete);\n  const showActions = !hideActions && (userHasEditPermissions || userHasDeletePermissions);\n\n  return useMemo((): Array<DynamicTableColumnProps<MuteTimeInterval>> => {\n    const columns: Array<DynamicTableColumnProps<MuteTimeInterval>> = [\n      {\n        id: 'name',\n        label: 'Name',\n        renderCell: function renderName({ data }) {\n          return (\n            <>\n              {data.name} {data.provenance && <ProvisioningBadge />}\n            </>\n          );\n        },\n        size: '250px',\n      },\n      {\n        id: 'timeRange',\n        label: 'Time range',\n        renderCell: ({ data }) => renderTimeIntervals(data.time_intervals),\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data }) {\n          if (data.provenance) {\n            return (\n              <div>\n                <Link\n                  href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n                    muteName: data.name,\n                  })}\n                >\n                  <IconButton name=\"file-alt\" title=\"View mute timing\" />\n                </Link>\n              </div>\n            );\n          }\n          return (\n            <div>\n              <Authorize actions={[permissions.update]}>\n                <Link\n                  href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n                    muteName: data.name,\n                  })}\n                >\n                  <IconButton name=\"edit\" title=\"Edit mute timing\" />\n                </Link>\n              </Authorize>\n              <Authorize actions={[permissions.delete]}>\n                <IconButton\n                  name={'trash-alt'}\n                  title=\"Delete mute timing\"\n                  onClick={() => setMuteTimingName(data.name)}\n                />\n              </Authorize>\n            </div>\n          );\n        },\n        size: '100px',\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, setMuteTimingName, showActions, permissions]);\n}\n\nfunction renderTimeIntervals(timeIntervals: TimeInterval[]) {\n  return timeIntervals.map((interval, index) => {\n    const { times, weekdays, days_of_month, months, years } = interval;\n    const timeString = getTimeString(times);\n    const weekdayString = getWeekdayString(weekdays);\n    const daysString = getDaysOfMonthString(days_of_month);\n    const monthsString = getMonthsString(months);\n    const yearsString = getYearsString(years);\n\n    return (\n      <React.Fragment key={JSON.stringify(interval) + index}>\n        {`${timeString} ${weekdayString}`}\n        <br />\n        {[daysString, monthsString, yearsString].join(' | ')}\n        <br />\n      </React.Fragment>\n    );\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-flow: column nowrap;\n  `,\n  addMuteButton: css`\n    margin-bottom: ${theme.spacing(2)};\n    align-self: flex-end;\n  `,\n});\n","import { css } from '@emotion/css';\nimport { debounce, pick } from 'lodash';\nimport React, { useCallback, useEffect, useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Field, Icon, Input, Label as LabelElement, Select, Tooltip, useStyles2 } from '@grafana/ui';\nimport { ObjectMatcher, Receiver, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { matcherToObjectMatcher, parseMatchers } from '../../utils/alertmanager';\n\ninterface NotificationPoliciesFilterProps {\n  receivers: Receiver[];\n  onChangeMatchers: (labels: ObjectMatcher[]) => void;\n  onChangeReceiver: (receiver: string | undefined) => void;\n}\n\nconst NotificationPoliciesFilter = ({\n  receivers,\n  onChangeReceiver,\n  onChangeMatchers,\n}: NotificationPoliciesFilterProps) => {\n  const [searchParams, setSearchParams] = useURLSearchParams();\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const { queryString, contactPoint } = getNotificationPoliciesFilters(searchParams);\n  const styles = useStyles2(getStyles);\n\n  const handleChangeLabels = useCallback(() => debounce(onChangeMatchers, 500), [onChangeMatchers]);\n\n  useEffect(() => {\n    onChangeReceiver(contactPoint);\n  }, [contactPoint, onChangeReceiver]);\n\n  useEffect(() => {\n    const matchers = parseMatchers(queryString ?? '').map(matcherToObjectMatcher);\n    handleChangeLabels()(matchers);\n  }, [handleChangeLabels, queryString]);\n\n  const clearFilters = useCallback(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.value = '';\n    }\n    setSearchParams({ contactPoint: undefined, queryString: undefined });\n  }, [setSearchParams]);\n\n  const receiverOptions: Array<SelectableValue<string>> = receivers.map(toOption);\n  const selectedContactPoint = receiverOptions.find((option) => option.value === contactPoint) ?? null;\n\n  const hasFilters = queryString || contactPoint;\n  const inputInvalid = queryString && queryString.length > 3 ? parseMatchers(queryString).length === 0 : false;\n\n  return (\n    <Stack direction=\"row\" alignItems=\"flex-start\" gap={0.5}>\n      <Field\n        className={styles.noBottom}\n        label={\n          <LabelElement>\n            <Stack gap={0.5}>\n              <span>Search by matchers</span>\n              <Tooltip\n                content={\n                  <div>\n                    Filter silences by matchers using a comma separated list of matchers, ie:\n                    <pre>{`severity=critical, instance=~cluster-us-.+`}</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </LabelElement>\n        }\n        invalid={inputInvalid}\n        error={inputInvalid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          ref={searchInputRef}\n          data-testid=\"search-query-input\"\n          placeholder=\"Search\"\n          width={46}\n          prefix={<Icon name=\"search\" />}\n          onChange={(event) => {\n            setSearchParams({ queryString: event.currentTarget.value });\n          }}\n          defaultValue={queryString}\n        />\n      </Field>\n      <Field label=\"Search by contact point\" style={{ marginBottom: 0 }}>\n        <Select\n          id=\"receiver\"\n          aria-label=\"Search by contact point\"\n          value={selectedContactPoint}\n          options={receiverOptions}\n          onChange={(option) => {\n            setSearchParams({ contactPoint: option?.value });\n          }}\n          width={28}\n          isClearable\n        />\n      </Field>\n      {hasFilters && (\n        <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters} style={{ marginTop: 19 }}>\n          Clear filters\n        </Button>\n      )}\n    </Stack>\n  );\n};\n\n/**\n * Find a list of route IDs that match given input filters\n */\ntype FilterPredicate = (route: RouteWithID) => boolean;\n\nexport function findRoutesMatchingPredicate(routeTree: RouteWithID, predicateFn: FilterPredicate): RouteWithID[] {\n  const matches: RouteWithID[] = [];\n\n  function findMatch(route: RouteWithID) {\n    if (predicateFn(route)) {\n      matches.push(route);\n    }\n\n    route.routes?.forEach(findMatch);\n  }\n\n  findMatch(routeTree);\n  return matches;\n}\n\n/**\n * This function will compute the full tree with inherited properties – this is mostly used for search and filtering\n */\nexport function computeInheritedTree(routeTree: RouteWithID): RouteWithID {\n  return {\n    ...routeTree,\n    routes: routeTree.routes?.map((route) => {\n      const inheritableProperties = pick(routeTree, [\n        'receiver',\n        'group_by',\n        'group_wait',\n        'group_interval',\n        'repeat_interval',\n        'mute_time_intervals',\n      ]);\n\n      return computeInheritedTree({\n        ...inheritableProperties,\n        ...route,\n      });\n    }),\n  };\n}\n\nconst toOption = (receiver: Receiver) => ({\n  label: receiver.name,\n  value: receiver.name,\n});\n\nconst getNotificationPoliciesFilters = (searchParams: URLSearchParams) => ({\n  queryString: searchParams.get('queryString') ?? undefined,\n  contactPoint: searchParams.get('contactPoint') ?? undefined,\n});\n\nconst getStyles = () => ({\n  noBottom: css`\n    margin-bottom: 0;\n  `,\n});\n\nexport { NotificationPoliciesFilter };\n","import pluralize from 'pluralize';\nimport React, { Fragment } from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { Badge } from '@grafana/ui';\n\ninterface Props {\n  active?: number;\n  suppressed?: number;\n  unprocessed?: number;\n}\n\nexport const AlertGroupsSummary = ({ active = 0, suppressed = 0, unprocessed = 0 }: Props) => {\n  const statsComponents: React.ReactNode[] = [];\n  const total = active + suppressed + unprocessed;\n\n  if (active) {\n    statsComponents.push(<Badge color=\"red\" key=\"firing\" text={`${active} firing`} />);\n  }\n\n  if (suppressed) {\n    statsComponents.push(<Badge color=\"blue\" key=\"suppressed\" text={`${suppressed} suppressed`} />);\n  }\n\n  if (unprocessed) {\n    statsComponents.push(<Badge color=\"orange\" key=\"unprocessed\" text={`${unprocessed} unprocessed`} />);\n  }\n\n  // if we only have one category it's not really necessary to repeat the total\n  if (statsComponents.length > 1) {\n    statsComponents.unshift(\n      <Fragment key=\"total\">\n        {total} {pluralize('instance', total)}\n      </Fragment>\n    );\n  }\n\n  const hasStats = Boolean(statsComponents.length);\n\n  return hasStats ? <Stack gap={0.5}>{statsComponents}</Stack> : null;\n};\n","/**\n * Various helper functions to modify (immutably) the route tree, aka \"notification policies\"\n */\n\nimport { omit } from 'lodash';\n\nimport { Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\n\nimport { formAmRouteToAmRoute } from './amroutes';\n\n// add a form submission to the route tree\nexport const mergePartialAmRouteWithRouteTree = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(partialFormRoute.id ?? '', routeTree);\n  if (!existing) {\n    throw new Error(`No such route with ID '${partialFormRoute.id}'`);\n  }\n\n  function findAndReplace(currentRoute: RouteWithID): Route {\n    let updatedRoute: Route = currentRoute;\n\n    if (currentRoute.id === partialFormRoute.id) {\n      const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n      updatedRoute = omit(\n        {\n          ...currentRoute,\n          ...newRoute,\n        },\n        'id'\n      );\n    }\n\n    return omit(\n      {\n        ...updatedRoute,\n        routes: currentRoute.routes?.map(findAndReplace),\n      },\n      'id'\n    );\n  }\n\n  return findAndReplace(routeTree);\n};\n\n// remove a route from the policy tree, returns a new tree\n// make sure to omit the \"id\" because Prometheus / Loki / Mimir will reject the payload\nexport const omitRouteFromRouteTree = (findRoute: RouteWithID, routeTree: RouteWithID): Route => {\n  if (findRoute.id === routeTree.id) {\n    throw new Error('You cant remove the root policy');\n  }\n\n  function findAndOmit(currentRoute: RouteWithID): Route {\n    return omit(\n      {\n        ...currentRoute,\n        routes: currentRoute.routes?.reduce((acc: Route[] = [], route) => {\n          if (route.id === findRoute.id) {\n            return acc;\n          }\n\n          acc.push(findAndOmit(route));\n          return acc;\n        }, []),\n      },\n      'id'\n    );\n  }\n\n  return findAndOmit(routeTree);\n};\n\n// add a new route to a parent route\nexport const addRouteToParentRoute = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  parentRoute: RouteWithID,\n  routeTree: RouteWithID\n): Route => {\n  const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n\n  function findAndAdd(currentRoute: RouteWithID): RouteWithID {\n    if (currentRoute.id === parentRoute.id) {\n      return {\n        ...currentRoute,\n        // TODO fix this typescript exception, it's... complicated\n        // @ts-ignore\n        routes: currentRoute.routes?.concat(newRoute),\n      };\n    }\n\n    return {\n      ...currentRoute,\n      routes: currentRoute.routes?.map(findAndAdd),\n    };\n  }\n\n  function findAndOmitId(currentRoute: RouteWithID): Route {\n    return omit(\n      {\n        ...currentRoute,\n        routes: currentRoute.routes?.map(findAndOmitId),\n      },\n      'id'\n    );\n  }\n\n  return findAndOmitId(findAndAdd(routeTree));\n};\n\nexport function findExistingRoute(id: string, routeTree: RouteWithID): RouteWithID | undefined {\n  return routeTree.id === id ? routeTree : routeTree.routes?.find((route) => findExistingRoute(id, route));\n}\n","import { uniqueId } from 'lodash';\n\nimport { SelectableValue } from '@grafana/data';\nimport { MatcherOperator, ObjectMatcher, Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\nimport { MatcherFieldValue } from '../types/silence-form';\n\nimport { matcherToMatcherField, parseMatcher } from './alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './datasource';\nimport { findExistingRoute } from './routeTree';\nimport { isValidPrometheusDuration } from './time';\n\nconst matchersToArrayFieldMatchers = (\n  matchers: Record<string, string> | undefined,\n  isRegex: boolean\n): MatcherFieldValue[] =>\n  Object.entries(matchers ?? {}).reduce<MatcherFieldValue[]>(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        operator: isRegex ? MatcherOperator.regex : MatcherOperator.equal,\n      },\n    ],\n    [] as MatcherFieldValue[]\n  );\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: MatcherFieldValue = {\n  name: '',\n  value: '',\n  operator: MatcherOperator.equal,\n};\n\n// Default route group_by labels for newly created routes.\nexport const defaultGroupBy = ['grafana_folder', 'alertname'];\n\n// Common route group_by options for multiselect drop-down\nexport const commonGroupByOptions = [\n  { label: 'grafana_folder', value: 'grafana_folder' },\n  { label: 'alertname', value: 'alertname' },\n  { label: 'Disable (...)', value: '...' },\n];\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  overrideGrouping: false,\n  groupBy: defaultGroupBy,\n  object_matchers: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  overrideTimings: false,\n  groupWaitValue: '',\n  groupIntervalValue: '',\n  repeatIntervalValue: '',\n  muteTimeIntervals: [],\n};\n\n/**\n * We need to deal with multiple (deprecated) properties such as \"match\" and \"match_re\"\n * this function will normalize all of the different ways to define matchers in to a single one.\n */\nexport const normalizeMatchers = (route: Route): ObjectMatcher[] => {\n  const matchers: ObjectMatcher[] = [];\n\n  if (route.matchers) {\n    route.matchers.forEach((matcher) => {\n      const { name, value, isEqual, isRegex } = parseMatcher(matcher);\n      let operator = MatcherOperator.equal;\n\n      if (isEqual && isRegex) {\n        operator = MatcherOperator.regex;\n      }\n      if (!isEqual && isRegex) {\n        operator = MatcherOperator.notRegex;\n      }\n      if (isEqual && !isRegex) {\n        operator = MatcherOperator.equal;\n      }\n      if (!isEqual && !isRegex) {\n        operator = MatcherOperator.notEqual;\n      }\n\n      matchers.push([name, operator, value]);\n    });\n  }\n\n  if (route.object_matchers) {\n    matchers.push(...route.object_matchers);\n  }\n\n  if (route.match_re) {\n    Object.entries(route.match_re).forEach(([label, value]) => {\n      matchers.push([label, MatcherOperator.regex, value]);\n    });\n  }\n\n  if (route.match) {\n    Object.entries(route.match).forEach(([label, value]) => {\n      matchers.push([label, MatcherOperator.equal, value]);\n    });\n  }\n\n  return matchers;\n};\n\n// add unique identifiers to each route in the route tree, that way we can figure out what route we've edited / deleted\nexport function addUniqueIdentifierToRoute(route: Route): RouteWithID {\n  return {\n    id: uniqueId('route-'),\n    ...route,\n    routes: (route.routes ?? []).map(addUniqueIdentifierToRoute),\n  };\n}\n\n//returns route, and a record mapping id to existing route\nexport const amRouteToFormAmRoute = (route: RouteWithID | Route | undefined): FormAmRoute => {\n  if (!route) {\n    return emptyRoute;\n  }\n\n  const id = 'id' in route ? route.id : uniqueId('route-');\n\n  if (Object.keys(route).length === 0) {\n    const formAmRoute = { ...emptyRoute, id };\n    return formAmRoute;\n  }\n\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const subFormRoute = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n  });\n\n  const objectMatchers =\n    route.object_matchers?.map((matcher) => ({ name: matcher[0], operator: matcher[1], value: matcher[2] })) ?? [];\n  const matchers = route.matchers?.map((matcher) => matcherToMatcherField(parseMatcher(matcher))) ?? [];\n\n  return {\n    id,\n    // Frontend migration to use object_matchers instead of matchers, match, and match_re\n    object_matchers: [\n      ...matchers,\n      ...objectMatchers,\n      ...matchersToArrayFieldMatchers(route.match, false),\n      ...matchersToArrayFieldMatchers(route.match_re, true),\n    ],\n    continue: route.continue ?? false,\n    receiver: route.receiver ?? '',\n    overrideGrouping: Array.isArray(route.group_by) && route.group_by.length > 0,\n    groupBy: route.group_by ?? undefined,\n    overrideTimings: [route.group_wait, route.group_interval, route.repeat_interval].some(Boolean),\n    groupWaitValue: route.group_wait ?? '',\n    groupIntervalValue: route.group_interval ?? '',\n    repeatIntervalValue: route.repeat_interval ?? '',\n    routes: formRoutes,\n    muteTimeIntervals: route.mute_time_intervals ?? [],\n  };\n};\n\n// convert a FormAmRoute to a Route\nexport const formAmRouteToAmRoute = (\n  alertManagerSourceName: string,\n  formAmRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(formAmRoute.id ?? '', routeTree);\n\n  const {\n    overrideGrouping,\n    groupBy,\n    overrideTimings,\n    groupWaitValue,\n    groupIntervalValue,\n    repeatIntervalValue,\n    receiver,\n  } = formAmRoute;\n\n  // \"undefined\" means \"inherit from the parent policy\", currently supported by group_by, group_wait, group_interval, and repeat_interval\n  const INHERIT_FROM_PARENT = undefined;\n\n  const group_by = overrideGrouping ? groupBy : INHERIT_FROM_PARENT;\n\n  const overrideGroupWait = overrideTimings && groupWaitValue;\n  const group_wait = overrideGroupWait ? groupWaitValue : INHERIT_FROM_PARENT;\n\n  const overrideGroupInterval = overrideTimings && groupIntervalValue;\n  const group_interval = overrideGroupInterval ? groupIntervalValue : INHERIT_FROM_PARENT;\n\n  const overrideRepeatInterval = overrideTimings && repeatIntervalValue;\n  const repeat_interval = overrideRepeatInterval ? repeatIntervalValue : INHERIT_FROM_PARENT;\n  const object_matchers = formAmRoute.object_matchers\n    ?.filter((route) => route.name && route.value && route.operator)\n    .map(({ name, operator, value }) => [name, operator, value] as ObjectMatcher);\n\n  const routes = formAmRoute.routes?.map((subRoute) =>\n    formAmRouteToAmRoute(alertManagerSourceName, subRoute, routeTree)\n  );\n\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: group_by,\n    object_matchers: object_matchers,\n    match: undefined, // DEPRECATED: Use matchers\n    match_re: undefined, // DEPRECATED: Use matchers\n    group_wait,\n    group_interval,\n    repeat_interval,\n    routes: routes,\n    mute_time_intervals: formAmRoute.muteTimeIntervals,\n    receiver: receiver,\n  };\n\n  // non-Grafana managed rules should use \"matchers\", Grafana-managed rules should use \"object_matchers\"\n  // Grafana maintains a fork of AM to support all utf-8 characters in the \"object_matchers\" property values but this\n  // does not exist in upstream AlertManager\n  if (alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    amRoute.matchers = formAmRoute.object_matchers?.map(({ name, operator, value }) => `${name}${operator}${value}`);\n    amRoute.object_matchers = undefined;\n  } else {\n    amRoute.object_matchers = normalizeMatchers(amRoute);\n    amRoute.matchers = undefined;\n  }\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return amRoute;\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string | undefined => {\n  // this allows us to deal with cleared values\n  if (selectableValue === null) {\n    return undefined;\n  }\n\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport function promDurationValidator(duration: string) {\n  if (duration.length === 0) {\n    return true;\n  }\n\n  return isValidPrometheusDuration(duration) || 'Invalid duration format. Must be {number}{time_unit}';\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { TimeOptions } from '../../types/time';\n\nexport function PromDurationDocs() {\n  const styles = useStyles2(getPromDurationStyles);\n  return (\n    <div>\n      Prometheus duration format consist of a number followed by a time unit.\n      <br />\n      Different units can be combined for more granularity.\n      <hr />\n      <div className={styles.list}>\n        <div className={styles.header}>\n          <div>Symbol</div>\n          <div>Time unit</div>\n          <div>Example</div>\n        </div>\n        <PromDurationDocsTimeUnit unit={TimeOptions.seconds} name=\"seconds\" example=\"20s\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.minutes} name=\"minutes\" example=\"10m\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.hours} name=\"hours\" example=\"4h\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.days} name=\"days\" example=\"3d\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.weeks} name=\"weeks\" example=\"2w\" />\n        <div className={styles.examples}>\n          <div>Multiple units combined</div>\n          <code>1m30s, 2h30m20s, 1w2d</code>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction PromDurationDocsTimeUnit({ unit, name, example }: { unit: TimeOptions; name: string; example: string }) {\n  const styles = useStyles2(getPromDurationStyles);\n\n  return (\n    <>\n      <div className={styles.unit}>{unit}</div>\n      <div>{name}</div>\n      <code>{example}</code>\n    </>\n  );\n}\n\nconst getPromDurationStyles = (theme: GrafanaTheme2) => ({\n  unit: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  list: css`\n    display: grid;\n    grid-template-columns: max-content 1fr 2fr;\n    gap: ${theme.spacing(1, 3)};\n  `,\n  header: css`\n    display: contents;\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  examples: css`\n    display: contents;\n    & > div {\n      grid-column: 1 / span 2;\n    }\n  `,\n});\n","import React from 'react';\n\nimport { Icon, Input } from '@grafana/ui';\n\nimport { HoverCard } from '../HoverCard';\n\nimport { PromDurationDocs } from './PromDurationDocs';\n\nexport const PromDurationInput = React.forwardRef<HTMLInputElement, React.ComponentProps<typeof Input>>(\n  (props, ref) => {\n    return (\n      <Input\n        suffix={\n          <HoverCard content={<PromDurationDocs />} disabled={false}>\n            <Icon name=\"info-circle\" size=\"lg\" />\n          </HoverCard>\n        }\n        {...props}\n        ref={ref}\n      />\n    );\n  }\n);\n\nPromDurationInput.displayName = 'PromDurationInput';\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      align-items: center;\n      display: flex;\n      flex-flow: row nowrap;\n\n      & > * + * {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    input: css`\n      flex: 1;\n    `,\n    promDurationInput: css`\n      max-width: ${theme.spacing(32)};\n    `,\n    timingFormContainer: css`\n      padding: ${theme.spacing(1)};\n    `,\n    linkText: css`\n      text-decoration: underline;\n    `,\n    collapse: css`\n      border: none;\n      background: none;\n      color: ${theme.colors.text.primary};\n    `,\n  };\n};\n","export type TimingOptions = {\n  group_wait?: string;\n  group_interval?: string;\n  repeat_interval?: string;\n};\n\nexport const TIMING_OPTIONS_DEFAULTS: Required<TimingOptions> = {\n  group_wait: '30s',\n  group_interval: '5m',\n  repeat_interval: '4h',\n};\n","import React, { ReactNode, useState } from 'react';\n\nimport { Collapse, Field, Form, InputControl, Link, MultiSelect, Select, useStyles2 } from '@grafana/ui';\nimport { RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport {\n  amRouteToFormAmRoute,\n  commonGroupByOptions,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  promDurationValidator,\n  stringsToSelectableValues,\n  stringToSelectableValue,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\nimport { TIMING_OPTIONS_DEFAULTS } from './timingOptions';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  actionButtons: ReactNode;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  receivers: AmRouteReceiver[];\n  route: RouteWithID;\n}\n\nexport const AmRootRouteForm = ({\n  actionButtons,\n  alertManagerSourceName,\n  onSubmit,\n  receivers,\n  route,\n}: AmRootRouteFormProps) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route.group_by));\n\n  const defaultValues = amRouteToFormAmRoute(route);\n\n  return (\n    <Form defaultValues={{ ...defaultValues, overrideTimings: true, overrideGrouping: true }} onSubmit={onSubmit}>\n      {({ register, control, errors, setValue }) => (\n        <>\n          <Field label=\"Default contact point\" invalid={!!errors.receiver} error={errors.receiver?.message}>\n            <>\n              <div className={styles.container} data-testid=\"am-receiver-select\">\n                <InputControl\n                  render={({ field: { onChange, ref, ...field } }) => (\n                    <Select\n                      aria-label=\"Default contact point\"\n                      {...field}\n                      className={styles.input}\n                      onChange={(value) => onChange(mapSelectValueToString(value))}\n                      options={receivers}\n                    />\n                  )}\n                  control={control}\n                  name=\"receiver\"\n                  rules={{ required: { value: true, message: 'Required.' } }}\n                />\n                <span>or</span>\n                <Link\n                  className={styles.linkText}\n                  href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}\n                >\n                  Create a contact point\n                </Link>\n              </div>\n            </>\n          </Field>\n          <Field\n            label=\"Group by\"\n            description=\"Group alerts when you receive a notification based on labels.\"\n            data-testid=\"am-group-select\"\n          >\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  aria-label=\"Group by\"\n                  {...field}\n                  allowCustomValue\n                  className={styles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                    // @ts-ignore-check: react-hook-form made me do this\n                    setValue('groupBy', [...field.value, opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={[...commonGroupByOptions, ...groupByOptions]}\n                />\n              )}\n              control={control}\n              name=\"groupBy\"\n            />\n          </Field>\n          <Collapse\n            collapsible\n            className={styles.collapse}\n            isOpen={isTimingOptionsExpanded}\n            label=\"Timing options\"\n            onToggle={setIsTimingOptionsExpanded}\n          >\n            <div className={styles.timingFormContainer}>\n              <Field\n                label=\"Group wait\"\n                description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. Default 30 seconds.\"\n                invalid={!!errors.groupWaitValue}\n                error={errors.groupWaitValue?.message}\n                data-testid=\"am-group-wait\"\n              >\n                <PromDurationInput\n                  {...register('groupWaitValue', { validate: promDurationValidator })}\n                  placeholder={TIMING_OPTIONS_DEFAULTS.group_wait}\n                  className={styles.promDurationInput}\n                  aria-label=\"Group wait\"\n                />\n              </Field>\n              <Field\n                label=\"Group interval\"\n                description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. Default 5 minutes.\"\n                invalid={!!errors.groupIntervalValue}\n                error={errors.groupIntervalValue?.message}\n                data-testid=\"am-group-interval\"\n              >\n                <PromDurationInput\n                  {...register('groupIntervalValue', { validate: promDurationValidator })}\n                  placeholder={TIMING_OPTIONS_DEFAULTS.group_interval}\n                  className={styles.promDurationInput}\n                  aria-label=\"Group interval\"\n                />\n              </Field>\n              <Field\n                label=\"Repeat interval\"\n                description=\"The waiting time to resend an alert after they have successfully been sent. Default 4 hours.\"\n                invalid={!!errors.repeatIntervalValue}\n                error={errors.repeatIntervalValue?.message}\n                data-testid=\"am-repeat-interval\"\n              >\n                <PromDurationInput\n                  {...register('repeatIntervalValue', { validate: promDurationValidator })}\n                  placeholder={TIMING_OPTIONS_DEFAULTS.repeat_interval}\n                  className={styles.promDurationInput}\n                  aria-label=\"Repeat interval\"\n                />\n              </Field>\n            </div>\n          </Collapse>\n          <div className={styles.container}>{actionButtons}</div>\n        </>\n      )}\n    </Form>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AlertmanagerConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { timeIntervalToString } from '../utils/alertmanager';\nimport { initialAsyncRequestState } from '../utils/redux';\n\nimport { useAlertManagerSourceName } from './useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useMuteTimingOptions(): Array<SelectableValue<string>> {\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  return useMemo(() => {\n    const { result } = (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n    const config: AlertmanagerConfig = result?.alertmanager_config ?? {};\n\n    const muteTimingsOptions: Array<SelectableValue<string>> =\n      config?.mute_time_intervals?.map((value) => ({\n        value: value.name,\n        label: value.name,\n        description: value.time_intervals.map((interval) => timeIntervalToString(interval)).join(', AND '),\n      })) ?? [];\n\n    return muteTimingsOptions;\n  }, [alertManagerSourceName, amConfigs]);\n}\n","import { css } from '@emotion/css';\nimport React, { ReactNode, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport {\n  Button,\n  Field,\n  FieldArray,\n  Form,\n  IconButton,\n  Input,\n  InputControl,\n  MultiSelect,\n  Select,\n  Switch,\n  useStyles2,\n  Badge,\n  FieldValidationMessage,\n} from '@grafana/ui';\nimport { MatcherOperator, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useMuteTimingOptions } from '../../hooks/useMuteTimingOptions';\nimport { FormAmRoute } from '../../types/amroutes';\nimport { SupportedPlugin } from '../../types/pluginBridges';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\nimport {\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n  commonGroupByOptions,\n  amRouteToFormAmRoute,\n  promDurationValidator,\n} from '../../utils/amroutes';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRoutesExpandedFormProps {\n  receivers: AmRouteReceiver[];\n  route?: RouteWithID;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  actionButtons: ReactNode;\n  defaults?: Partial<FormAmRoute>;\n}\n\nexport const AmRoutesExpandedForm = ({\n  actionButtons,\n  receivers,\n  route,\n  onSubmit,\n  defaults,\n}: AmRoutesExpandedFormProps) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route?.group_by));\n  const muteTimingOptions = useMuteTimingOptions();\n  const emptyMatcher = [{ name: '', operator: MatcherOperator.equal, value: '' }];\n\n  const receiversWithOnCallOnTop = receivers.sort(onCallFirst);\n\n  const formAmRoute = {\n    ...amRouteToFormAmRoute(route),\n    ...defaults,\n  };\n\n  const defaultValues: Omit<FormAmRoute, 'routes'> = {\n    ...formAmRoute,\n    // if we're adding a new route, show at least one empty matcher\n    object_matchers: route ? formAmRoute.object_matchers : emptyMatcher,\n  };\n\n  return (\n    <Form defaultValues={defaultValues} onSubmit={onSubmit} maxWidth=\"none\">\n      {({ control, register, errors, setValue, watch }) => (\n        <>\n          <input type=\"hidden\" {...register('id')} />\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <FieldArray name=\"object_matchers\" control={control}>\n            {({ fields, append, remove }) => (\n              <>\n                <Stack direction=\"column\" alignItems=\"flex-start\">\n                  <div>Matching labels</div>\n                  {fields.length === 0 && (\n                    <Badge\n                      color=\"orange\"\n                      className={styles.noMatchersWarning}\n                      icon=\"exclamation-triangle\"\n                      text=\"If no matchers are specified, this notification policy will handle all alert instances.\"\n                    />\n                  )}\n                  {fields.length > 0 && (\n                    <div className={styles.matchersContainer}>\n                      {fields.map((field, index) => {\n                        return (\n                          <Stack direction=\"row\" key={field.id} alignItems=\"center\">\n                            <Field\n                              label=\"Label\"\n                              invalid={!!errors.object_matchers?.[index]?.name}\n                              error={errors.object_matchers?.[index]?.name?.message}\n                            >\n                              <Input\n                                {...register(`object_matchers.${index}.name`, { required: 'Field is required' })}\n                                defaultValue={field.name}\n                                placeholder=\"label\"\n                                autoFocus\n                              />\n                            </Field>\n                            <Field label={'Operator'}>\n                              <InputControl\n                                render={({ field: { onChange, ref, ...field } }) => (\n                                  <Select\n                                    {...field}\n                                    className={styles.matchersOperator}\n                                    onChange={(value) => onChange(value?.value)}\n                                    options={matcherFieldOptions}\n                                    aria-label=\"Operator\"\n                                  />\n                                )}\n                                defaultValue={field.operator}\n                                control={control}\n                                name={`object_matchers.${index}.operator`}\n                                rules={{ required: { value: true, message: 'Required.' } }}\n                              />\n                            </Field>\n                            <Field\n                              label=\"Value\"\n                              invalid={!!errors.object_matchers?.[index]?.value}\n                              error={errors.object_matchers?.[index]?.value?.message}\n                            >\n                              <Input\n                                {...register(`object_matchers.${index}.value`, { required: 'Field is required' })}\n                                defaultValue={field.value}\n                                placeholder=\"value\"\n                              />\n                            </Field>\n                            <IconButton\n                              type=\"button\"\n                              tooltip=\"Remove matcher\"\n                              name={'trash-alt'}\n                              onClick={() => remove(index)}\n                            >\n                              Remove\n                            </IconButton>\n                          </Stack>\n                        );\n                      })}\n                    </div>\n                  )}\n                  <Button\n                    className={styles.addMatcherBtn}\n                    icon=\"plus\"\n                    onClick={() => append(emptyArrayFieldMatcher)}\n                    variant=\"secondary\"\n                    type=\"button\"\n                  >\n                    Add matcher\n                  </Button>\n                </Stack>\n              </>\n            )}\n          </FieldArray>\n          <Field label=\"Contact point\">\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  aria-label=\"Contact point\"\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapSelectValueToString(value))}\n                  options={receiversWithOnCallOnTop}\n                  isClearable\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n            />\n          </Field>\n          <Field label=\"Continue matching subsequent sibling nodes\">\n            <Switch id=\"continue-toggle\" {...register('continue')} />\n          </Field>\n          <Field label=\"Override grouping\">\n            <Switch id=\"override-grouping-toggle\" {...register('overrideGrouping')} />\n          </Field>\n          {watch().overrideGrouping && (\n            <Field\n              label=\"Group by\"\n              description=\"Group alerts when you receive a notification based on labels. If empty it will be inherited from the parent policy.\"\n            >\n              <InputControl\n                rules={{\n                  validate: (value) => {\n                    if (!value || value.length === 0) {\n                      return 'At least one group by option is required.';\n                    }\n                    return true;\n                  },\n                }}\n                render={({ field: { onChange, ref, ...field }, fieldState: { error } }) => (\n                  <>\n                    <MultiSelect\n                      aria-label=\"Group by\"\n                      {...field}\n                      invalid={Boolean(error)}\n                      allowCustomValue\n                      className={formStyles.input}\n                      onCreateOption={(opt: string) => {\n                        setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                        // @ts-ignore-check: react-hook-form made me do this\n                        setValue('groupBy', [...field.value, opt]);\n                      }}\n                      onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                      options={[...commonGroupByOptions, ...groupByOptions]}\n                    />\n                    {error && <FieldValidationMessage>{error.message}</FieldValidationMessage>}\n                  </>\n                )}\n                control={control}\n                name=\"groupBy\"\n              />\n            </Field>\n          )}\n          <Field label=\"Override general timings\">\n            <Switch id=\"override-timings-toggle\" {...register('overrideTimings')} />\n          </Field>\n          {watch().overrideTimings && (\n            <>\n              <Field\n                label=\"Group wait\"\n                description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. If empty it will be inherited from the parent policy.\"\n                invalid={!!errors.groupWaitValue}\n                error={errors.groupWaitValue?.message}\n              >\n                <PromDurationInput\n                  {...register('groupWaitValue', { validate: promDurationValidator })}\n                  aria-label=\"Group wait value\"\n                  className={formStyles.promDurationInput}\n                />\n              </Field>\n              <Field\n                label=\"Group interval\"\n                description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. If empty it will be inherited from the parent policy.\"\n                invalid={!!errors.groupIntervalValue}\n                error={errors.groupIntervalValue?.message}\n              >\n                <PromDurationInput\n                  {...register('groupIntervalValue', { validate: promDurationValidator })}\n                  aria-label=\"Group interval value\"\n                  className={formStyles.promDurationInput}\n                />\n              </Field>\n              <Field\n                label=\"Repeat interval\"\n                description=\"The waiting time to resend an alert after they have successfully been sent.\"\n                invalid={!!errors.repeatIntervalValue}\n                error={errors.repeatIntervalValue?.message}\n              >\n                <PromDurationInput\n                  {...register('repeatIntervalValue', { validate: promDurationValidator })}\n                  aria-label=\"Repeat interval value\"\n                  className={formStyles.promDurationInput}\n                />\n              </Field>\n            </>\n          )}\n          <Field\n            label=\"Mute timings\"\n            data-testid=\"am-mute-timing-select\"\n            description=\"Add mute timing to policy\"\n            invalid={!!errors.muteTimeIntervals}\n          >\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  aria-label=\"Mute timings\"\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={muteTimingOptions}\n                />\n              )}\n              control={control}\n              name=\"muteTimeIntervals\"\n            />\n          </Field>\n          {actionButtons}\n        </>\n      )}\n    </Form>\n  );\n};\n\nfunction onCallFirst(receiver: AmRouteReceiver) {\n  if (receiver.grafanaAppReceiverType === SupportedPlugin.OnCall) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css`\n      margin-bottom: ${commonSpacing};\n    `,\n    matchersContainer: css`\n      background-color: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(1.5)} ${theme.spacing(2)};\n      padding-bottom: 0;\n      width: fit-content;\n    `,\n    matchersOperator: css`\n      min-width: 120px;\n    `,\n    noMatchersWarning: css`\n      padding: ${theme.spacing(1)} ${theme.spacing(2)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { take, takeRight, uniqueId } from 'lodash';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { getTagColorsFromName, useStyles2 } from '@grafana/ui';\nimport { ObjectMatcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { HoverCard } from '../HoverCard';\n\ntype MatchersProps = { matchers: ObjectMatcher[] };\n\n// renders the first N number of matchers\nconst Matchers: FC<MatchersProps> = ({ matchers }) => {\n  const styles = useStyles2(getStyles);\n\n  const NUM_MATCHERS = 5;\n\n  const firstFew = take(matchers, NUM_MATCHERS);\n  const rest = takeRight(matchers, matchers.length - NUM_MATCHERS);\n  const hasMoreMatchers = rest.length > 0;\n\n  return (\n    <span data-testid=\"label-matchers\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\">\n        {firstFew.map((matcher) => (\n          <MatcherBadge key={uniqueId()} matcher={matcher} />\n        ))}\n        {/* TODO hover state to show all matchers we're not showing */}\n        {hasMoreMatchers && (\n          <HoverCard\n            arrow\n            placement=\"top\"\n            content={\n              <>\n                {rest.map((matcher) => (\n                  <MatcherBadge key={uniqueId()} matcher={matcher} />\n                ))}\n              </>\n            }\n          >\n            <span>\n              <div className={styles.metadata}>{`and ${rest.length} more`}</div>\n            </span>\n          </HoverCard>\n        )}\n      </Stack>\n    </span>\n  );\n};\n\ninterface MatcherBadgeProps {\n  matcher: ObjectMatcher;\n}\n\nconst MatcherBadge: FC<MatcherBadgeProps> = ({ matcher: [label, operator, value] }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.matcher(label).wrapper}>\n      <Stack direction=\"row\" gap={0} alignItems=\"baseline\">\n        {label} {operator} {value}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css`\n        color: #fff;\n        background: ${color};\n        padding: ${theme.spacing(0.33)} ${theme.spacing(0.66)};\n        font-size: ${theme.typography.bodySmall.fontSize};\n\n        border: solid 1px ${borderColor};\n        border-radius: ${theme.shape.borderRadius(2)};\n      `,\n    };\n  },\n  metadata: css`\n    color: ${theme.colors.text.secondary};\n\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n\nexport { Matchers };\n","import { groupBy } from 'lodash';\nimport React, { FC, useCallback, useMemo, useState } from 'react';\n\nimport { Stack } from '@grafana/experimental';\nimport { Button, Icon, Modal, ModalProps, Spinner } from '@grafana/ui';\nimport {\n  AlertmanagerGroup,\n  AlertState,\n  ObjectMatcher,\n  Receiver,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport { AlertGroup } from '../alert-groups/AlertGroup';\nimport { useGetAmRouteReceiverWithGrafanaAppTypes } from '../receivers/grafanaAppReceivers/grafanaApp';\n\nimport { AlertGroupsSummary } from './AlertGroupsSummary';\nimport { AmRootRouteForm } from './EditDefaultPolicyForm';\nimport { AmRoutesExpandedForm } from './EditNotificationPolicyForm';\nimport { Matchers } from './Matchers';\n\ntype ModalHook<T = undefined> = [JSX.Element, (item: T) => void, () => void];\ntype EditModalHook = [JSX.Element, (item: RouteWithID, isDefaultRoute?: boolean) => void, () => void];\n\nconst useAddPolicyModal = (\n  receivers: Receiver[] = [],\n  handleAdd: (route: Partial<FormAmRoute>, parentRoute: RouteWithID) => void,\n  loading: boolean\n): ModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [parentRoute, setParentRoute] = useState<RouteWithID>();\n  const AmRouteReceivers = useGetAmRouteReceiverWithGrafanaAppTypes(receivers);\n\n  const handleDismiss = useCallback(() => {\n    setParentRoute(undefined);\n    setShowModal(false);\n  }, []);\n\n  const handleShow = useCallback((parentRoute: RouteWithID) => {\n    setParentRoute(parentRoute);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Add notification policy\"\n        >\n          <AmRoutesExpandedForm\n            receivers={AmRouteReceivers}\n            defaults={{\n              groupBy: parentRoute?.group_by,\n            }}\n            onSubmit={(newRoute) => parentRoute && handleAdd(newRoute, parentRoute)}\n            actionButtons={\n              <Modal.ButtonRow>\n                <Button type=\"submit\">Save policy</Button>\n                <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n                  Cancel\n                </Button>\n              </Modal.ButtonRow>\n            }\n          />\n        </Modal>\n      ),\n    [AmRouteReceivers, handleAdd, handleDismiss, loading, parentRoute, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useEditPolicyModal = (\n  alertManagerSourceName: string,\n  receivers: Receiver[],\n  handleSave: (route: Partial<FormAmRoute>) => void,\n  loading: boolean\n): EditModalHook => {\n  const [showModal, setShowModal] = useState(false);\n  const [isDefaultPolicy, setIsDefaultPolicy] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n  const AmRouteReceivers = useGetAmRouteReceiverWithGrafanaAppTypes(receivers);\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n  }, []);\n\n  const handleShow = useCallback((route: RouteWithID, isDefaultPolicy?: boolean) => {\n    setIsDefaultPolicy(isDefaultPolicy ?? false);\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Edit notification policy\"\n        >\n          {isDefaultPolicy && route && (\n            <AmRootRouteForm\n              // TODO *sigh* this alertmanagersourcename should come from context or something\n              // passing it down all the way here is a code smell\n              alertManagerSourceName={alertManagerSourceName}\n              onSubmit={handleSave}\n              receivers={AmRouteReceivers}\n              route={route}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"submit\">Update default policy</Button>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n                    Cancel\n                  </Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n          {!isDefaultPolicy && (\n            <AmRoutesExpandedForm\n              receivers={AmRouteReceivers}\n              route={route}\n              onSubmit={handleSave}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"submit\">Update policy</Button>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n                    Cancel\n                  </Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n        </Modal>\n      ),\n    [AmRouteReceivers, alertManagerSourceName, handleDismiss, handleSave, isDefaultPolicy, loading, route, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useDeletePolicyModal = (handleDelete: (route: RouteWithID) => void, loading: boolean): ModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n  }, [setRoute]);\n\n  const handleShow = useCallback((route: RouteWithID) => {\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (route) {\n      handleDelete(route);\n    }\n  }, [handleDelete, route]);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Delete notification policy\"\n        >\n          <p>Deleting this notification policy will permanently remove it.</p>\n          <p>Are you sure you want to delete this policy?</p>\n\n          <Modal.ButtonRow>\n            <Button type=\"button\" variant=\"destructive\" onClick={handleSubmit}>\n              Yes, delete policy\n            </Button>\n            <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n              Cancel\n            </Button>\n          </Modal.ButtonRow>\n        </Modal>\n      ),\n    [handleDismiss, handleSubmit, loading, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useAlertGroupsModal = (): [\n  JSX.Element,\n  (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[]) => void,\n  () => void\n] => {\n  const [showModal, setShowModal] = useState(false);\n  const [alertGroups, setAlertGroups] = useState<AlertmanagerGroup[]>([]);\n  const [matchers, setMatchers] = useState<ObjectMatcher[]>([]);\n\n  const handleDismiss = useCallback(() => {\n    setShowModal(false);\n    setAlertGroups([]);\n    setMatchers([]);\n  }, []);\n\n  const handleShow = useCallback((alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[]) => {\n    setAlertGroups(alertGroups);\n    if (matchers) {\n      setMatchers(matchers);\n    }\n    setShowModal(true);\n  }, []);\n\n  const instancesByState = useMemo(() => {\n    const instances = alertGroups.flatMap((group) => group.alerts);\n    return groupBy(instances, (instance) => instance.status.state);\n  }, [alertGroups]);\n\n  const modalElement = useMemo(\n    () => (\n      <Modal\n        isOpen={showModal}\n        onDismiss={handleDismiss}\n        closeOnBackdropClick={true}\n        closeOnEscape={true}\n        title={\n          <Stack direction=\"row\" alignItems=\"center\" gap={1} flexGrow={1}>\n            <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n              <Icon name=\"x\" /> Matchers\n            </Stack>\n            <Matchers matchers={matchers} />\n          </Stack>\n        }\n      >\n        <Stack direction=\"column\">\n          <AlertGroupsSummary\n            active={instancesByState[AlertState.Active]?.length}\n            suppressed={instancesByState[AlertState.Suppressed]?.length}\n            unprocessed={instancesByState[AlertState.Unprocessed]?.length}\n          />\n          <div>\n            {alertGroups.map((group, index) => (\n              <AlertGroup key={index} alertManagerSourceName={''} group={group} />\n            ))}\n          </div>\n        </Stack>\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n            Cancel\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    ),\n    [alertGroups, handleDismiss, instancesByState, matchers, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst UpdatingModal: FC<Pick<ModalProps, 'isOpen'>> = ({ isOpen }) => (\n  <Modal\n    isOpen={isOpen}\n    onDismiss={() => {}}\n    closeOnBackdropClick={false}\n    closeOnEscape={false}\n    title={\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        Updating... <Spinner inline />\n      </Stack>\n    }\n  >\n    Please wait while we update your notification policies.\n  </Modal>\n);\n\nexport { useAddPolicyModal, useDeletePolicyModal, useEditPolicyModal, useAlertGroupsModal };\n","import { isArray, merge, pick, reduce } from 'lodash';\n\nimport { AlertmanagerGroup, MatcherOperator, ObjectMatcher, Route } from 'app/plugins/datasource/alertmanager/types';\n\nimport { normalizeMatchers } from './amroutes';\n\nexport type Label = [string, string];\ntype OperatorPredicate = (labelValue: string, matcherValue: string) => boolean;\n\nconst OperatorFunctions: Record<MatcherOperator, OperatorPredicate> = {\n  [MatcherOperator.equal]: (lv, mv) => lv === mv,\n  [MatcherOperator.notEqual]: (lv, mv) => lv !== mv,\n  [MatcherOperator.regex]: (lv, mv) => Boolean(lv.match(new RegExp(mv))),\n  [MatcherOperator.notRegex]: (lv, mv) => !Boolean(lv.match(new RegExp(mv))),\n};\n\nfunction isLabelMatch(matcher: ObjectMatcher, label: Label) {\n  const [labelKey, labelValue] = label;\n  const [matcherKey, operator, matcherValue] = matcher;\n\n  // not interested, keys don't match\n  if (labelKey !== matcherKey) {\n    return false;\n  }\n\n  const matchFunction = OperatorFunctions[operator];\n  if (!matchFunction) {\n    throw new Error(`no such operator: ${operator}`);\n  }\n\n  return matchFunction(labelValue, matcherValue);\n}\n\n// check if every matcher returns \"true\" for the set of labels\nfunction matchLabels(matchers: ObjectMatcher[], labels: Label[]) {\n  return matchers.every((matcher) => {\n    return labels.some((label) => isLabelMatch(matcher, label));\n  });\n}\n\n// Match does a depth-first left-to-right search through the route tree\n// and returns the matching routing nodes.\nfunction findMatchingRoutes<T extends Route>(root: T, labels: Label[]): T[] {\n  let matches: T[] = [];\n\n  // If the current node is not a match, return nothing\n  const normalizedMatchers = normalizeMatchers(root);\n  if (!matchLabels(normalizedMatchers, labels)) {\n    return [];\n  }\n\n  // If the current node matches, recurse through child nodes\n  if (root.routes) {\n    for (let index = 0; index < root.routes.length; index++) {\n      let child = root.routes[index];\n      let matchingChildren = findMatchingRoutes(child, labels);\n\n      // TODO how do I solve this typescript thingy? It looks correct to me /shrug\n      // @ts-ignore\n      matches = matches.concat(matchingChildren);\n\n      // we have matching children and we don't want to continue, so break here\n      if (matchingChildren.length && !child.continue) {\n        break;\n      }\n    }\n  }\n\n  // If no child nodes were matches, the current node itself is a match.\n  if (matches.length === 0) {\n    matches.push(root);\n  }\n\n  return matches;\n}\n\n/**\n * find all of the groups that have instances that match the route, thay way we can find all instances\n * (and their grouping) for the given route\n */\nfunction findMatchingAlertGroups(\n  routeTree: Route,\n  route: Route,\n  alertGroups: AlertmanagerGroup[]\n): AlertmanagerGroup[] {\n  const matchingGroups: AlertmanagerGroup[] = [];\n\n  return alertGroups.reduce((acc, group) => {\n    // find matching alerts in the current group\n    const matchingAlerts = group.alerts.filter((alert) => {\n      const labels = Object.entries(alert.labels);\n      return findMatchingRoutes(routeTree, labels).some((matchingRoute) => matchingRoute === route);\n    });\n\n    // if the groups has any alerts left after matching, add it to the results\n    if (matchingAlerts.length) {\n      acc.push({\n        ...group,\n        alerts: matchingAlerts,\n      });\n    }\n\n    return acc;\n  }, matchingGroups);\n}\n\nexport type InhertitableProperties = Pick<\n  Route,\n  'receiver' | 'group_by' | 'group_wait' | 'group_interval' | 'repeat_interval' | 'mute_time_intervals'\n>;\n\n// inherited properties are config properties that exist on the parent route (or its inherited properties) but not on the child route\nfunction getInheritedProperties(\n  parentRoute: Route,\n  childRoute: Route,\n  propertiesParentInherited?: Partial<InhertitableProperties>\n) {\n  const fullParentProperties = merge({}, parentRoute, propertiesParentInherited);\n\n  const inheritableProperties: InhertitableProperties = pick(fullParentProperties, [\n    'receiver',\n    'group_by',\n    'group_wait',\n    'group_interval',\n    'repeat_interval',\n    'mute_time_intervals',\n  ]);\n\n  // TODO how to solve this TypeScript mystery?\n  const inherited = reduce(\n    inheritableProperties,\n    (inheritedProperties: Partial<Route> = {}, parentValue, property) => {\n      // @ts-ignore\n      const inheritFromParent = parentValue !== undefined && childRoute[property] === undefined;\n      const inheritEmptyGroupByFromParent =\n        property === 'group_by' && isArray(childRoute[property]) && childRoute[property]?.length === 0;\n\n      if (inheritFromParent) {\n        // @ts-ignore\n        inheritedProperties[property] = parentValue;\n      }\n\n      if (inheritEmptyGroupByFromParent) {\n        // @ts-ignore\n        inheritedProperties[property] = parentValue;\n      }\n\n      return inheritedProperties;\n    },\n    {}\n  );\n\n  return inherited;\n}\n\nexport { findMatchingAlertGroups, findMatchingRoutes, getInheritedProperties, matchLabels };\n","import { css } from '@emotion/css';\nimport classNames from 'classnames';\nimport React, { HTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, IconName, useStyles2 } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  icon?: IconName;\n}\n\nconst MetaText = ({ children, icon, ...rest }: Props) => {\n  const styles = useStyles2(getStyles);\n  const interactive = typeof rest.onClick === 'function';\n\n  return (\n    <div\n      className={classNames({\n        [styles.metaText]: true,\n        [styles.interactive]: interactive,\n      })}\n      {...rest}\n    >\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        {icon && <Icon name={icon} />}\n        {children}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  metaText: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    color: ${theme.colors.text.secondary};\n  `,\n  interactive: css`\n    cursor: pointer;\n\n    &:hover {\n      color: ${theme.colors.text.primary};\n    }\n  `,\n});\n\nexport { MetaText };\n","import React from 'react';\n\nimport { useTheme2 } from '@grafana/ui';\n\ninterface Props {}\n\nconst Strong = ({ children }: React.PropsWithChildren<Props>) => {\n  const theme = useTheme2();\n  return <strong style={{ color: theme.colors.text.primary }}>{children}</strong>;\n};\n\nexport { Strong };\n","import { css } from '@emotion/css';\nimport { uniqueId, groupBy, upperFirst, sumBy, isArray } from 'lodash';\nimport pluralize from 'pluralize';\nimport React, { FC, Fragment, ReactNode, useMemo } from 'react';\nimport { useEnabled } from 'react-enable';\nimport { Link } from 'react-router-dom';\n\nimport { GrafanaTheme2, IconName } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Badge, Button, Dropdown, getTagColorsFromName, Icon, Menu, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Span } from '@grafana/ui/src/unstable';\nimport { contextSrv } from 'app/core/core';\nimport { RouteWithID, Receiver, ObjectMatcher, AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\nimport { ReceiversState } from 'app/types';\n\nimport { AlertingFeature } from '../../features';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { normalizeMatchers } from '../../utils/amroutes';\nimport { createContactPointLink, createMuteTimingLink } from '../../utils/misc';\nimport {\n  findMatchingAlertGroups,\n  getInheritedProperties,\n  InhertitableProperties,\n} from '../../utils/notification-policies';\nimport { HoverCard } from '../HoverCard';\nimport { Label } from '../Label';\nimport { MetaText } from '../MetaText';\nimport { Spacer } from '../Spacer';\nimport { Strong } from '../Strong';\n\nimport { Matchers } from './Matchers';\nimport { TimingOptions, TIMING_OPTIONS_DEFAULTS } from './timingOptions';\n\ninterface PolicyComponentProps {\n  receivers?: Receiver[];\n  alertGroups?: AlertmanagerGroup[];\n  contactPointsState?: ReceiversState;\n  readOnly?: boolean;\n  inheritedProperties?: Partial<InhertitableProperties>;\n  routesMatchingFilters?: RouteWithID[];\n\n  routeTree: RouteWithID;\n  currentRoute: RouteWithID;\n  alertManagerSourceName: string;\n  onEditPolicy: (route: RouteWithID, isDefault?: boolean) => void;\n  onAddPolicy: (route: RouteWithID) => void;\n  onDeletePolicy: (route: RouteWithID) => void;\n  onShowAlertInstances: (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[]) => void;\n}\n\nconst Policy: FC<PolicyComponentProps> = ({\n  receivers = [],\n  contactPointsState,\n  readOnly = false,\n  alertGroups = [],\n  alertManagerSourceName,\n  currentRoute,\n  routeTree,\n  inheritedProperties,\n  routesMatchingFilters = [],\n  onEditPolicy,\n  onAddPolicy,\n  onDeletePolicy,\n  onShowAlertInstances,\n}) => {\n  const styles = useStyles2(getStyles);\n  const isDefaultPolicy = currentRoute === routeTree;\n  const showMatchingInstances = useEnabled(AlertingFeature.NotificationPoliciesV2MatchingInstances);\n\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const canEditRoutes = contextSrv.hasPermission(permissions.update);\n  const canDeleteRoutes = contextSrv.hasPermission(permissions.delete);\n\n  const contactPoint = currentRoute.receiver;\n  const continueMatching = currentRoute.continue ?? false;\n  const groupBy = currentRoute.group_by;\n  const muteTimings = currentRoute.mute_time_intervals ?? [];\n  const timingOptions: TimingOptions = {\n    group_wait: currentRoute.group_wait,\n    group_interval: currentRoute.group_interval,\n    repeat_interval: currentRoute.repeat_interval,\n  };\n\n  const matchers = normalizeMatchers(currentRoute);\n  const hasMatchers = Boolean(matchers && matchers.length);\n  const hasMuteTimings = Boolean(muteTimings.length);\n  const hasFocus = routesMatchingFilters.some((route) => route.id === currentRoute.id);\n\n  // gather errors here\n  const errors: ReactNode[] = [];\n\n  // if the route has no matchers, is not the default policy (that one has none) and it does not continue\n  // then we should warn the user that it's a suspicious setup\n  const showMatchesAllLabelsWarning = !hasMatchers && !isDefaultPolicy && !continueMatching;\n\n  // if the receiver / contact point has any errors show it on the policy\n  const actualContactPoint = contactPoint ?? inheritedProperties?.receiver ?? '';\n  const contactPointErrors = contactPointsState ? getContactPointErrors(actualContactPoint, contactPointsState) : [];\n\n  contactPointErrors.forEach((error) => {\n    errors.push(error);\n  });\n\n  const hasInheritedProperties = inheritedProperties && Object.keys(inheritedProperties).length > 0;\n\n  const childPolicies = currentRoute.routes ?? [];\n\n  const inheritedGrouping = hasInheritedProperties && inheritedProperties.group_by;\n  const noGrouping = isArray(groupBy) && groupBy[0] === '...';\n  const customGrouping = !noGrouping && isArray(groupBy) && groupBy.length > 0;\n  const singleGroup = isDefaultPolicy && isArray(groupBy) && groupBy.length === 0;\n\n  const isEditable = canEditRoutes;\n  const isDeletable = canDeleteRoutes && !isDefaultPolicy;\n\n  const matchingAlertGroups = useMemo(() => {\n    return showMatchingInstances ? findMatchingAlertGroups(routeTree, currentRoute, alertGroups) : [];\n  }, [alertGroups, currentRoute, routeTree, showMatchingInstances]);\n\n  // sum all alert instances for all groups we're handling\n  const numberOfAlertInstances = sumBy(matchingAlertGroups, (group) => group.alerts.length);\n\n  // TODO dead branch detection, warnings for all sort of configs that won't work or will never be activated\n  return (\n    <Stack direction=\"column\" gap={1.5}>\n      <div\n        className={styles.policyWrapper(hasFocus)}\n        data-testid={isDefaultPolicy ? 'am-root-route-container' : 'am-route-container'}\n      >\n        {/* continueMatching and showMatchesAllLabelsWarning are mutually exclusive so the icons can't overlap */}\n        {continueMatching && <ContinueMatchingIndicator />}\n        {showMatchesAllLabelsWarning && <AllMatchesIndicator />}\n        <Stack direction=\"column\" gap={0}>\n          {/* Matchers and actions */}\n          <div className={styles.matchersRow}>\n            <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n              {isDefaultPolicy ? (\n                <DefaultPolicyIndicator />\n              ) : hasMatchers ? (\n                <Matchers matchers={matchers ?? []} />\n              ) : (\n                <span className={styles.metadata}>No matchers</span>\n              )}\n              <Spacer />\n              {/* TODO maybe we should move errors to the gutter instead? */}\n              {errors.length > 0 && <Errors errors={errors} />}\n              {!readOnly && (\n                <Stack direction=\"row\" gap={0.5}>\n                  <Button\n                    variant=\"secondary\"\n                    icon=\"plus\"\n                    size=\"sm\"\n                    onClick={() => onAddPolicy(currentRoute)}\n                    type=\"button\"\n                  >\n                    New nested policy\n                  </Button>\n                  <Dropdown\n                    overlay={\n                      <Menu>\n                        <Menu.Item\n                          icon=\"pen\"\n                          disabled={!isEditable}\n                          label=\"Edit\"\n                          onClick={() => onEditPolicy(currentRoute, isDefaultPolicy)}\n                        />\n                        {isDeletable && (\n                          <>\n                            <Menu.Divider />\n                            <Menu.Item\n                              destructive\n                              icon=\"trash-alt\"\n                              label=\"Delete\"\n                              onClick={() => onDeletePolicy(currentRoute)}\n                            />\n                          </>\n                        )}\n                      </Menu>\n                    }\n                  >\n                    <Button\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      icon=\"ellipsis-h\"\n                      type=\"button\"\n                      aria-label=\"more-actions\"\n                      data-testid=\"more-actions\"\n                    />\n                  </Dropdown>\n                </Stack>\n              )}\n            </Stack>\n          </div>\n\n          {/* Metadata row */}\n          <div className={styles.metadataRow}>\n            <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n              {showMatchingInstances && (\n                <MetaText\n                  icon=\"layers-alt\"\n                  onClick={() => {\n                    onShowAlertInstances(matchingAlertGroups, matchers);\n                  }}\n                  data-testid=\"matching-instances\"\n                >\n                  <Strong>{numberOfAlertInstances}</Strong>\n                  <span>{pluralize('instance', numberOfAlertInstances)}</span>\n                </MetaText>\n              )}\n              {contactPoint && (\n                <MetaText icon=\"at\" data-testid=\"contact-point\">\n                  <span>Delivered to</span>\n                  <ContactPointsHoverDetails\n                    alertManagerSourceName={alertManagerSourceName}\n                    receivers={receivers}\n                    contactPoint={contactPoint}\n                  />\n                </MetaText>\n              )}\n              {!inheritedGrouping && (\n                <>\n                  {customGrouping && (\n                    <MetaText icon=\"layer-group\" data-testid=\"grouping\">\n                      <span>Grouped by</span>\n                      <Strong>{groupBy.join(', ')}</Strong>\n                    </MetaText>\n                  )}\n                  {singleGroup && (\n                    <MetaText icon=\"layer-group\">\n                      <span>Single group</span>\n                    </MetaText>\n                  )}\n                  {noGrouping && (\n                    <MetaText icon=\"layer-group\">\n                      <span>Not grouping</span>\n                    </MetaText>\n                  )}\n                </>\n              )}\n              {hasMuteTimings && (\n                <MetaText icon=\"calendar-slash\" data-testid=\"mute-timings\">\n                  <span>Muted when</span>\n                  <MuteTimings timings={muteTimings} alertManagerSourceName={alertManagerSourceName} />\n                </MetaText>\n              )}\n              {timingOptions && Object.values(timingOptions).some(Boolean) && (\n                <TimingOptionsMeta timingOptions={timingOptions} />\n              )}\n              {hasInheritedProperties && (\n                <>\n                  <MetaText icon=\"corner-down-right-alt\" data-testid=\"inherited-properties\">\n                    <span>Inherited</span>\n                    <InheritedProperties properties={inheritedProperties} />\n                  </MetaText>\n                </>\n              )}\n            </Stack>\n          </div>\n        </Stack>\n      </div>\n      <div className={styles.childPolicies}>\n        {/* pass the \"readOnly\" prop from the parent, because if you can't edit the parent you can't edit children */}\n        {childPolicies.map((child) => {\n          const childInheritedProperties = getInheritedProperties(currentRoute, child, inheritedProperties);\n\n          return (\n            <Policy\n              key={uniqueId()}\n              routeTree={routeTree}\n              currentRoute={child}\n              receivers={receivers}\n              contactPointsState={contactPointsState}\n              readOnly={readOnly}\n              inheritedProperties={childInheritedProperties}\n              onAddPolicy={onAddPolicy}\n              onEditPolicy={onEditPolicy}\n              onDeletePolicy={onDeletePolicy}\n              onShowAlertInstances={onShowAlertInstances}\n              alertManagerSourceName={alertManagerSourceName}\n              alertGroups={alertGroups}\n              routesMatchingFilters={routesMatchingFilters}\n            />\n          );\n        })}\n      </div>\n    </Stack>\n  );\n};\n\nconst Errors: FC<{ errors: React.ReactNode[] }> = ({ errors }) => (\n  <HoverCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"column\" gap={0.5}>\n        {errors.map((error) => (\n          <Fragment key={uniqueId()}>{error}</Fragment>\n        ))}\n      </Stack>\n    }\n  >\n    <span>\n      <Badge icon=\"exclamation-circle\" color=\"red\" text={pluralize('error', errors.length, true)} />\n    </span>\n  </HoverCard>\n);\n\nconst ContinueMatchingIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This route will continue matching other policies\">\n      <div className={styles.gutterIcon} data-testid=\"continue-matching\">\n        <Icon name=\"arrow-down\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nconst AllMatchesIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This policy matches all labels\">\n      <div className={styles.gutterIcon} data-testid=\"matches-all\">\n        <Icon name=\"exclamation-triangle\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nconst DefaultPolicyIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <strong>Default policy</strong>\n      <span className={styles.metadata}>\n        All alert instances will be handled by the default policy if no other matching policies are found.\n      </span>\n    </>\n  );\n};\n\nconst InheritedProperties: FC<{ properties: InhertitableProperties }> = ({ properties }) => (\n  <HoverCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"row\" gap={0.5}>\n        {Object.entries(properties).map(([key, value]) => {\n          // no idea how to do this with TypeScript without type casting...\n          return (\n            <Label\n              key={key}\n              // @ts-ignore\n              label={routePropertyToLabel(key)}\n              // @ts-ignore\n              value={<Strong>{routePropertyToValue(key, value)}</Strong>}\n            />\n          );\n        })}\n      </Stack>\n    }\n  >\n    <div>\n      <Strong>{pluralize('property', Object.keys(properties).length, true)}</Strong>\n    </div>\n  </HoverCard>\n);\n\nconst MuteTimings: FC<{ timings: string[]; alertManagerSourceName: string }> = ({\n  timings,\n  alertManagerSourceName,\n}) => {\n  /* TODO make a better mute timing overview, allow combining multiple in to one overview */\n  /*\n    <HoverCard\n      arrow\n      placement=\"top\"\n      header={<MetaText icon=\"calendar-slash\">Mute Timings</MetaText>}\n      content={\n        // TODO show a combined view of all mute timings here, combining the weekdays, years, months, etc\n        <Stack direction=\"row\" gap={0.5}>\n          <Label label=\"Weekdays\" value=\"Saturday and Sunday\" />\n        </Stack>\n      }\n    >\n      <div>\n        <Strong>{muteTimings.join(', ')}</Strong>\n      </div>\n    </HoverCard>\n  */\n  return (\n    <div>\n      <Strong>\n        {timings.map((timing) => (\n          <Link key={timing} to={createMuteTimingLink(timing, alertManagerSourceName)}>\n            {timing}\n          </Link>\n        ))}\n      </Strong>\n    </div>\n  );\n};\n\nconst TimingOptionsMeta: FC<{ timingOptions: TimingOptions }> = ({ timingOptions }) => {\n  const groupWait = timingOptions.group_wait ?? TIMING_OPTIONS_DEFAULTS.group_wait;\n  const groupInterval = timingOptions.group_interval ?? TIMING_OPTIONS_DEFAULTS.group_interval;\n\n  return (\n    <MetaText icon=\"hourglass\" data-testid=\"timing-options\">\n      <span>Wait</span>\n      <Tooltip\n        placement=\"top\"\n        content=\"How long to initially wait to send a notification for a group of alert instances.\"\n      >\n        <span>\n          <Strong>{groupWait}</Strong> <span>to group instances</span>,\n        </span>\n      </Tooltip>\n      <Tooltip\n        placement=\"top\"\n        content=\"How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent.\"\n      >\n        <span>\n          <Strong>{groupInterval}</Strong> <span>before sending updates</span>\n        </span>\n      </Tooltip>\n    </MetaText>\n  );\n};\n\ninterface ContactPointDetailsProps {\n  alertManagerSourceName: string;\n  contactPoint: string;\n  receivers: Receiver[];\n}\n\nconst INTEGRATION_ICONS: Record<string, IconName> = {\n  discord: 'discord',\n  email: 'envelope',\n  googlechat: 'google-hangouts-alt',\n  hipchat: 'hipchat',\n  line: 'line',\n  pagerduty: 'pagerduty',\n  slack: 'slack',\n  teams: 'microsoft',\n  telegram: 'telegram-alt',\n};\n\n// @TODO make this work for cloud AMs too\nconst ContactPointsHoverDetails: FC<ContactPointDetailsProps> = ({\n  alertManagerSourceName,\n  contactPoint,\n  receivers,\n}) => {\n  const details = receivers.find((receiver) => receiver.name === contactPoint);\n  if (!details) {\n    return (\n      <Link to={createContactPointLink(contactPoint, alertManagerSourceName)}>\n        <Strong>{contactPoint}</Strong>\n      </Link>\n    );\n  }\n\n  const integrations = details.grafana_managed_receiver_configs;\n  if (!integrations) {\n    return (\n      <Link to={createContactPointLink(contactPoint, alertManagerSourceName)}>\n        <Strong>{contactPoint}</Strong>\n      </Link>\n    );\n  }\n\n  const groupedIntegrations = groupBy(details.grafana_managed_receiver_configs, (config) => config.type);\n\n  return (\n    <HoverCard\n      arrow\n      placement=\"top\"\n      header={\n        <MetaText icon=\"at\">\n          <div>Contact Point</div>\n          <Strong>{contactPoint}</Strong>\n        </MetaText>\n      }\n      key={uniqueId()}\n      content={\n        <Stack direction=\"row\" gap={0.5}>\n          {/* use \"label\" to indicate how many of that type we have in the contact point */}\n          {Object.entries(groupedIntegrations).map(([type, integrations]) => (\n            <Label\n              key={uniqueId()}\n              label={integrations.length > 1 ? integrations.length : undefined}\n              icon={INTEGRATION_ICONS[type]}\n              value={upperFirst(type)}\n            />\n          ))}\n        </Stack>\n      }\n    >\n      <Link to={createContactPointLink(contactPoint, alertManagerSourceName)}>\n        <Strong>{contactPoint}</Strong>\n      </Link>\n    </HoverCard>\n  );\n};\n\nfunction getContactPointErrors(contactPoint: string, contactPointsState: ReceiversState): JSX.Element[] {\n  const notifierStates = Object.entries(contactPointsState[contactPoint]?.notifiers ?? []);\n  const contactPointErrors = notifierStates.reduce((acc: JSX.Element[] = [], [_, notifierStatuses]) => {\n    const notifierErrors = notifierStatuses\n      .filter((status) => status.lastNotifyAttemptError)\n      .map((status) => (\n        <Label\n          icon=\"at\"\n          key={uniqueId()}\n          label={`Contact Point › ${status.name}`}\n          value={status.lastNotifyAttemptError}\n        />\n      ));\n\n    return acc.concat(notifierErrors);\n  }, []);\n\n  return contactPointErrors;\n}\n\nconst routePropertyToLabel = (key: keyof InhertitableProperties): string => {\n  switch (key) {\n    case 'receiver':\n      return 'Contact Point';\n    case 'group_by':\n      return 'Group by';\n    case 'group_interval':\n      return 'Group interval';\n    case 'group_wait':\n      return 'Group wait';\n    case 'mute_time_intervals':\n      return 'Mute timings';\n    case 'repeat_interval':\n      return 'Repeat interval';\n  }\n};\n\nconst routePropertyToValue = (key: keyof InhertitableProperties, value: string | string[]): React.ReactNode => {\n  const isNotGrouping = key === 'group_by' && Array.isArray(value) && value[0] === '...';\n  const isSingleGroup = key === 'group_by' && Array.isArray(value) && value.length === 0;\n\n  if (isNotGrouping) {\n    return (\n      <Span variant=\"bodySmall\" color=\"secondary\">\n        Not grouping\n      </Span>\n    );\n  }\n\n  if (isSingleGroup) {\n    return (\n      <Span variant=\"bodySmall\" color=\"secondary\">\n        Single group\n      </Span>\n    );\n  }\n\n  return Array.isArray(value) ? value.join(', ') : value;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css`\n        color: #fff;\n        background: ${color};\n        padding: ${theme.spacing(0.33)} ${theme.spacing(0.66)};\n        font-size: ${theme.typography.bodySmall.fontSize};\n\n        border: solid 1px ${borderColor};\n        border-radius: ${theme.shape.borderRadius(2)};\n      `,\n    };\n  },\n  childPolicies: css`\n    margin-left: ${theme.spacing(4)};\n    position: relative;\n\n    &:before {\n      content: '';\n      position: absolute;\n      height: calc(100% - 10px);\n\n      border-left: solid 1px ${theme.colors.border.weak};\n\n      margin-top: 0;\n      margin-left: -20px;\n    }\n  `,\n  metadataRow: css`\n    background: ${theme.colors.background.primary};\n    padding: ${theme.spacing(1.5)};\n\n    border-bottom-left-radius: ${theme.shape.borderRadius(2)};\n    border-bottom-right-radius: ${theme.shape.borderRadius(2)};\n  `,\n  matchersRow: css`\n    padding: ${theme.spacing(1.5)};\n    border-bottom: solid 1px ${theme.colors.border.weak};\n  `,\n  policyWrapper: (hasFocus = false) => css`\n    flex: 1;\n    position: relative;\n    background: ${theme.colors.background.secondary};\n\n    border-radius: ${theme.shape.borderRadius(2)};\n    border: solid 1px ${theme.colors.border.weak};\n\n    ${hasFocus &&\n    css`\n      border-color: ${theme.colors.primary.border};\n    `}\n  `,\n  metadata: css`\n    color: ${theme.colors.text.secondary};\n\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n  // TODO I'm not quite sure why the margins are different for non-child policies, should investigate a bit more\n  addPolicyWrapper: (hasChildPolicies: boolean) => css`\n    margin-top: -${theme.spacing(hasChildPolicies ? 1.5 : 2)};\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  gutterIcon: css`\n    position: absolute;\n\n    top: 0;\n    transform: translateY(50%);\n    left: -${theme.spacing(4)};\n\n    color: ${theme.colors.text.secondary};\n    background: ${theme.colors.background.primary};\n\n    width: 25px;\n    height: 25px;\n    text-align: center;\n\n    border: solid 1px ${theme.colors.border.weak};\n    border-radius: ${theme.shape.borderRadius(2)};\n\n    padding: 0;\n  `,\n});\n\nexport { Policy };\n","import { css } from '@emotion/css';\nimport { intersectionBy, isEqual } from 'lodash';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, UrlQueryMap } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Alert, LoadingPlaceholder, Tab, TabContent, TabsBar, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { ObjectMatcher, Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useCleanup } from '../../../core/hooks/useCleanup';\n\nimport { useGetContactPointsState } from './api/receiversApi';\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport { NoAlertManagerWarning } from './components/NoAlertManagerWarning';\nimport { ProvisionedResource, ProvisioningAlert } from './components/Provisioning';\nimport { MuteTimingsTable } from './components/mute-timings/MuteTimingsTable';\nimport {\n  computeInheritedTree,\n  findRoutesMatchingPredicate,\n  NotificationPoliciesFilter,\n} from './components/notification-policies/Filters';\nimport {\n  useAddPolicyModal,\n  useEditPolicyModal,\n  useDeletePolicyModal,\n  useAlertGroupsModal,\n} from './components/notification-policies/Modals';\nimport { Policy } from './components/notification-policies/Policy';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useAlertManagersByPermission } from './hooks/useAlertManagerSources';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertGroupsAction, fetchAlertManagerConfigAction, updateAlertManagerConfigAction } from './state/actions';\nimport { FormAmRoute } from './types/amroutes';\nimport { addUniqueIdentifierToRoute, normalizeMatchers } from './utils/amroutes';\nimport { isVanillaPrometheusAlertManagerDataSource } from './utils/datasource';\nimport { initialAsyncRequestState } from './utils/redux';\nimport { addRouteToParentRoute, mergePartialAmRouteWithRouteTree, omitRouteFromRouteTree } from './utils/routeTree';\n\nenum ActiveTab {\n  NotificationPolicies = 'notification_policies',\n  MuteTimings = 'mute_timings',\n}\n\nconst AmRoutes = () => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { tab } = getActiveTabFromUrl(queryParams);\n\n  const [activeTab, setActiveTab] = useState<ActiveTab>(tab);\n  const [updatingTree, setUpdatingTree] = useState<boolean>(false);\n  const [contactPointFilter, setContactPointFilter] = useState<string | undefined>();\n  const [labelMatchersFilter, setLabelMatchersFilter] = useState<ObjectMatcher[]>([]);\n\n  const alertManagers = useAlertManagersByPermission('notification');\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName(alertManagers);\n\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n  const contactPointsState = useGetContactPointsState(alertManagerSourceName ?? '');\n\n  useEffect(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  const {\n    result,\n    loading: resultLoading,\n    error: resultError,\n  } = (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config = result?.alertmanager_config;\n  const receivers = config?.receivers ?? [];\n\n  const rootRoute = useMemo(() => {\n    if (config?.route) {\n      return addUniqueIdentifierToRoute(config.route);\n    }\n\n    return;\n  }, [config?.route]);\n\n  // these are computed from the contactPoint and labels matchers filter\n  const routesMatchingFilters = useMemo(() => {\n    if (!rootRoute) {\n      return [];\n    }\n    return findRoutesMatchingFilters(rootRoute, { contactPointFilter, labelMatchersFilter });\n  }, [contactPointFilter, labelMatchersFilter, rootRoute]);\n\n  const isProvisioned = Boolean(config?.route?.provenance);\n\n  const alertGroups = useUnifiedAlertingSelector((state) => state.amAlertGroups);\n  const fetchAlertGroups = alertGroups[alertManagerSourceName || ''] ?? initialAsyncRequestState;\n\n  function handleSave(partialRoute: Partial<FormAmRoute>) {\n    if (!rootRoute) {\n      return;\n    }\n    const newRouteTree = mergePartialAmRouteWithRouteTree(alertManagerSourceName ?? '', partialRoute, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function handleDelete(route: RouteWithID) {\n    if (!rootRoute) {\n      return;\n    }\n    const newRouteTree = omitRouteFromRouteTree(route, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function handleAdd(partialRoute: Partial<FormAmRoute>, parentRoute: RouteWithID) {\n    if (!rootRoute) {\n      return;\n    }\n\n    const newRouteTree = addRouteToParentRoute(alertManagerSourceName ?? '', partialRoute, parentRoute, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function updateRouteTree(routeTree: Route) {\n    if (!result) {\n      return;\n    }\n\n    setUpdatingTree(true);\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: routeTree,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: alertManagerSourceName!,\n        successMessage: 'Updated notification policies',\n        refetch: true,\n      })\n    )\n      .unwrap()\n      .then(() => {\n        if (alertManagerSourceName) {\n          dispatch(fetchAlertGroupsAction(alertManagerSourceName));\n        }\n        closeEditModal();\n        closeAddModal();\n        closeDeleteModal();\n      })\n      .finally(() => {\n        setUpdatingTree(false);\n      });\n  }\n\n  // edit, add, delete modals\n  const [addModal, openAddModal, closeAddModal] = useAddPolicyModal(receivers, handleAdd, updatingTree);\n  const [editModal, openEditModal, closeEditModal] = useEditPolicyModal(\n    alertManagerSourceName ?? '',\n    receivers,\n    handleSave,\n    updatingTree\n  );\n  const [deleteModal, openDeleteModal, closeDeleteModal] = useDeletePolicyModal(handleDelete, updatingTree);\n  const [alertInstancesModal, showAlertGroupsModal] = useAlertGroupsModal();\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  // fetch AM instances grouping\n  useEffect(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertGroupsAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  if (!alertManagerSourceName) {\n    return (\n      <AlertingPageWrapper pageId=\"am-routes\">\n        <NoAlertManagerWarning availableAlertManagers={alertManagers} />\n      </AlertingPageWrapper>\n    );\n  }\n\n  const vanillaPrometheusAlertManager = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n  const readOnlyPolicies = vanillaPrometheusAlertManager || isProvisioned;\n  const readOnlyMuteTimings = vanillaPrometheusAlertManager;\n\n  const numberOfMuteTimings = result?.alertmanager_config.mute_time_intervals?.length ?? 0;\n  const haveData = result && !resultError && !resultLoading;\n  const isLoading = !result && resultLoading;\n  const haveError = resultError && !resultLoading;\n\n  const muteTimingsTabActive = activeTab === ActiveTab.MuteTimings;\n  const policyTreeTabActive = activeTab === ActiveTab.NotificationPolicies;\n\n  return (\n    <AlertingPageWrapper pageId=\"am-routes\">\n      <AlertManagerPicker\n        current={alertManagerSourceName}\n        onChange={setAlertManagerSourceName}\n        dataSources={alertManagers}\n      />\n      <TabsBar>\n        <Tab\n          label={'Notification Policies'}\n          active={policyTreeTabActive}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.NotificationPolicies);\n            setQueryParams({ tab: ActiveTab.NotificationPolicies });\n          }}\n        />\n        <Tab\n          label={'Mute Timings'}\n          active={muteTimingsTabActive}\n          counter={numberOfMuteTimings}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.MuteTimings);\n            setQueryParams({ tab: ActiveTab.MuteTimings });\n          }}\n        />\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {isLoading && <LoadingPlaceholder text=\"Loading Alertmanager config...\" />}\n        {haveError && (\n          <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n            {resultError.message || 'Unknown error.'}\n          </Alert>\n        )}\n        {haveData && (\n          <>\n            {policyTreeTabActive && (\n              <>\n                <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={alertManagerSourceName} />\n                {isProvisioned && <ProvisioningAlert resource={ProvisionedResource.RootNotificationPolicy} />}\n                <Stack direction=\"column\" gap={1}>\n                  {rootRoute && (\n                    <NotificationPoliciesFilter\n                      receivers={receivers}\n                      onChangeMatchers={setLabelMatchersFilter}\n                      onChangeReceiver={setContactPointFilter}\n                    />\n                  )}\n                  {rootRoute && (\n                    <Policy\n                      receivers={receivers}\n                      routeTree={rootRoute}\n                      currentRoute={rootRoute}\n                      alertGroups={fetchAlertGroups.result}\n                      contactPointsState={contactPointsState.receivers}\n                      readOnly={readOnlyPolicies}\n                      alertManagerSourceName={alertManagerSourceName}\n                      onAddPolicy={openAddModal}\n                      onEditPolicy={openEditModal}\n                      onDeletePolicy={openDeleteModal}\n                      onShowAlertInstances={showAlertGroupsModal}\n                      routesMatchingFilters={routesMatchingFilters}\n                    />\n                  )}\n                </Stack>\n                {addModal}\n                {editModal}\n                {deleteModal}\n                {alertInstancesModal}\n              </>\n            )}\n            {muteTimingsTabActive && (\n              <MuteTimingsTable alertManagerSourceName={alertManagerSourceName} hideActions={readOnlyMuteTimings} />\n            )}\n          </>\n        )}\n      </TabContent>\n    </AlertingPageWrapper>\n  );\n};\n\ntype RouteFilters = {\n  contactPointFilter?: string;\n  labelMatchersFilter?: ObjectMatcher[];\n};\n\nexport const findRoutesMatchingFilters = (rootRoute: RouteWithID, filters: RouteFilters): RouteWithID[] => {\n  const { contactPointFilter, labelMatchersFilter = [] } = filters;\n\n  let matchedRoutes: RouteWithID[][] = [];\n\n  const fullRoute = computeInheritedTree(rootRoute);\n\n  const routesMatchingContactPoint = contactPointFilter\n    ? findRoutesMatchingPredicate(fullRoute, (route) => route.receiver === contactPointFilter)\n    : undefined;\n\n  if (routesMatchingContactPoint) {\n    matchedRoutes.push(routesMatchingContactPoint);\n  }\n\n  const routesMatchingLabelMatchers = labelMatchersFilter.length\n    ? findRoutesMatchingPredicate(fullRoute, (route) => {\n        const routeMatchers = normalizeMatchers(route);\n        return labelMatchersFilter.every((filter) => routeMatchers.some((matcher) => isEqual(filter, matcher)));\n      })\n    : undefined;\n\n  if (routesMatchingLabelMatchers) {\n    matchedRoutes.push(routesMatchingLabelMatchers);\n  }\n\n  return intersectionBy(...matchedRoutes, 'id');\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tabContent: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n\ninterface QueryParamValues {\n  tab: ActiveTab;\n}\n\nfunction getActiveTabFromUrl(queryParams: UrlQueryMap): QueryParamValues {\n  let tab = ActiveTab.NotificationPolicies; // default tab\n\n  if (queryParams['tab'] === ActiveTab.NotificationPolicies) {\n    tab = ActiveTab.NotificationPolicies;\n  }\n\n  if (queryParams['tab'] === ActiveTab.MuteTimings) {\n    tab = ActiveTab.MuteTimings;\n  }\n\n  return {\n    tab,\n  };\n}\n\nexport default withErrorBoundary(AmRoutes, { style: 'page' });\n","import { ContactPointsState } from 'app/types';\n\nimport { CONTACT_POINTS_STATE_INTERVAL_MS } from '../utils/constants';\n\nimport { alertingApi } from './alertingApi';\nimport { fetchContactPointsState } from './grafana';\n\nexport const receiversApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    contactPointsState: build.query<ContactPointsState, { amSourceName: string }>({\n      queryFn: async ({ amSourceName }) => {\n        try {\n          const contactPointsState = await fetchContactPointsState(amSourceName);\n          return { data: contactPointsState };\n        } catch (error) {\n          return { error: error };\n        }\n      },\n    }),\n  }),\n});\n\nexport const useGetContactPointsState = (alertManagerSourceName: string) => {\n  const contactPointsStateEmpty: ContactPointsState = { receivers: {}, errorCount: 0 };\n  const { currentData: contactPointsState } = receiversApi.useContactPointsStateQuery(\n    { amSourceName: alertManagerSourceName ?? '' },\n    {\n      skip: !alertManagerSourceName,\n      pollingInterval: CONTACT_POINTS_STATE_INTERVAL_MS,\n    }\n  );\n  return contactPointsState ?? contactPointsStateEmpty;\n};\n","import React from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize = ({ actions, children, fallback = true }: React.PropsWithChildren<Props>) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.weak};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -17px;\n    bottom: 0;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Alert, useStyles2 } from '@grafana/ui/src';\n\nimport { AlertmanagerChoice } from '../../../../plugins/datasource/alertmanager/types';\nimport { alertmanagerApi } from '../api/alertmanagerApi';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\ninterface GrafanaAlertmanagerDeliveryWarningProps {\n  currentAlertmanager: string;\n}\n\nexport function GrafanaAlertmanagerDeliveryWarning({ currentAlertmanager }: GrafanaAlertmanagerDeliveryWarningProps) {\n  const styles = useStyles2(getStyles);\n\n  const { useGetAlertmanagerChoiceStatusQuery } = alertmanagerApi;\n  const { currentData: amChoiceStatus } = useGetAlertmanagerChoiceStatusQuery();\n\n  const viewingInternalAM = currentAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  const interactsWithExternalAMs =\n    amChoiceStatus?.alertmanagersChoice &&\n    [AlertmanagerChoice.External, AlertmanagerChoice.All].includes(amChoiceStatus?.alertmanagersChoice);\n\n  if (!interactsWithExternalAMs || !viewingInternalAM) {\n    return null;\n  }\n\n  const hasActiveExternalAMs = amChoiceStatus.numExternalAlertmanagers > 0;\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.External) {\n    return (\n      <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n        Grafana is configured to send alerts to external Alertmanagers only. Changing Grafana Alertmanager configuration\n        will not affect delivery of your alerts.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  if (amChoiceStatus.alertmanagersChoice === AlertmanagerChoice.All && hasActiveExternalAMs) {\n    return (\n      <Alert title=\"You have additional Alertmanagers to configure\" severity=\"warning\">\n        Ensure you make configuration changes in the correct Alertmanagers; both internal and external. Changing one\n        will not affect the others.\n        <div className={styles.adminHint}>\n          To change your Alertmanager setup, go to the Alerting Admin page. If you do not have access, contact your\n          Administrator.\n        </div>\n      </Alert>\n    );\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  adminHint: css`\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { ReactNode } from 'react';\n\nimport { GrafanaTheme2, IconName } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  icon?: IconName;\n  label?: ReactNode;\n  value: ReactNode;\n  color?: string;\n}\n\n// TODO allow customization with color prop\nconst Label = ({ label, value, icon }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.meta().wrapper}>\n      <Stack direction=\"row\" gap={0} alignItems=\"stretch\">\n        <div className={styles.meta().label}>\n          <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n            {icon && <Icon name={icon} />} {label ?? ''}\n          </Stack>\n        </div>\n        <div className={styles.meta().value}>{value}</div>\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  meta: (color?: string) => ({\n    wrapper: css`\n      font-size: ${theme.typography.bodySmall.fontSize};\n    `,\n    label: css`\n      display: flex;\n      align-items: center;\n\n      padding: ${theme.spacing(0.33)} ${theme.spacing(1)};\n      background: ${theme.colors.secondary.transparent};\n\n      border: solid 1px ${theme.colors.border.medium};\n      border-top-left-radius: ${theme.shape.borderRadius(2)};\n      border-bottom-left-radius: ${theme.shape.borderRadius(2)};\n    `,\n    value: css`\n      padding: ${theme.spacing(0.33)} ${theme.spacing(1)};\n      font-weight: ${theme.typography.fontWeightBold};\n\n      border: solid 1px ${theme.colors.border.medium};\n      border-left: none;\n      border-top-right-radius: ${theme.shape.borderRadius(2)};\n      border-bottom-right-radius: ${theme.shape.borderRadius(2)};\n    `,\n  }),\n});\n\nexport { Label };\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { useAlertManagerSourceName } from '../hooks/useAlertManagerSourceName';\nimport { AlertManagerDataSource } from '../utils/datasource';\n\nimport { AlertManagerPicker } from './AlertManagerPicker';\n\ninterface Props {\n  availableAlertManagers: AlertManagerDataSource[];\n}\n\nconst NoAlertManagersAvailable = () => (\n  <Alert title=\"No Alertmanager found\" severity=\"warning\">\n    We could not find any external Alertmanagers and you may not have access to the built-in Grafana Alertmanager.\n  </Alert>\n);\n\nconst OtherAlertManagersAvailable = () => (\n  <Alert title=\"Selected Alertmanager not found. Select a different Alertmanager.\" severity=\"warning\">\n    Selected Alertmanager no longer exists or you may not have permission to access it.\n  </Alert>\n);\n\nexport const NoAlertManagerWarning = ({ availableAlertManagers }: Props) => {\n  const [_, setAlertManagerSourceName] = useAlertManagerSourceName(availableAlertManagers);\n  const hasOtherAMs = availableAlertManagers.length > 0;\n\n  return (\n    <div>\n      {hasOtherAMs ? (\n        <>\n          <AlertManagerPicker onChange={setAlertManagerSourceName} dataSources={availableAlertManagers} />\n          <OtherAlertManagersAvailable />\n        </>\n      ) : (\n        <NoAlertManagersAvailable />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { Alert, Badge } from '@grafana/ui';\n\nexport enum ProvisionedResource {\n  ContactPoint = 'contact point',\n  Template = 'template',\n  MuteTiming = 'mute timing',\n  AlertRule = 'alert rule',\n  RootNotificationPolicy = 'root notification policy',\n}\n\ninterface ProvisioningAlertProps {\n  resource: ProvisionedResource;\n}\n\nexport const ProvisioningAlert = ({ resource }: ProvisioningAlertProps) => {\n  return (\n    <Alert title={`This ${resource} cannot be edited through the UI`} severity=\"info\">\n      This {resource} has been provisioned, that means it was created by config. Please contact your server admin to\n      update this {resource}.\n    </Alert>\n  );\n};\n\nexport const ProvisioningBadge = () => {\n  return <Badge text={'Provisioned'} color={'purple'} />;\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { Authorize } from '../Authorize';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails = ({ alert, alertManagerSourceName }: AmNotificationsAlertDetailsProps) => {\n  const styles = useStyles2(getStyles);\n  const instancePermissions = getInstancesPermissions(alertManagerSourceName);\n\n  // For Grafana Managed alerts the Generator URL redirects to the alert rule edit page, so update permission is required\n  // For external alert manager the Generator URL redirects to an external service which we don't control\n  const isGrafanaSource = isGrafanaRulesSource(alertManagerSourceName);\n  const isSeeSourceButtonEnabled = isGrafanaSource\n    ? contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)\n    : true;\n\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        <Authorize actions={[instancePermissions.update, instancePermissions.create]} fallback={contextSrv.isEditor}>\n          {alert.status.state === AlertState.Suppressed && (\n            <LinkButton\n              href={`${makeAMLink(\n                '/alerting/silences',\n                alertManagerSourceName\n              )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n              className={styles.button}\n              icon={'bell'}\n              size={'sm'}\n            >\n              Manage silences\n            </LinkButton>\n          )}\n          {alert.status.state === AlertState.Active && (\n            <LinkButton\n              href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n              className={styles.button}\n              icon={'bell-slash'}\n              size={'sm'}\n            >\n              Silence\n            </LinkButton>\n          )}\n        </Authorize>\n        {isSeeSourceButtonEnabled && alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            See source\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(2, 0)} !important;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  receivers: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\n\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels labels={labels} />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css`\n    margin-top: ${theme.spacing(3)};\n    ${theme.breakpoints.up('md')} {\n      margin-left: ${theme.spacing(4.5)};\n    }\n  `,\n  duration: css`\n    margin-left: ${theme.spacing(1)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            size=\"sm\"\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? <AlertLabels labels={group.labels} /> : <span>No grouping</span>}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: space-between;\n    padding: ${theme.spacing(1, 1, 1, 0)};\n    background-color: ${theme.colors.background.secondary};\n    width: 100%;\n  `,\n  group: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  summary: css``,\n  spanElement: css`\n    margin-left: ${theme.spacing(0.5)};\n  `,\n  [AlertState.Active]: css`\n    color: ${theme.colors.error.main};\n  `,\n  [AlertState.Suppressed]: css`\n    color: ${theme.colors.primary.main};\n  `,\n  [AlertState.Unprocessed]: css`\n    color: ${theme.colors.secondary.main};\n  `,\n});\n","import { lastValueFrom } from 'rxjs';\n\nimport { getBackendSrv } from '@grafana/runtime';\n\nimport { alertingApi } from './alertingApi';\nexport interface OnCallIntegration {\n  integration_url: string;\n}\nexport type OnCallIntegrationsResponse = OnCallIntegration[];\nexport type OnCallIntegrationsUrls = string[];\n\nexport const onCallApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getOnCallIntegrations: build.query<OnCallIntegrationsUrls, void>({\n      queryFn: async () => {\n        const integrations = await fetchOnCallIntegrations();\n        return { data: integrations };\n      },\n    }),\n  }),\n});\nexport async function fetchOnCallIntegrations(): Promise<OnCallIntegrationsUrls> {\n  try {\n    const response = await lastValueFrom(\n      getBackendSrv().fetch<OnCallIntegrationsResponse>({\n        url: '/api/plugin-proxy/grafana-oncall-app/api/internal/v1/alert_receive_channels/',\n        showErrorAlert: false,\n        showSuccessAlert: false,\n      })\n    );\n    return response.data.map((result) => result.integration_url);\n  } catch (error) {\n    return [];\n  }\n}\nexport const { useGetOnCallIntegrationsQuery } = onCallApi;\n","import { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nexport const isInOnCallIntegrations = (url: string, integrationsUrls: string[]) => {\n  return integrationsUrls.includes(url);\n};\n\nexport const isOnCallReceiver = (receiver: Receiver, integrationsUrls: string[]) => {\n  if (!receiver.grafana_managed_receiver_configs) {\n    return false;\n  }\n  // A receiver it's an onCall contact point if it includes only one integration, and this integration it's an onCall\n  // An integration it's an onCall type if it's included in the list of integrations returned by the onCall api endpoint\n  const onlyOneIntegration = receiver.grafana_managed_receiver_configs.length === 1;\n  const isOncall = isInOnCallIntegrations(\n    receiver.grafana_managed_receiver_configs[0]?.settings?.url ?? '',\n    integrationsUrls\n  );\n  return onlyOneIntegration && isOncall;\n};\n","import { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useGetOnCallIntegrationsQuery } from '../../../api/onCallApi';\nimport { usePluginBridge } from '../../../hooks/usePluginBridge';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\n\nimport { isOnCallReceiver } from './onCall/onCall';\nimport { AmRouteReceiver, ReceiverWithTypes } from './types';\n\nexport const useGetGrafanaReceiverTypeChecker = () => {\n  const { installed: isOnCallEnabled } = usePluginBridge(SupportedPlugin.OnCall);\n  const { data } = useGetOnCallIntegrationsQuery(undefined, {\n    skip: !isOnCallEnabled,\n  });\n  const getGrafanaReceiverType = (receiver: Receiver): SupportedPlugin | undefined => {\n    //CHECK FOR ONCALL PLUGIN\n    const onCallIntegrations = data ?? [];\n    if (isOnCallEnabled && isOnCallReceiver(receiver, onCallIntegrations)) {\n      return SupportedPlugin.OnCall;\n    }\n    //WE WILL ADD IN HERE IF THERE ARE MORE TYPES TO CHECK\n    return undefined;\n  };\n  return getGrafanaReceiverType;\n};\n\nexport const useGetAmRouteReceiverWithGrafanaAppTypes = (receivers: Receiver[]) => {\n  const getGrafanaReceiverType = useGetGrafanaReceiverTypeChecker();\n  const receiverToSelectableContactPointValue = (receiver: Receiver): AmRouteReceiver => {\n    const amRouteReceiverValue: AmRouteReceiver = {\n      label: receiver.name,\n      value: receiver.name,\n      grafanaAppReceiverType: getGrafanaReceiverType(receiver),\n    };\n    return amRouteReceiverValue;\n  };\n\n  return receivers.map(receiverToSelectableContactPointValue);\n};\n\nexport const useGetReceiversWithGrafanaAppTypes = (receivers: Receiver[]): ReceiverWithTypes[] => {\n  const getGrafanaReceiverType = useGetGrafanaReceiverTypeChecker();\n  return receivers.map((receiver: Receiver) => {\n    return {\n      ...receiver,\n      grafanaAppReceiverType: getGrafanaReceiverType(receiver),\n    };\n  });\n};\n","import React from 'react';\n\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag = ({ state }: Props) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { AlertManagerDataSource, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction useIsAlertManagerAvailable(availableAlertManagers: AlertManagerDataSource[]) {\n  return useCallback(\n    (alertManagerName: string) => {\n      const availableAlertManagersNames = availableAlertManagers.map((am) => am.name);\n      return availableAlertManagersNames.includes(alertManagerName);\n    },\n    [availableAlertManagers]\n  );\n}\n\n/* This will return am name either from query params or from local storage or a default (grafana).\n * Due to RBAC permissions Grafana Managed Alert manager or external alert managers may not be available\n * In the worst case neither GMA nor external alert manager is available\n */\nexport function useAlertManagerSourceName(\n  availableAlertManagers: AlertManagerDataSource[]\n): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n  const isAlertManagerAvailable = useIsAlertManagerAvailable(availableAlertManagers);\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerAvailable(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams, isAlertManagerAvailable]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerAvailable(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerAvailable(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  if (isAlertManagerAvailable(GRAFANA_RULES_SOURCE_NAME)) {\n    return [GRAFANA_RULES_SOURCE_NAME, update];\n  }\n\n  return [undefined, update];\n}\n","import { useMemo } from 'react';\n\nimport { getAlertManagerDataSourcesByPermission } from '../utils/datasource';\n\nexport function useAlertManagersByPermission(accessType: 'instance' | 'notification') {\n  return useMemo(() => getAlertManagerDataSourcesByPermission(accessType), [accessType]);\n}\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n"],"names":["EmptyArea","children","styles","getStyles","theme","EmptyAreaWithCTA","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","text","href","showButton","commonProps","Button","MuteTimingsTable","alertManagerSourceName","muteTimingNames","hideActions","dispatch","permissions","amConfigs","useUnifiedAlertingSelector","state","muteTimingName","setMuteTimingName","result","items","muteTimings","muteTimingsProvenances","name","mute","columns","useColumns","Spacer","Authorize","DynamicTable","ConfirmModal","userHasEditPermissions","userHasDeletePermissions","showActions","data","Provisioning","renderTimeIntervals","Link","IconButton","timeIntervals","interval","index","times","weekdays","days_of_month","months","years","timeString","weekdayString","daysString","monthsString","yearsString","NotificationPoliciesFilter","receivers","onChangeReceiver","onChangeMatchers","searchParams","setSearchParams","useURLSearchParams","searchInputRef","queryString","contactPoint","getNotificationPoliciesFilters","handleChangeLabels","matchers","clearFilters","receiverOptions","toOption","selectedContactPoint","option","hasFilters","inputInvalid","Field","Label","Tooltip","Icon","Input","event","Select","findRoutesMatchingPredicate","routeTree","predicateFn","matches","findMatch","route","computeInheritedTree","inheritableProperties","receiver","AlertGroupsSummary","active","suppressed","unprocessed","statsComponents","total","Badge","mergePartialAmRouteWithRouteTree","partialFormRoute","findExistingRoute","findAndReplace","currentRoute","updatedRoute","newRoute","formAmRouteToAmRoute","omitRouteFromRouteTree","findRoute","findAndOmit","acc","addRouteToParentRoute","parentRoute","findAndAdd","findAndOmitId","id","matchersToArrayFieldMatchers","isRegex","value","selectableValueToString","selectableValue","selectableValuesToStrings","arr","emptyArrayFieldMatcher","defaultGroupBy","commonGroupByOptions","emptyRoute","normalizeMatchers","matcher","isEqual","operator","label","addUniqueIdentifierToRoute","amRouteToFormAmRoute","formRoutes","subRoute","subFormRoute","objectMatchers","formAmRoute","existing","overrideGrouping","groupBy","overrideTimings","groupWaitValue","groupIntervalValue","repeatIntervalValue","INHERIT_FROM_PARENT","group_by","group_wait","group_interval","repeat_interval","object_matchers","routes","amRoute","stringToSelectableValue","str","stringsToSelectableValues","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","promDurationValidator","duration","PromDurationDocs","getPromDurationStyles","PromDurationDocsTimeUnit","unit","example","PromDurationInput","props","ref","HoverCard","getFormStyles","TIMING_OPTIONS_DEFAULTS","AmRootRouteForm","actionButtons","onSubmit","isTimingOptionsExpanded","setIsTimingOptionsExpanded","groupByOptions","setGroupByOptions","defaultValues","Form","register","control","errors","setValue","InputControl","onChange","field","opt","opts","Collapse","useMuteTimingOptions","alertManagers","useAlertManagerSourceName","AmRoutesExpandedForm","defaults","formStyles","muteTimingOptions","emptyMatcher","receiversWithOnCallOnTop","onCallFirst","watch","FieldArray","fields","append","remove","Switch","error","FieldValidationMessage","commonSpacing","Matchers","NUM_MATCHERS","firstFew","rest","hasMoreMatchers","MatcherBadge","color","borderColor","useAddPolicyModal","handleAdd","loading","showModal","setShowModal","setParentRoute","AmRouteReceivers","handleDismiss","handleShow","UpdatingModal","Modal","useEditPolicyModal","handleSave","isDefaultPolicy","setIsDefaultPolicy","setRoute","useDeletePolicyModal","handleDelete","handleSubmit","useAlertGroupsModal","alertGroups","setAlertGroups","setMatchers","instancesByState","instances","group","instance","AlertGroup","isOpen","Spinner","OperatorFunctions","lv","mv","isLabelMatch","labelKey","labelValue","matcherKey","matcherValue","matchFunction","matchLabels","labels","findMatchingRoutes","root","normalizedMatchers","child","matchingChildren","findMatchingAlertGroups","matchingGroups","matchingAlerts","alert","matchingRoute","getInheritedProperties","childRoute","propertiesParentInherited","fullParentProperties","inheritedProperties","parentValue","property","inheritFromParent","inheritEmptyGroupByFromParent","MetaText","icon","interactive","Strong","Policy","contactPointsState","readOnly","routesMatchingFilters","onEditPolicy","onAddPolicy","onDeletePolicy","onShowAlertInstances","showMatchingInstances","canEditRoutes","canDeleteRoutes","continueMatching","timingOptions","hasMatchers","hasMuteTimings","hasFocus","showMatchesAllLabelsWarning","actualContactPoint","getContactPointErrors","hasInheritedProperties","childPolicies","inheritedGrouping","noGrouping","customGrouping","singleGroup","isEditable","isDeletable","matchingAlertGroups","numberOfAlertInstances","ContinueMatchingIndicator","AllMatchesIndicator","DefaultPolicyIndicator","Errors","Dropdown","Menu","ContactPointsHoverDetails","MuteTimings","TimingOptionsMeta","InheritedProperties","childInheritedProperties","properties","key","routePropertyToLabel","routePropertyToValue","timings","timing","groupWait","groupInterval","INTEGRATION_ICONS","details","groupedIntegrations","config","type","integrations","_","notifierStatuses","notifierErrors","status","isNotGrouping","isSingleGroup","hasChildPolicies","ActiveTab","AmRoutes","queryParams","setQueryParams","useQueryParams","tab","getActiveTabFromUrl","activeTab","setActiveTab","updatingTree","setUpdatingTree","contactPointFilter","setContactPointFilter","labelMatchersFilter","setLabelMatchersFilter","setAlertManagerSourceName","resultLoading","resultError","rootRoute","findRoutesMatchingFilters","isProvisioned","fetchAlertGroups","partialRoute","newRouteTree","updateRouteTree","closeEditModal","closeAddModal","closeDeleteModal","addModal","openAddModal","editModal","openEditModal","deleteModal","openDeleteModal","alertInstancesModal","showAlertGroupsModal","useCleanup","AlertingPageWrapper","NoAlertManagerWarning","vanillaPrometheusAlertManager","readOnlyPolicies","readOnlyMuteTimings","numberOfMuteTimings","haveData","isLoading","haveError","muteTimingsTabActive","policyTreeTabActive","AlertManagerPicker","TabsBar","Tab","TabContent","LoadingPlaceholder","Alert","GrafanaAlertmanagerDeliveryWarning","filters","matchedRoutes","fullRoute","routesMatchingContactPoint","routesMatchingLabelMatchers","routeMatchers","filter","receiversApi","build","amSourceName","useGetContactPointsState","contactPointsStateEmpty","actions","fallback","action","DynamicTableWithGuidelines","renderExpandedContent","item","currentAlertmanager","useGetAlertmanagerChoiceStatusQuery","amChoiceStatus","viewingInternalAM","hasActiveExternalAMs","NoAlertManagersAvailable","OtherAlertManagersAvailable","availableAlertManagers","hasOtherAMs","ProvisionedResource","ProvisioningAlert","resource","ProvisioningBadge","AlertDetails","instancePermissions","isSeeSourceButtonEnabled","annotationKey","annotationValue","AnnotationDetailsField","AlertGroupAlertsTable","alerts","AmAlertStateTag","AlertLabels","isCollapsed","setIsCollapsed","CollapseToggle","AlertGroupHeader","onCallApi","alertingApi","fetchOnCallIntegrations","lastValueFrom","useGetOnCallIntegrationsQuery","isInOnCallIntegrations","url","integrationsUrls","isOnCallReceiver","onlyOneIntegration","isOncall","useGetGrafanaReceiverTypeChecker","isOnCallEnabled","usePluginBridge","useGetAmRouteReceiverWithGrafanaAppTypes","getGrafanaReceiverType","receiverToSelectableContactPointValue","useGetReceiversWithGrafanaAppTypes","alertStateToState","useIsAlertManagerAvailable","alertManagerName","am","updateQueryParams","isAlertManagerAvailable","update","querySource","storeSource","useAlertManagersByPermission","accessType","search","searchValues","replace"],"sourceRoot":""}