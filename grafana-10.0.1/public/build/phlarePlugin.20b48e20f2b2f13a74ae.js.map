{"version":3,"file":"phlarePlugin.20b48e20f2b2f13a74ae.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/phlare/dataquery.gen.ts","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/Stack.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/EditorRow.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/EditorRows.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/phlareql/index.ts","webpack://grafana/./public/app/plugins/datasource/phlare/phlareql/phlareql.ts","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/autocomplete.ts","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/LabelsEditor.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/EditorField.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/QueryOptions.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/QueryEditor/QueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/datasource.ts","webpack://grafana/./public/app/plugins/datasource/phlare/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/phlare/module.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-dd7926f458/3/opt/drone/yarncache/react-use-npm-17.4.0-0ef4521544-0889da919b.zip/node_modules/react-use/esm/useLatest.js"],"sourcesContent":["// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTSTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport const DataQueryModelVersion = Object.freeze([0, 0]);\n\nexport type PhlareQueryType = ('metrics' | 'profile' | 'both');\n\nexport const defaultPhlareQueryType: PhlareQueryType = 'both';\n\nexport interface GrafanaPyroscope extends common.DataQuery {\n  /**\n   * Allows to group the results.\n   */\n  groupBy: Array<string>;\n  /**\n   * Specifies the query label selectors.\n   */\n  labelSelector: string;\n  /**\n   * Sets the maximum number of nodes in the flamegraph.\n   */\n  maxNodes?: number;\n  /**\n   * Specifies the type of profile to query.\n   */\n  profileTypeId: string;\n}\n\nexport const defaultGrafanaPyroscope: Partial<GrafanaPyroscope> = {\n  groupBy: [],\n  labelSelector: '{}',\n};\n","import { css } from '@emotion/css';\nimport React, { CSSProperties, useCallback } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface StackProps {\n  direction?: CSSProperties['flexDirection'];\n  alignItems?: CSSProperties['alignItems'];\n  wrap?: boolean;\n  gap?: number;\n  flexGrow?: CSSProperties['flexGrow'];\n  children: React.ReactNode;\n}\n\nexport function Stack(props: StackProps) {\n  const styles = useStyles2(useCallback((theme) => getStyles(theme, props), [props]));\n  return <div className={styles.root}>{props.children}</div>;\n}\n\nconst getStyles = (theme: GrafanaTheme2, props: StackProps) => ({\n  root: css({\n    display: 'flex',\n    flexDirection: props.direction ?? 'row',\n    flexWrap: props.wrap ?? true ? 'wrap' : undefined,\n    alignItems: props.alignItems,\n    gap: theme.spacing(props.gap ?? 2),\n    flexGrow: props.flexGrow,\n  }),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { Stack } from './Stack';\n\ninterface EditorRowProps {\n  children: React.ReactNode;\n  stackProps?: Partial<React.ComponentProps<typeof Stack>>;\n}\n\nexport const EditorRow = ({ children, stackProps }: EditorRowProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.root}>\n      <Stack gap={2} {...stackProps}>\n        {children}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    root: css({\n      padding: theme.spacing(1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.borderRadius(1),\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Stack } from './Stack';\n\ninterface EditorRowsProps {\n  children: React.ReactNode;\n}\n\nexport const EditorRows = ({ children }: EditorRowsProps) => {\n  return (\n    <Stack gap={0.5} direction=\"column\">\n      {children}\n    </Stack>\n  );\n};\n","import { language, languageConfiguration } from './phlareql';\n\nexport const languageDefinition = {\n  id: 'phlareql',\n  extensions: ['.phlareql'],\n  aliases: ['phlare', 'phlareql'],\n  mimetypes: [],\n  def: {\n    language,\n    languageConfiguration,\n  },\n};\n","import type { languages } from 'monaco-editor';\n\nexport const languageConfiguration: languages.LanguageConfiguration = {\n  // the default separators except `@$`\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^`~!#%^&*()\\-=+\\[{\\]}\\\\|;:'\",.<>\\/?\\s]+)/g,\n  brackets: [['{', '}']],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  folding: {},\n};\n\nexport const language: languages.IMonarchLanguage = {\n  ignoreCase: false,\n  defaultToken: '',\n  tokenPostfix: '.phlareql',\n\n  keywords: [],\n  operators: [],\n\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  integersuffix: /(ll|LL|u|U|l|L)?(ll|LL|u|U|l|L)?/,\n  floatsuffix: /[fFlL]?/,\n\n  tokenizer: {\n    root: [\n      // labels\n      [/[a-z_]\\w*(?=\\s*(=|!=|=~|!~))/, 'tag'],\n\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'], // non-teminated string\n      [/\"/, 'string', '@string_double'],\n      [/'/, 'string', '@string_single'],\n\n      // whitespace\n      { include: '@whitespace' },\n\n      // delimiters and operators\n      [/[{}()\\[\\]]/, '@brackets'],\n      [/[<>](?!@symbols)/, '@brackets'],\n      [\n        /@symbols/,\n        {\n          cases: {\n            '@operators': 'delimiter',\n            '@default': '',\n          },\n        },\n      ],\n\n      // numbers\n      [/\\d+/, 'number'],\n      [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\n      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, 'number.hex'],\n      [/0[0-7']*[0-7](@integersuffix)/, 'number.octal'],\n      [/0[bB][0-1']*[0-1](@integersuffix)/, 'number.binary'],\n      [/\\d[\\d']*\\d(@integersuffix)/, 'number'],\n      [/\\d(@integersuffix)/, 'number'],\n    ],\n\n    string_double: [\n      [/[^\\\\\"]+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/\"/, 'string', '@pop'],\n    ],\n\n    string_single: [\n      [/[^\\\\']+/, 'string'],\n      [/@escapes/, 'string.escape'],\n      [/\\\\./, 'string.escape.invalid'],\n      [/'/, 'string', '@pop'],\n    ],\n\n    clauses: [\n      [/[^(,)]/, 'tag'],\n      [/\\)/, 'identifier', '@pop'],\n    ],\n\n    whitespace: [[/[ \\t\\r\\n]+/, 'white']],\n  },\n};\n","import { monacoTypes, Monaco } from '@grafana/ui';\n\n/**\n * Class that implements CompletionItemProvider interface and allows us to provide suggestion for the Monaco\n * autocomplete system.\n *\n * At this moment we just pass it all the labels/values we get from Phlare backend later on we may do something a bit\n * smarter if there will be lots of labels.\n */\nexport class CompletionProvider implements monacoTypes.languages.CompletionItemProvider {\n  triggerCharacters = ['{', ',', '[', '(', '=', '~', ' ', '\"'];\n\n  // We set these directly and ae required for the provider to function.\n  monaco: Monaco | undefined;\n  editor: monacoTypes.editor.IStandaloneCodeEditor | undefined;\n\n  private labels: string[] = [];\n  private getLabelValues: (label: string) => Promise<string[]> = () => Promise.resolve([]);\n\n  init(labels: string[], getLabelValues: (label: string) => Promise<string[]>) {\n    this.labels = labels;\n    this.getLabelValues = getLabelValues;\n  }\n\n  provideCompletionItems(\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> {\n    // Should not happen, this should not be called before it is initialized\n    if (!(this.monaco && this.editor)) {\n      throw new Error('provideCompletionItems called before CompletionProvider was initialized');\n    }\n\n    // if the model-id does not match, then this call is from a different editor-instance,\n    // not \"our instance\", so return nothing\n    if (this.editor.getModel()?.id !== model.id) {\n      return { suggestions: [] };\n    }\n\n    const { range, offset } = getRangeAndOffset(this.monaco, model, position);\n    const situation = getSituation(model.getValue(), offset);\n\n    return this.getCompletions(situation).then((completionItems) => {\n      // monaco by-default alphabetically orders the items.\n      // to stop it, we use a number-as-string sortkey,\n      // so that monaco keeps the order we use\n      const maxIndexDigits = completionItems.length.toString().length;\n      const suggestions: monacoTypes.languages.CompletionItem[] = completionItems.map((item, index) => ({\n        kind: getMonacoCompletionItemKind(item.type, this.monaco!),\n        label: item.label,\n        insertText: item.insertText,\n        sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n        range,\n      }));\n      return { suggestions };\n    });\n  }\n\n  /**\n   * Get suggestion based on the situation we are in like whether we should suggest label names or values.\n   * @param situation\n   * @private\n   */\n  private async getCompletions(situation: Situation): Promise<Completion[]> {\n    switch (situation.type) {\n      // Not really sure what would make sense to suggest in this case so just leave it\n      case 'UNKNOWN': {\n        return [];\n      }\n      case 'EMPTY': {\n        return this.labels.map((key) => {\n          return {\n            label: key,\n            insertText: `{${key}=\"`,\n            type: 'LABEL_NAME',\n          };\n        });\n      }\n      case 'IN_LABEL_NAME':\n        return this.labels.map((key) => {\n          return {\n            label: key,\n            insertText: key,\n            type: 'LABEL_NAME',\n          };\n        });\n      case 'IN_LABEL_VALUE':\n        let values = await this.getLabelValues(situation.labelName);\n        return values.map((key) => {\n          return {\n            label: key,\n            insertText: situation.betweenQuotes ? key : `\"${key}\"`,\n            type: 'LABEL_VALUE',\n          };\n        });\n      default:\n        throw new Error(`Unexpected situation ${situation}`);\n    }\n  }\n}\n\n/**\n * Get item kind which is used for icon next to the suggestion.\n * @param type\n * @param monaco\n */\nfunction getMonacoCompletionItemKind(type: CompletionType, monaco: Monaco): monacoTypes.languages.CompletionItemKind {\n  switch (type) {\n    case 'LABEL_NAME':\n      return monaco.languages.CompletionItemKind.Enum;\n    case 'LABEL_VALUE':\n      return monaco.languages.CompletionItemKind.EnumMember;\n    default:\n      throw new Error(`Unexpected CompletionType: ${type}`);\n  }\n}\n\nexport type CompletionType = 'LABEL_NAME' | 'LABEL_VALUE';\ntype Completion = {\n  type: CompletionType;\n  label: string;\n  insertText: string;\n};\n\nexport type Label = {\n  name: string;\n  value: string;\n};\n\nexport type Situation =\n  | {\n      type: 'UNKNOWN';\n    }\n  | {\n      type: 'EMPTY';\n    }\n  | {\n      type: 'IN_LABEL_NAME';\n      otherLabels: Label[];\n    }\n  | {\n      type: 'IN_LABEL_VALUE';\n      labelName: string;\n      betweenQuotes: boolean;\n      otherLabels: Label[];\n    };\n\nconst labelNameRegex = /[a-zA-Z_][a-zA-Z0-9_]*/;\nconst labelValueRegex = /[^\"]*/; // anything except a double quote\nconst labelPairsRegex = new RegExp(`(${labelNameRegex.source})=\"(${labelValueRegex.source})\"`, 'g');\nconst inLabelValueRegex = new RegExp(`(${labelNameRegex.source})=(\"?)${labelValueRegex.source}$`);\nconst inLabelNameRegex = new RegExp(/[{,]\\s*[a-zA-Z0-9_]*$/);\n\n/**\n * Figure out where is the cursor and what kind of suggestions are appropriate.\n * As currently Phlare handles just a simple {foo=\"bar\", baz=\"zyx\"} kind of values we can do with simple regex to figure\n * out where we are with the cursor.\n * @param text\n * @param offset\n */\nfunction getSituation(text: string, offset: number): Situation {\n  if (text === '') {\n    return {\n      type: 'EMPTY',\n    };\n  }\n\n  // Get all the labels so far in the query, so we can do some more filtering.\n  const matches = text.matchAll(labelPairsRegex);\n  const existingLabels = Array.from(matches).reduce<Label[]>((acc, match) => {\n    const [_, name, value] = match[1];\n    acc.push({ name, value });\n    return acc;\n  }, []);\n\n  // Check if we are editing a label value right now. If so also get name of the label\n  const matchLabelValue = text.substring(0, offset).match(inLabelValueRegex);\n  if (matchLabelValue) {\n    return {\n      type: 'IN_LABEL_VALUE',\n      labelName: matchLabelValue[1],\n      betweenQuotes: !!matchLabelValue[2],\n      otherLabels: existingLabels,\n    };\n  }\n\n  // Check if we are editing a label name\n  const matchLabelName = text.substring(0, offset).match(inLabelNameRegex);\n  if (matchLabelName) {\n    return {\n      type: 'IN_LABEL_NAME',\n      otherLabels: existingLabels,\n    };\n  }\n\n  // Will happen only if user writes something that isn't really a label selector\n  return {\n    type: 'UNKNOWN',\n  };\n}\n\nfunction getRangeAndOffset(monaco: Monaco, model: monacoTypes.editor.ITextModel, position: monacoTypes.Position) {\n  const word = model.getWordAtPosition(position);\n  const range =\n    word != null\n      ? monaco.Range.lift({\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: word.startColumn,\n          endColumn: word.endColumn,\n        })\n      : monaco.Range.fromPositions(position);\n\n  // documentation says `position` will be \"adjusted\" in `getOffsetAt` so we clone it here just for sure.\n  const positionClone = {\n    column: position.column,\n    lineNumber: position.lineNumber,\n  };\n\n  const offset = model.getOffsetAt(positionClone);\n  return { offset, range };\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useRef } from 'react';\nimport { useAsync, useLatest } from 'react-use';\n\nimport { CodeEditor, Monaco, useStyles2, monacoTypes } from '@grafana/ui';\n\nimport { languageDefinition } from '../phlareql';\n\nimport { CompletionProvider } from './autocomplete';\n\ninterface Props {\n  value: string;\n  onChange: (val: string) => void;\n  onRunQuery: (value: string) => void;\n  labels?: string[];\n  getLabelValues: (label: string) => Promise<string[]>;\n}\n\nexport function LabelsEditor(props: Props) {\n  const setupAutocompleteFn = useAutocomplete(props.getLabelValues, props.labels);\n  const styles = useStyles2(getStyles);\n\n  const onRunQueryRef = useLatest(props.onRunQuery);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      className={styles.wrapper}\n      // NOTE: we will be setting inline-style-width/height on this element\n      ref={containerRef}\n    >\n      <CodeEditor\n        value={props.value}\n        language={langId}\n        onBlur={props.onChange}\n        containerStyles={styles.queryField}\n        monacoOptions={{\n          folding: false,\n          fontSize: 14,\n          lineNumbers: 'off',\n          overviewRulerLanes: 0,\n          renderLineHighlight: 'none',\n          scrollbar: {\n            vertical: 'hidden',\n            verticalScrollbarSize: 8, // used as \"padding-right\"\n            horizontal: 'hidden',\n            horizontalScrollbarSize: 0,\n          },\n          scrollBeyondLastLine: false,\n          wordWrap: 'on',\n          padding: {\n            top: 5,\n            bottom: 6,\n          },\n        }}\n        onBeforeEditorMount={ensurePhlareQL}\n        onEditorDidMount={(editor, monaco) => {\n          setupAutocompleteFn(editor, monaco);\n\n          const updateElementHeight = () => {\n            const containerDiv = containerRef.current;\n            if (containerDiv !== null) {\n              const pixelHeight = editor.getContentHeight();\n              containerDiv.style.height = `${pixelHeight + EDITOR_HEIGHT_OFFSET}px`;\n              containerDiv.style.width = '100%';\n              const pixelWidth = containerDiv.clientWidth;\n              editor.layout({ width: pixelWidth, height: pixelHeight });\n            }\n          };\n\n          editor.onDidContentSizeChange(updateElementHeight);\n          updateElementHeight();\n\n          editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Enter, () => {\n            onRunQueryRef.current(editor.getValue());\n          });\n        }}\n      />\n    </div>\n  );\n}\n\n// this number was chosen by testing various values. it might be necessary\n// because of the width of the border, not sure.\n//it needs to do 2 things:\n// 1. when the editor is single-line, it should make the editor height be visually correct\n// 2. when the editor is multi-line, the editor should not be \"scrollable\" (meaning,\n//    you do a scroll-movement in the editor, and it will scroll the content by a couple pixels\n//    up & down. this we want to avoid)\nconst EDITOR_HEIGHT_OFFSET = 2;\n\n/**\n * Hook that returns function that will set up monaco autocomplete for the label selector\n */\nfunction useAutocomplete(getLabelValues: (label: string) => Promise<string[]>, labels?: string[]) {\n  const providerRef = useRef<CompletionProvider>();\n  if (providerRef.current === undefined) {\n    providerRef.current = new CompletionProvider();\n  }\n\n  useAsync(async () => {\n    if (providerRef.current) {\n      providerRef.current.init(labels || [], getLabelValues);\n    }\n  }, [labels, getLabelValues]);\n\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  // This should be run in monaco onEditorDidMount\n  return (editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco) => {\n    if (providerRef.current) {\n      providerRef.current.editor = editor;\n      providerRef.current.monaco = monaco;\n\n      const { dispose } = monaco.languages.registerCompletionItemProvider(langId, providerRef.current);\n      autocompleteDisposeFun.current = dispose;\n    }\n  };\n}\n\n// we must only run the setup code once\nlet phlareqlSetupDone = false;\nconst langId = 'phlareql';\n\nfunction ensurePhlareQL(monaco: Monaco) {\n  if (phlareqlSetupDone === false) {\n    phlareqlSetupDone = true;\n    const { aliases, extensions, mimetypes, def } = languageDefinition;\n    monaco.languages.register({ id: langId, aliases, extensions, mimetypes });\n    monaco.languages.setMonarchTokensProvider(langId, def.language);\n    monaco.languages.setLanguageConfiguration(langId, def.languageConfiguration);\n  }\n}\n\nconst getStyles = () => {\n  return {\n    queryField: css`\n      flex: 1;\n      // Not exactly sure but without this the editor does not shrink after resizing (so you can make it bigger but not\n      // smaller). At the same time this does not actually make the editor 100px because it has flex 1 so I assume\n      // this should sort of act as a flex-basis (but flex-basis does not work for this). So yeah CSS magic.\n      width: 100px;\n    `,\n    wrapper: css`\n      display: flex;\n      flex: 1;\n      border: 1px solid rgba(36, 41, 46, 0.3);\n      border-radius: 2px;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { ComponentProps } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, Icon, PopoverContent, ReactUtils, stylesFactory, Tooltip, useTheme2 } from '@grafana/ui';\n\ninterface EditorFieldProps extends ComponentProps<typeof Field> {\n  label: string;\n  children: React.ReactElement;\n  width?: number | string;\n  optional?: boolean;\n  tooltip?: PopoverContent;\n}\n\nexport const EditorField = (props: EditorFieldProps) => {\n  const { label, optional, tooltip, children, width, ...fieldProps } = props;\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, width);\n\n  // Null check for backward compatibility\n  const childInputId = fieldProps?.htmlFor || ReactUtils?.getChildId(children);\n\n  const labelEl = (\n    <>\n      <label className={styles.label} htmlFor={childInputId}>\n        {label}\n        {optional && <span className={styles.optional}> - optional</span>}\n        {tooltip && (\n          <Tooltip placement=\"top\" content={tooltip} theme=\"info\">\n            <Icon name=\"info-circle\" size=\"sm\" className={styles.icon} />\n          </Tooltip>\n        )}\n      </label>\n      <span className={styles.space} />\n    </>\n  );\n\n  return (\n    <div className={styles.root}>\n      <Field className={styles.field} label={labelEl} {...fieldProps}>\n        {children}\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2, width?: number | string) => {\n  return {\n    space: css({\n      paddingRight: theme.spacing(0),\n      paddingBottom: theme.spacing(0.5),\n    }),\n    root: css({\n      minWidth: theme.spacing(width ?? 0),\n    }),\n    label: css({\n      fontSize: 12,\n      fontWeight: theme.typography.fontWeightMedium,\n    }),\n    optional: css({\n      fontStyle: 'italic',\n      color: theme.colors.text.secondary,\n    }),\n    field: css({\n      marginBottom: 0, // GrafanaUI/Field has a bottom margin which we must remove\n    }),\n    icon: css({\n      color: theme.colors.text.secondary,\n      marginLeft: theme.spacing(1),\n      ':hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n  };\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { CoreApp, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Icon, useStyles2, RadioButtonGroup, MultiSelect, Input } from '@grafana/ui';\n\nimport { Query } from '../types';\n\nimport { EditorField } from './EditorField';\nimport { Stack } from './Stack';\n\nexport interface Props {\n  query: Query;\n  onQueryChange: (query: Query) => void;\n  app?: CoreApp;\n  labels?: string[];\n}\n\nconst typeOptions: Array<{ value: Query['queryType']; label: string; description: string }> = [\n  { value: 'metrics', label: 'Metric', description: 'Return aggregated metrics' },\n  { value: 'profile', label: 'Profile', description: 'Return profile' },\n  { value: 'both', label: 'Both', description: 'Return both metric and profile data' },\n];\n\nfunction getTypeOptions(app?: CoreApp) {\n  if (app === CoreApp.Explore) {\n    return typeOptions;\n  }\n  return typeOptions.filter((option) => option.value !== 'both');\n}\n\n/**\n * Base on QueryOptionGroup component from grafana/ui but that is not available yet.\n */\nexport function QueryOptions({ query, onQueryChange, app, labels }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n  const typeOptions = getTypeOptions(app);\n  const groupByOptions = labels\n    ? labels.map((l) => ({\n        label: l,\n        value: l,\n      }))\n    : [];\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <div className={styles.header} onClick={toggleOpen} title=\"Click to edit options\">\n        <div className={styles.toggle}>\n          <Icon name={isOpen ? 'angle-down' : 'angle-right'} />\n        </div>\n        <h6 className={styles.title}>Options</h6>\n        {!isOpen && (\n          <div className={styles.description}>\n            {[`Type: ${query.queryType}`, query.groupBy?.length ? `Group by: ${query.groupBy.join(', ')}` : undefined]\n              .filter((v) => v)\n              .map((v, i) => (\n                <span key={i}>{v}</span>\n              ))}\n          </div>\n        )}\n      </div>\n      {isOpen && (\n        <div className={styles.body}>\n          <EditorField label={'Query Type'}>\n            <RadioButtonGroup\n              options={typeOptions}\n              value={query.queryType}\n              onChange={(value) => onQueryChange({ ...query, queryType: value })}\n            />\n          </EditorField>\n          <EditorField\n            label={'Group by'}\n            tooltip={\n              <>\n                Used to group the metric result by a specific label or set of labels. Does not apply to profile query.\n              </>\n            }\n          >\n            <MultiSelect\n              placeholder=\"Label\"\n              value={query.groupBy}\n              allowCustomValue\n              options={groupByOptions}\n              onChange={(change) => {\n                const changes = change.map((c: SelectableValue<string>) => {\n                  return c.value!;\n                });\n                onQueryChange({ ...query, groupBy: changes });\n              }}\n            />\n          </EditorField>\n          <EditorField label={'Max Nodes'} tooltip={<>Sets the maximum number of nodes to return in the flamegraph.</>}>\n            <Input\n              value={query.maxNodes || ''}\n              type=\"number\"\n              placeholder=\"16384\"\n              onChange={(event: React.SyntheticEvent<HTMLInputElement>) => {\n                let newValue = parseInt(event.currentTarget.value, 10);\n                newValue = isNaN(newValue) ? 0 : newValue;\n                onQueryChange({ ...query, maxNodes: newValue });\n              }}\n            />\n          </EditorField>\n        </div>\n      )}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    header: css({\n      display: 'flex',\n      cursor: 'pointer',\n      alignItems: 'baseline',\n      color: theme.colors.text.primary,\n      '&:hover': {\n        background: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    toggle: css({\n      color: theme.colors.text.secondary,\n      marginRight: `${theme.spacing(1)}`,\n    }),\n  };\n};\n","import { defaults } from 'lodash';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { CoreApp, QueryEditorProps, TimeRange } from '@grafana/data';\nimport { ButtonCascader, CascaderOption } from '@grafana/ui';\n\nimport { defaultGrafanaPyroscope, defaultPhlareQueryType, GrafanaPyroscope } from '../dataquery.gen';\nimport { PhlareDataSource } from '../datasource';\nimport { BackendType, PhlareDataSourceOptions, ProfileTypeMessage, Query } from '../types';\n\nimport { EditorRow } from './EditorRow';\nimport { EditorRows } from './EditorRows';\nimport { LabelsEditor } from './LabelsEditor';\nimport { QueryOptions } from './QueryOptions';\n\nexport type Props = QueryEditorProps<PhlareDataSource, Query, PhlareDataSourceOptions>;\n\nexport const defaultQuery: Partial<GrafanaPyroscope> = {\n  ...defaultGrafanaPyroscope,\n  queryType: defaultPhlareQueryType,\n};\n\nexport function QueryEditor(props: Props) {\n  let query = normalizeQuery(props.query, props.app);\n\n  function handleRunQuery(value: string) {\n    props.onChange({ ...props.query, labelSelector: value });\n    props.onRunQuery();\n  }\n\n  const { profileTypes, onProfileTypeChange, selectedProfileName } = useProfileTypes(\n    props.datasource,\n    props.query,\n    props.onChange,\n    props.datasource.backendType\n  );\n  const { labels, getLabelValues, onLabelSelectorChange } = useLabels(\n    props.range,\n    props.datasource,\n    props.query,\n    props.onChange\n  );\n  const cascaderOptions = useCascaderOptions(profileTypes);\n\n  return (\n    <EditorRows>\n      <EditorRow stackProps={{ wrap: false, gap: 1 }}>\n        <ButtonCascader onChange={onProfileTypeChange} options={cascaderOptions} buttonProps={{ variant: 'secondary' }}>\n          {selectedProfileName}\n        </ButtonCascader>\n        <LabelsEditor\n          value={query.labelSelector}\n          onChange={onLabelSelectorChange}\n          onRunQuery={handleRunQuery}\n          labels={labels}\n          getLabelValues={getLabelValues}\n        />\n      </EditorRow>\n      <EditorRow>\n        <QueryOptions query={query} onQueryChange={props.onChange} app={props.app} labels={labels} />\n      </EditorRow>\n    </EditorRows>\n  );\n}\n\nfunction useLabels(\n  range: TimeRange | undefined,\n  datasource: PhlareDataSource,\n  query: Query,\n  onChange: (value: Query) => void\n) {\n  // Round to nearest 5 seconds. If the range is something like last 1h then every render the range values change slightly\n  // and what ever has range as dependency is rerun. So this effectively debounces the queries.\n  const unpreciseRange = {\n    to: Math.ceil((range?.to.valueOf() || 0) / 5000) * 5000,\n    from: Math.floor((range?.from.valueOf() || 0) / 5000) * 5000,\n  };\n\n  const labelsResult = useAsync(() => {\n    return datasource.getLabelNames(query.profileTypeId + query.labelSelector, unpreciseRange.from, unpreciseRange.to);\n  }, [datasource, query.profileTypeId, query.labelSelector, unpreciseRange.to, unpreciseRange.from]);\n\n  // Create a function with range and query already baked in so we don't have to send those everywhere\n  const getLabelValues = useCallback(\n    (label: string) => {\n      return datasource.getLabelValues(\n        query.profileTypeId + query.labelSelector,\n        label,\n        unpreciseRange.from,\n        unpreciseRange.to\n      );\n    },\n    [query, datasource, unpreciseRange.to, unpreciseRange.from]\n  );\n\n  const onLabelSelectorChange = useCallback(\n    (value: string) => {\n      onChange({ ...query, labelSelector: value });\n    },\n    [onChange, query]\n  );\n\n  return { labels: labelsResult.value, getLabelValues, onLabelSelectorChange };\n}\n\n// Turn profileTypes into cascader options\nfunction useCascaderOptions(profileTypes: ProfileTypeMessage[]) {\n  return useMemo(() => {\n    let mainTypes = new Map<string, CascaderOption>();\n    // Classify profile types by name then sample type.\n    for (let profileType of profileTypes) {\n      let parts: string[];\n      // Phlare uses : as delimiter while Pyro uses .\n      if (profileType.id.indexOf(':') > -1) {\n        parts = profileType.id.split(':');\n      } else {\n        parts = profileType.id.split('.');\n        const last = parts.pop()!;\n        parts = [parts.join('.'), last];\n      }\n\n      const [name, type] = parts;\n\n      if (!mainTypes.has(name)) {\n        mainTypes.set(name, {\n          label: name,\n          value: profileType.id,\n          children: [],\n        });\n      }\n      mainTypes.get(name)?.children?.push({\n        label: type,\n        value: profileType.id,\n      });\n    }\n    return Array.from(mainTypes.values());\n  }, [profileTypes]);\n}\n\nfunction useProfileTypes(\n  datasource: PhlareDataSource,\n  query: Query,\n  onChange: (value: Query) => void,\n  backendType: BackendType = 'phlare'\n) {\n  const [profileTypes, setProfileTypes] = useState<ProfileTypeMessage[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      const profileTypes = await datasource.getProfileTypes();\n      setProfileTypes(profileTypes);\n    })();\n  }, [datasource]);\n\n  const onProfileTypeChange = useCallback(\n    (value: string[], selectedOptions: CascaderOption[]) => {\n      if (selectedOptions.length === 0) {\n        return;\n      }\n\n      const id = selectedOptions[selectedOptions.length - 1].value;\n\n      // Probably cannot happen but makes TS happy\n      if (typeof id !== 'string') {\n        throw new Error('id is not string');\n      }\n\n      onChange({ ...query, profileTypeId: id });\n    },\n    [onChange, query]\n  );\n\n  const selectedProfileName = useProfileName(profileTypes, query.profileTypeId, backendType);\n\n  return { profileTypes, onProfileTypeChange, selectedProfileName };\n}\n\nfunction useProfileName(profileTypes: ProfileTypeMessage[], profileTypeId: string, backendType: BackendType) {\n  return useMemo(() => {\n    if (!profileTypes) {\n      return 'Loading';\n    }\n    const profile = profileTypes.find((type) => type.id === profileTypeId);\n    if (!profile) {\n      if (backendType === 'pyroscope') {\n        return 'Select application';\n      }\n      return 'Select a profile type';\n    }\n\n    return profile.label;\n  }, [profileTypeId, profileTypes, backendType]);\n}\n\nexport function normalizeQuery(query: Query, app?: CoreApp | string) {\n  let normalized = defaults(query, defaultQuery);\n  if (app !== CoreApp.Explore && normalized.queryType === 'both') {\n    // In dashboards and other places, we can't show both types of graphs at the same time.\n    // This will also be a default when having 'both' query and adding it from explore to dashboard\n    normalized.queryType = 'profile';\n  }\n  return normalized;\n}\n","import Prism, { Grammar } from 'prismjs';\nimport { Observable, of } from 'rxjs';\n\nimport {\n  AbstractQuery,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  ScopedVars,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { extractLabelMatchers, toPromLikeExpr } from '../prometheus/language_utils';\n\nimport { normalizeQuery } from './QueryEditor/QueryEditor';\nimport { PhlareDataSourceOptions, Query, ProfileTypeMessage, BackendType } from './types';\n\nexport class PhlareDataSource extends DataSourceWithBackend<Query, PhlareDataSourceOptions> {\n  backendType: BackendType;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<PhlareDataSourceOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.backendType = instanceSettings.jsonData.backendType ?? 'phlare';\n  }\n\n  query(request: DataQueryRequest<Query>): Observable<DataQueryResponse> {\n    const validTargets = request.targets\n      .filter((t) => t.profileTypeId)\n      .map((t) => {\n        // Empty string errors out but honestly seems like we can just normalize it this way\n        if (t.labelSelector === '') {\n          return {\n            ...t,\n            labelSelector: '{}',\n          };\n        }\n        return normalizeQuery(t, request.app);\n      });\n    if (!validTargets.length) {\n      return of({ data: [] });\n    }\n    return super.query({\n      ...request,\n      targets: validTargets,\n    });\n  }\n\n  async getProfileTypes(): Promise<ProfileTypeMessage[]> {\n    return await super.getResource('profileTypes');\n  }\n\n  async getLabelNames(query: string, start: number, end: number): Promise<string[]> {\n    return await super.getResource('labelNames', { query, start, end });\n  }\n\n  async getLabelValues(query: string, label: string, start: number, end: number): Promise<string[]> {\n    return await super.getResource('labelValues', { label, query, start, end });\n  }\n\n  // We need the URL here because it may not be saved on the backend yet when used from config page.\n  async getBackendType(url: string): Promise<{ backendType: BackendType | 'unknown' }> {\n    return await super.getResource('backendType', { url });\n  }\n\n  applyTemplateVariables(query: Query, scopedVars: ScopedVars): Query {\n    return {\n      ...query,\n      labelSelector: this.templateSrv.replace(query.labelSelector ?? '', scopedVars),\n    };\n  }\n\n  async importFromAbstractQueries(abstractQueries: AbstractQuery[]): Promise<Query[]> {\n    return abstractQueries.map((abstractQuery) => this.importFromAbstractQuery(abstractQuery));\n  }\n\n  importFromAbstractQuery(labelBasedQuery: AbstractQuery): Query {\n    return {\n      refId: labelBasedQuery.refId,\n      labelSelector: toPromLikeExpr(labelBasedQuery),\n      queryType: 'both',\n      profileTypeId: '',\n      groupBy: [],\n    };\n  }\n\n  async exportToAbstractQueries(queries: Query[]): Promise<AbstractQuery[]> {\n    return queries.map((query) => this.exportToAbstractQuery(query));\n  }\n\n  exportToAbstractQuery(query: Query): AbstractQuery {\n    const phlareQuery = query.labelSelector;\n    if (!phlareQuery || phlareQuery.length === 0) {\n      return { refId: query.refId, labelMatchers: [] };\n    }\n    const tokens = Prism.tokenize(phlareQuery, grammar);\n    return {\n      refId: query.refId,\n      labelMatchers: extractLabelMatchers(tokens),\n    };\n  }\n}\n\nconst grammar: Grammar = {\n  'context-labels': {\n    pattern: /\\{[^}]*(?=}?)/,\n    greedy: true,\n    inside: {\n      comment: {\n        pattern: /#.*/,\n      },\n      'label-key': {\n        pattern: /[a-zA-Z_]\\w*(?=\\s*(=|!=|=~|!~))/,\n        alias: 'attr-name',\n        greedy: true,\n      },\n      'label-value': {\n        pattern: /\"(?:\\\\.|[^\\\\\"])*\"/,\n        greedy: true,\n        alias: 'attr-value',\n      },\n      punctuation: /[{]/,\n    },\n  },\n  punctuation: /[{}(),.]/,\n};\n","import React from 'react';\nimport { useAsyncFn, useDebounce } from 'react-use';\n\nimport { DataSourcePluginOptionsEditorProps, SelectableValue } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, DataSourceHttpSettings, EventsWithValidation, LegacyForms, regexValidation } from '@grafana/ui';\nimport { config } from 'app/core/config';\n\nimport { PhlareDataSource } from './datasource';\nimport { BackendType, PhlareDataSourceOptions } from './types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<PhlareDataSourceOptions> {}\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n  const [mismatchedBackendType, setMismatchedBackendType] = React.useState<BackendType | undefined>();\n\n  const dataSourceSrv = getDataSourceSrv();\n\n  const [, getBackendType] = useAsyncFn(async () => {\n    if (!options.url) {\n      return;\n    }\n    const ds = await dataSourceSrv.get({ type: options.type, uid: options.uid });\n    if (!(ds instanceof PhlareDataSource)) {\n      // Should not happen, makes TS happy\n      throw new Error('Datasource is not a PhlareDataSource');\n    }\n\n    const { backendType } = await ds.getBackendType(options.url);\n    if (backendType === 'unknown') {\n      setMismatchedBackendType(undefined);\n      return;\n    }\n\n    // If user already has something selected don't overwrite but show warning.\n    if (options.jsonData.backendType) {\n      if (backendType !== options.jsonData.backendType) {\n        setMismatchedBackendType(backendType);\n      } else {\n        setMismatchedBackendType(undefined);\n      }\n      return;\n    }\n\n    onOptionsChange({ ...options, jsonData: { ...options.jsonData, backendType } });\n  }, [options]);\n\n  useDebounce(getBackendType, 500, [options]);\n\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl={'http://localhost:4100'}\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n        secureSocksDSProxyEnabled={config.secureSocksDSProxyEnabled}\n      />\n\n      <h3 className=\"page-heading\">Querying</h3>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <LegacyForms.FormField\n              label=\"Minimal step\"\n              labelWidth={13}\n              inputEl={\n                <LegacyForms.Input\n                  className=\"width-6\"\n                  value={options.jsonData.minStep}\n                  spellCheck={false}\n                  placeholder=\"15s\"\n                  onChange={(event) => {\n                    onOptionsChange({\n                      ...options,\n                      jsonData: {\n                        ...options.jsonData,\n                        minStep: event.currentTarget.value,\n                      },\n                    });\n                  }}\n                  validationEvents={{\n                    [EventsWithValidation.onBlur]: [\n                      regexValidation(\n                        /^$|^\\d+(ms|[Mwdhmsy])$/,\n                        'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s'\n                      ),\n                    ],\n                  }}\n                />\n              }\n              tooltip=\"Minimal step used for metric query. Should be the same or higher as the scrape interval setting in the Phlare database.\"\n            />\n          </div>\n        </div>\n\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <LegacyForms.FormField\n              label=\"Backend type\"\n              labelWidth={13}\n              inputEl={\n                <LegacyForms.Select<BackendType>\n                  allowCustomValue={false}\n                  value={options.jsonData.backendType ? backendTypeOptions[options.jsonData.backendType] : undefined}\n                  options={Object.values(backendTypeOptions)}\n                  onChange={(option) => {\n                    onOptionsChange({\n                      ...options,\n                      jsonData: {\n                        ...options.jsonData,\n                        backendType: option.value,\n                      },\n                    });\n                  }}\n                />\n              }\n              tooltip=\"Select what type of backend you use. This datasource supports both Phlare and Pyroscope backends.\"\n            />\n          </div>\n        </div>\n        {mismatchedBackendType && (\n          <Alert\n            title={`\"${options.jsonData.backendType}\" option is selected but it seems like you are using \"${mismatchedBackendType}\" backend.`}\n            severity=\"warning\"\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nconst backendTypeOptions: Record<BackendType, SelectableValue<BackendType>> = {\n  phlare: {\n    label: 'Phlare',\n    value: 'phlare',\n  },\n  pyroscope: {\n    label: 'Pyroscope',\n    value: 'pyroscope',\n  },\n};\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor/QueryEditor';\nimport { PhlareDataSource } from './datasource';\nimport { Query, PhlareDataSourceOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<PhlareDataSource, Query, PhlareDataSourceOptions>(PhlareDataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n","import { useRef } from 'react';\nvar useLatest = function (value) {\n    var ref = useRef(value);\n    ref.current = value;\n    return ref;\n};\nexport default useLatest;\n"],"names":["DataQueryModelVersion","defaultPhlareQueryType","defaultGrafanaPyroscope","Stack","props","styles","theme","getStyles","EditorRow","children","stackProps","EditorRows","languageDefinition","CompletionProvider","labels","getLabelValues","model","position","range","offset","getRangeAndOffset","situation","getSituation","completionItems","maxIndexDigits","item","index","getMonacoCompletionItemKind","key","type","monaco","labelNameRegex","labelValueRegex","labelPairsRegex","inLabelValueRegex","inLabelNameRegex","text","matches","existingLabels","acc","match","_","name","value","matchLabelValue","word","positionClone","LabelsEditor","setupAutocompleteFn","useAutocomplete","onRunQueryRef","useLatest","containerRef","CodeEditor","langId","ensurePhlareQL","editor","updateElementHeight","containerDiv","pixelHeight","EDITOR_HEIGHT_OFFSET","pixelWidth","providerRef","useAsync","autocompleteDisposeFun","dispose","phlareqlSetupDone","aliases","extensions","mimetypes","def","EditorField","label","optional","tooltip","width","fieldProps","childInputId","labelEl","Tooltip","Icon","Field","stylesFactory","typeOptions","getTypeOptions","app","option","QueryOptions","query","onQueryChange","isOpen","toggleOpen","useToggle","groupByOptions","l","v","i","RadioButtonGroup","change","changes","c","Input","event","newValue","defaultQuery","QueryEditor","normalizeQuery","handleRunQuery","profileTypes","onProfileTypeChange","selectedProfileName","useProfileTypes","onLabelSelectorChange","useLabels","cascaderOptions","useCascaderOptions","ButtonCascader","datasource","onChange","unpreciseRange","labelsResult","mainTypes","profileType","parts","last","backendType","setProfileTypes","selectedOptions","id","useProfileName","profileTypeId","profile","normalized","PhlareDataSource","DataSourceWithBackend","instanceSettings","templateSrv","request","validTargets","t","of","start","end","url","scopedVars","abstractQueries","abstractQuery","labelBasedQuery","queries","phlareQuery","tokens","grammar","ConfigEditor","options","onOptionsChange","mismatchedBackendType","setMismatchedBackendType","dataSourceSrv","getBackendType","useAsyncFn","ds","useDebounce","DataSourceHttpSettings","config","backendTypeOptions","Alert","ref"],"sourceRoot":""}